// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
)

// AirOperationAirTaskingOrderService contains methods and other services that help
// with interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAirOperationAirTaskingOrderService] method instead.
type AirOperationAirTaskingOrderService struct {
	Options []option.RequestOption
}

// NewAirOperationAirTaskingOrderService generates a new service that applies the
// given options to each request. These options are applied after the parent
// client's options (if there is one), and before any request-specific options.
func NewAirOperationAirTaskingOrderService(opts ...option.RequestOption) (r AirOperationAirTaskingOrderService) {
	r = AirOperationAirTaskingOrderService{}
	r.Options = opts
	return
}

// Service operation to take multiple airtaskingorder records as a POST body and
// ingest into the database. This operation is intended to be used for automated
// feeds into UDL. A specific role is required to perform this service operation.
// Please contact the UDL team for assistance.
func (r *AirOperationAirTaskingOrderService) UnvalidatedPublish(ctx context.Context, body AirOperationAirTaskingOrderUnvalidatedPublishParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "filedrop/udl-airtaskingorder"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

type AirOperationAirTaskingOrderUnvalidatedPublishParams struct {
	Body []AirOperationAirTaskingOrderUnvalidatedPublishParamsBody
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f AirOperationAirTaskingOrderUnvalidatedPublishParams) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}

func (r AirOperationAirTaskingOrderUnvalidatedPublishParams) MarshalJSON() (data []byte, err error) {
	return json.Marshal(r.Body)
}

// Beta Version Air Tasking Order: The ATO is used to task air missions, assign
// cross force tasking as well as intraservice tasking.
//
// The properties BeginTs, ClassificationMarking, DataMode, OpExerName, Source are
// required.
type AirOperationAirTaskingOrderUnvalidatedPublishParamsBody struct {
	// The effective begin time for this ATO in ISO 8601 UTC format with millisecond
	// precision.
	BeginTs time.Time `json:"beginTs,required" format:"date-time"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,omitzero,required"`
	// Specifies the unique operation or exercise name, nickname, or codeword assigned
	// to a joint exercise or operation plan.
	OpExerName string `json:"opExerName,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// The indicator specifying an affirmative or a negatice condition for this
	// message.
	AckReqInd param.Opt[string] `json:"ackReqInd,omitzero"`
	// Specifies textual data amplifying the data contained in the acknowledgement
	// requirement indicator (ackRedInd) field or the unit required to acknowledge.
	AckUnitInstructions param.Opt[string] `json:"ackUnitInstructions,omitzero"`
	// Time the row was created in the database.
	CreatedAt param.Opt[time.Time] `json:"createdAt,omitzero" format:"date-time"`
	// Application user who created the row in the database.
	CreatedBy param.Opt[string] `json:"createdBy,omitzero"`
	// The effective end time for this ATO in ISO 8601 UTC format with millisecond
	// precision.
	EndTs param.Opt[time.Time] `json:"endTs,omitzero" format:"date-time"`
	// The month in which the message originated.
	MsgMonth param.Opt[string] `json:"msgMonth,omitzero"`
	// The identifier of the originator of the message.
	MsgOriginator param.Opt[string] `json:"msgOriginator,omitzero"`
	// The qualifier which caveats the message status.
	MsgQualifier param.Opt[string] `json:"msgQualifier,omitzero"`
	// The unique message identifier sequentially assigned by the originator.
	MsgSn param.Opt[string] `json:"msgSN,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork param.Opt[string] `json:"origNetwork,omitzero"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri param.Opt[string] `json:"rawFileURI,omitzero"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl param.Opt[string] `json:"sourceDL,omitzero"`
	// A collection that specifies the tasked country, tasked service, unit and mission
	// level tasking for this ATO.
	AcMsnTasking []AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTasking `json:"acMsnTasking,omitzero"`
	// A collection that details special instructions, important information, guidance,
	// and amplifying information regarding this ATO.
	GenText []AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyGenText `json:"genText,omitzero"`
	// A collection that specifies the naval flight operations for this ATO.
	NavalFltOps []AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyNavalFltOp `json:"navalFltOps,omitzero"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f AirOperationAirTaskingOrderUnvalidatedPublishParamsBody) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}
func (r AirOperationAirTaskingOrderUnvalidatedPublishParamsBody) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirTaskingOrderUnvalidatedPublishParamsBody
	return param.MarshalObject(r, (*shadow)(&r))
}

func init() {
	apijson.RegisterFieldValidator[AirOperationAirTaskingOrderUnvalidatedPublishParamsBody](
		"DataMode", false, "REAL", "TEST", "SIMULATED", "EXERCISE",
	)
}

// Collection that specifies the tasked country, tasked service, unit and mission
// level tasking for this ATO.
//
// The properties CountryCode, TaskedService, UnitDesignator are required.
type AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTasking struct {
	// The country code responsible for conducting this aircraft mission tasking for
	// the exercise or operation.
	CountryCode string `json:"countryCode,required"`
	// The service tasked with conducting this aircraft mission tasking for the
	// exercise or operation.
	TaskedService string `json:"taskedService,required"`
	// The designator of the unit that is tasked to perform this aircraft mission
	// tasking.
	UnitDesignator string `json:"unitDesignator,required"`
	// The readiness status expressed in time (minutes) for an aircraft to be airborne
	// after the launch order is received or the time required for a missile unit to
	// assume battle stations.
	AlertStatus param.Opt[int64] `json:"alertStatus,omitzero"`
	// The AMC number assigned to identify one aircraft from another.
	AmcMsnNum param.Opt[string] `json:"amcMsnNum,omitzero"`
	// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees
	// (negative values south of equator) for this tasked air mission.
	DepLocLat param.Opt[float64] `json:"depLocLat,omitzero"`
	// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian) for this tasked air mission.
	DepLocLon param.Opt[float64] `json:"depLocLon,omitzero"`
	// The location or name specified for the departure of the tasked air mission.
	DepLocName param.Opt[string] `json:"depLocName,omitzero"`
	// The departure location specified in UTM (100 meter) coordinates for the tasked
	// air mission.
	DepLocUtm param.Opt[string] `json:"depLocUTM,omitzero"`
	// The time of departure for the tasked air mission in ISO8601 UTC format with
	// millisecond precision.
	DepTime param.Opt[time.Time] `json:"depTime,omitzero" format:"date-time"`
	// The commander responsible for the planning and execution of the forces necessary
	// to achieve desired objectives.
	MsnCommander param.Opt[string] `json:"msnCommander,omitzero"`
	// The mission number assigned to this mission.
	MsnNum param.Opt[string] `json:"msnNum,omitzero"`
	// The identifier for the composite set of missions for this operation/exercise.
	PkgID param.Opt[string] `json:"pkgId,omitzero"`
	// The code for the preferred type or designator for a tasked air mission.
	PriMsnType param.Opt[string] `json:"priMsnType,omitzero"`
	// An indicator of whether a mission is or will be a residual mission.
	ResMsnInd param.Opt[string] `json:"resMsnInd,omitzero" format:"char"`
	// The code for the alternative type of a tasked air mission.
	SecMsnType param.Opt[string] `json:"secMsnType,omitzero"`
	// The tasked units location expressed as an ICAO or a place name.
	UnitLocName param.Opt[string] `json:"unitLocName,omitzero"`
	// A collection of aircraft mission location information for this aircraft mission
	// tasking.
	AcMsnLocSeg []AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingAcMsnLocSeg `json:"acMsnLocSeg,omitzero"`
	// A collection of the individual aircraft assigned to this aircraft mission
	// tasking.
	IndAcTasking []AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingIndAcTasking `json:"indACTasking,omitzero"`
	// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90
	// degrees (negative values south of equator) for this tasked air mission.
	RcvyLocLat []float64 `json:"rcvyLocLat,omitzero"`
	// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180
	// degrees (negative values west of Prime Meridian) for this tasked air mission.
	RcvyLocLon []float64 `json:"rcvyLocLon,omitzero"`
	// An array of locations specified for the recovery of the tasked air mission
	// represented by varying formats.
	RcvyLocName []string `json:"rcvyLocName,omitzero"`
	// An array of recovery locations specified in UTM (100 meter) coordinates for the
	// tasked air mission.
	RcvyLocUtm []string `json:"rcvyLocUTM,omitzero"`
	// An array of recovery times for the tasked air mission in ISO8601 UTC format with
	// millisecond precision.
	RcvyTime []time.Time `json:"rcvyTime,omitzero" format:"date-time"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTasking) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}
func (r AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTasking) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTasking
	return param.MarshalObject(r, (*shadow)(&r))
}

// Collection of aircraft mission location information for this aircraft mission
// tasking.
//
// The property StartTime is required.
type AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingAcMsnLocSeg struct {
	// The start time of this mission in ISO 8601 UTC format with millisecond
	// precision.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// The code for the priority assigned to this mission.
	AirMsnPri param.Opt[string] `json:"airMsnPri,omitzero"`
	// The altitude for this mission represented as hundreds of feet above MSL.
	Alt param.Opt[int64] `json:"alt,omitzero"`
	// The radius of the circle around the location being reported in feet.
	AreaGeoRad param.Opt[int64] `json:"areaGeoRad,omitzero"`
	// The end time of this mission in ISO 8601 UTC format with millisecond precision.
	EndTime param.Opt[time.Time] `json:"endTime,omitzero" format:"date-time"`
	// The name that identifies the location at which this mission is to be performed.
	// This can be the name of a general target area, orbit, cap point, station, etc.
	MsnLocName param.Opt[string] `json:"msnLocName,omitzero"`
	// The alpha-numeric specified location for this mission specified as a bearing
	// angle in degrees relative to true north and a range in nautical miles (NM).
	MsnLocPtBarT param.Opt[string] `json:"msnLocPtBarT,omitzero"`
	// WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative
	// values south of equator) for this tasked air mission.
	MsnLocPtLat param.Opt[float64] `json:"msnLocPtLat,omitzero"`
	// WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian) for this tasked air mission.
	MsnLocPtLon param.Opt[float64] `json:"msnLocPtLon,omitzero"`
	// The location name for this mission.
	MsnLocPtName param.Opt[string] `json:"msnLocPtName,omitzero"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingAcMsnLocSeg) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}
func (r AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingAcMsnLocSeg) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingAcMsnLocSeg
	return param.MarshalObject(r, (*shadow)(&r))
}

// Collection that specifies the naval flight operations for this ATO.
//
// The property AcftType is required.
type AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingIndAcTasking struct {
	// The type and model number for the aircraft. The field may specify a value of an
	// aircraft not yet assigned an aircraft code contained in the aircraft codes list.
	AcftType string `json:"acftType,required"`
	// The call sign assigned to this mission aircraft.
	CallSign param.Opt[string] `json:"callSign,omitzero"`
	// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective
	// Identification Feature (SIF).
	IffSifMode1Code param.Opt[string] `json:"iffSifMode1Code,omitzero"`
	// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective
	// Identification Feature (SIF).
	IffSifMode2Code param.Opt[string] `json:"iffSifMode2Code,omitzero"`
	// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective
	// Identification Feature (SIF).
	IffSifMode3Code param.Opt[string] `json:"iffSifMode3Code,omitzero"`
	// The Link 16 abbreviated call sign assigned to the ACA. This is normally the
	// first and last letter and the last two numbers of the call sign.
	Link16CallSign param.Opt[string] `json:"link16CallSign,omitzero"`
	// The number of aircraft participating in this mission.
	NumAcft param.Opt[int64] `json:"numAcft,omitzero"`
	// The code that indicates the ordinance mix carried on this mission aircraft.
	PriConfigCode param.Opt[string] `json:"priConfigCode,omitzero"`
	// The code for the secondary ordinance mix carried on this mission aircraft.
	SecConfigCode param.Opt[string] `json:"secConfigCode,omitzero"`
	// The TACAN channel assigned to this mission aircraft.
	TacanChan param.Opt[int64] `json:"tacanChan,omitzero"`
	// An optional array of link 16 octal track numbers assigned as the primary JTIDS
	// Unit (JU) address for the mission aircraft.
	JuAddress []int64 `json:"juAddress,omitzero"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingIndAcTasking) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}
func (r AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingIndAcTasking) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyAcMsnTaskingIndAcTasking
	return param.MarshalObject(r, (*shadow)(&r))
}

// Collection that details special instructions, important information, guidance,
// and amplifying information regarding this ATO.
type AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyGenText struct {
	// The free text that describes the information specific to the text indicator.
	Text param.Opt[string] `json:"text,omitzero"`
	// The indicator for the general text block. Examples include "OPENING REMARKS" and
	// "GENERAL SPINS INFORMATION".
	TextInd param.Opt[string] `json:"textInd,omitzero"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyGenText) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}
func (r AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyGenText) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyGenText
	return param.MarshalObject(r, (*shadow)(&r))
}

// Collection that specifies the naval flight operations for this ATO.
//
// The property ShipName is required.
type AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyNavalFltOp struct {
	// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
	ShipName string `json:"shipName,required"`
	// The time when flight operations begin in ISO8601 UTC format with millisecond
	// precision.
	FltOpStart param.Opt[time.Time] `json:"fltOpStart,omitzero" format:"date-time"`
	// The time when flight operations end in ISO8601 UTC format with millisecond
	// precision.
	FltOpStop param.Opt[time.Time] `json:"fltOpStop,omitzero" format:"date-time"`
	// An array of times at which an aircraft will be launched and/or recovered in
	// ISO8601 UTC format with millisecond precision.
	SchdLaunchRcvyTime []time.Time `json:"schdLaunchRcvyTime,omitzero" format:"date-time"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyNavalFltOp) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}
func (r AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyNavalFltOp) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirTaskingOrderUnvalidatedPublishParamsBodyNavalFltOp
	return param.MarshalObject(r, (*shadow)(&r))
}

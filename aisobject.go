// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	shimjson "github.com/Bluestaq/udl-golang-sdk/internal/encoding/json"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
)

// AIsObjectService contains methods and other services that help with interacting
// with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAIsObjectService] method instead.
type AIsObjectService struct {
	Options []option.RequestOption
}

// NewAIsObjectService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewAIsObjectService(opts ...option.RequestOption) (r AIsObjectService) {
	r = AIsObjectService{}
	r.Options = opts
	return
}

// Service operation to take multiple AIS objects as a POST body and ingest into
// the database. This operation is intended to be used for automated feeds into
// UDL. A specific role is required to perform this service operation. Please
// contact the UDL team for assistance.
func (r *AIsObjectService) UnvalidatedPublish(ctx context.Context, body AIsObjectUnvalidatedPublishParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "filedrop/udl-ais"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

type AIsObjectUnvalidatedPublishParams struct {
	Body []AIsObjectUnvalidatedPublishParamsBody
	paramObj
}

func (r AIsObjectUnvalidatedPublishParams) MarshalJSON() (data []byte, err error) {
	return shimjson.Marshal(r.Body)
}
func (r *AIsObjectUnvalidatedPublishParams) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &r.Body)
}

// Self-reported information obtained from Automatic Identification System (AIS)
// equipment. This contains information such as unique identification, status,
// position, course, and speed. The AIS is an automatic tracking system that uses
// transceivers on ships and is used by vessel traffic services. Although
// technically and operationally distinct, the AIS system is analogous to ADS-B
// that performs a similar function for aircraft. AIS is intended to assist a
// vessel's watchstanding officers and allow maritime authorities to track and
// monitor vessel movements. AIS integrates a standardized VHF transceiver with a
// positioning system such as Global Positioning System receiver, with other
// electronic navigation sensors, such as gyrocompass or rate of turn indicator.
// Vessels fitted with AIS transceivers can be tracked by AIS base stations located
// along coast lines or, when out of range of terrestrial networks, through a
// growing number of satellites that are fitted with special AIS receivers which
// are capable of deconflicting a large number of signatures.
//
// The properties ClassificationMarking, DataMode, Source, Ts are required.
type AIsObjectUnvalidatedPublishParamsBody struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,omitzero,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// The average speed, in kilometers/hour, calculated for the subject vessel during
	// the latest voyage (port to port).
	AvgSpeed param.Opt[float64] `json:"avgSpeed,omitzero"`
	// A uniquely designated identifier for the vessel's transmitter station.
	CallSign param.Opt[string] `json:"callSign,omitzero"`
	// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN
	// AIS cargo definitions. Users should refer to USCG Navigation Center
	// documentation for specific definitions associated with ship and cargo types.
	// USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
	CargoType param.Opt[string] `json:"cargoType,omitzero"`
	// The course-over-ground reported by the vessel, in degrees.
	Course param.Opt[float64] `json:"course,omitzero"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt param.Opt[time.Time] `json:"createdAt,omitzero" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy param.Opt[string] `json:"createdBy,omitzero"`
	// The US Geographic Unique Identifier of the current port hosting the vessel.
	CurrentPortGuid param.Opt[string] `json:"currentPortGUID,omitzero"`
	// The UN Location Code of the current port hosting the vessel.
	CurrentPortLocode param.Opt[string] `json:"currentPortLOCODE,omitzero"`
	// The destination of the vessel according to the AIS transmission.
	Destination param.Opt[string] `json:"destination,omitzero"`
	// The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC
	// format.
	DestinationEta param.Opt[time.Time] `json:"destinationETA,omitzero" format:"date-time"`
	// The remaining distance, in kilometers, for the vessel to reach the reported
	// destination.
	DistanceToGo param.Opt[float64] `json:"distanceToGo,omitzero"`
	// The distance, in kilometers, that the vessel has travelled since departing the
	// last port.
	DistanceTravelled param.Opt[float64] `json:"distanceTravelled,omitzero"`
	// The maximum static draught, in meters, of the vessel according to the AIS
	// transmission.
	Draught param.Opt[float64] `json:"draught,omitzero"`
	// The activity that the vessel is engaged in. This entry applies only when the
	// shipType = Other.
	EngagedIn param.Opt[string] `json:"engagedIn,omitzero"`
	// The Estimated Time of Arrival of the vessel at the destination port, according
	// to MarineTraffic calculations, in ISO 8601 UTC format.
	EtaCalculated param.Opt[time.Time] `json:"etaCalculated,omitzero" format:"date-time"`
	// The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC
	// format.
	EtaUpdated param.Opt[time.Time] `json:"etaUpdated,omitzero" format:"date-time"`
	// Unique identifier of the Track.
	IDTrack param.Opt[string] `json:"idTrack,omitzero"`
	// Unique identifier of the vessel.
	IDVessel param.Opt[string] `json:"idVessel,omitzero"`
	// The International Maritime Organization Number of the vessel. IMON is a
	// seven-digit number that uniquely identifies the vessel.
	Imon param.Opt[int64] `json:"imon,omitzero"`
	// The US Geographic Unique Identifier of the last port visited by the vessel.
	LastPortGuid param.Opt[string] `json:"lastPortGUID,omitzero"`
	// The UN Location Code of the last port visited by the vessel.
	LastPortLocode param.Opt[string] `json:"lastPortLOCODE,omitzero"`
	// WGS-84 latitude of the vessel position, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	Lat param.Opt[float64] `json:"lat,omitzero"`
	// The overall length of the vessel, in meters. A value of 511 indicates a vessel
	// length of 511 meters or greater.
	Length param.Opt[float64] `json:"length,omitzero"`
	// WGS-84 longitude of the vessel position, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	Lon param.Opt[float64] `json:"lon,omitzero"`
	// The maximum speed, in kilometers/hour, reported by the subject vessel during the
	// latest voyage (port to port).
	MaxSpeed param.Opt[float64] `json:"maxSpeed,omitzero"`
	// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number
	// that identifies the transmitter station of the vessel.
	Mmsi param.Opt[int64] `json:"mmsi,omitzero"`
	// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored,
	// Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation
	// status definitions. Users should refer to USCG Navigation Center documentation
	// for specific definitions associated with navigation status. USCG NAVCEN
	// documentation may be found at https://www.navcen.uscg.gov.
	NavStatus param.Opt[string] `json:"navStatus,omitzero"`
	// The US Geographic Unique Identifier of the next destination port of the vessel.
	NextPortGuid param.Opt[string] `json:"nextPortGUID,omitzero"`
	// The UN Location Code of the next destination port of the vessel.
	NextPortLocode param.Opt[string] `json:"nextPortLOCODE,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork param.Opt[string] `json:"origNetwork,omitzero"`
	// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.).
	// Intended as, but not constrained to, the USCG NAVCEN electronic position fixing
	// device definitions. Users should refer to USCG Navigation Center documentation
	// for specific device type information. USCG NAVCEN documentation may be found at
	// https://www.navcen.uscg.gov.
	PosDeviceType param.Opt[string] `json:"posDeviceType,omitzero"`
	// Flag indicating high reported position accuracy (less than or equal to 10
	// meters). A value of 0/false indicates low accuracy (greater than 10 meters).
	PosHiAccuracy param.Opt[bool] `json:"posHiAccuracy,omitzero"`
	// Flag indicating high reported position latency (greater than 5 seconds). A value
	// of 0/false indicates low latency (less than 5 seconds).
	PosHiLatency param.Opt[bool] `json:"posHiLatency,omitzero"`
	// The Rate-of-Turn for the vessel, in degrees/minute. Positive value indicates
	// that the vessel is turning right.
	RateOfTurn param.Opt[float64] `json:"rateOfTurn,omitzero"`
	// Further description or explanation of the vessel or type.
	ShipDescription param.Opt[string] `json:"shipDescription,omitzero"`
	// The name of the vessel. Vessel names that exceed the AIS 20 character are
	// shortened (not truncated) to 15 character-spaces, followed by an underscore and
	// the last 4 characters-spaces of the vessel full name.
	ShipName param.Opt[string] `json:"shipName,omitzero"`
	// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.). See the
	// engagedIn and specialCraft entries for additional information on certain types
	// of vessels.
	ShipType param.Opt[string] `json:"shipType,omitzero"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl param.Opt[string] `json:"sourceDL,omitzero"`
	// The type of special craft designation of the vessel. This entry applies only
	// when the shipType = Special Craft.
	SpecialCraft param.Opt[string] `json:"specialCraft,omitzero"`
	// Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway
	// Navigation).
	SpecialManeuver param.Opt[bool] `json:"specialManeuver,omitzero"`
	// The speed-over-ground reported by the vessel, in kilometers/hour.
	Speed param.Opt[float64] `json:"speed,omitzero"`
	// The true heading reported by the vessel, in degrees.
	TrueHeading param.Opt[float64] `json:"trueHeading,omitzero"`
	// The flag of the subject vessel according to AIS transmission.
	VesselFlag param.Opt[string] `json:"vesselFlag,omitzero"`
	// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth
	// of 63 meters or greater.
	Width param.Opt[float64] `json:"width,omitzero"`
	// The reference dimensions of the vessel, reported as [A, B, C, D], in meters.
	// Where the array values represent the distance fore (A), aft (B), to port (C),
	// and to starboard (D) of the navigation antenna. Array with values A = C = 0 and
	// B, D > 0 indicate the length (B) and width (D) of the vessel without antenna
	// position reference.
	AntennaRefDimensions []float64 `json:"antennaRefDimensions,omitzero"`
	paramObj
}

func (r AIsObjectUnvalidatedPublishParamsBody) MarshalJSON() (data []byte, err error) {
	type shadow AIsObjectUnvalidatedPublishParamsBody
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AIsObjectUnvalidatedPublishParamsBody) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func init() {
	apijson.RegisterFieldValidator[AIsObjectUnvalidatedPublishParamsBody](
		"dataMode", "REAL", "TEST", "SIMULATED", "EXERCISE",
	)
}

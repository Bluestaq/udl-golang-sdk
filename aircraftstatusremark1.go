// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
)

// AircraftstatusremarkService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAircraftstatusremarkService] method instead.
type AircraftstatusremarkService struct {
	Options []option.RequestOption
}

// NewAircraftstatusremarkService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewAircraftstatusremarkService(opts ...option.RequestOption) (r AircraftstatusremarkService) {
	r = AircraftstatusremarkService{}
	r.Options = opts
	return
}

// Service operation to update a single Aircraft Status Remark record. A specific
// role is required to perform this service operation. Please contact the UDL team
// for assistance.
func (r *AircraftstatusremarkService) Update(ctx context.Context, id string, body AircraftstatusremarkUpdateParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("udl/aircraftstatusremark/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPut, path, body, nil, opts...)
	return
}

// Service operation to delete a single Aircraft Status Remark record specified by
// the passed ID path parameter. A specific role is required to perform this
// service operation. Please contact the UDL team for assistance.
func (r *AircraftstatusremarkService) Delete(ctx context.Context, id string, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("udl/aircraftstatusremark/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodDelete, path, nil, nil, opts...)
	return
}

type AircraftstatusremarkUpdateParams struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AircraftstatusremarkUpdateParamsDataMode `json:"dataMode,omitzero,required"`
	// The ID of the Aircraft Status to which this remark applies.
	IDAircraftStatus string `json:"idAircraftStatus,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The text of the remark.
	Text string `json:"text,required"`
	// Unique identifier of the record, auto-generated by the system if not provided on
	// create operations.
	ID param.Opt[string] `json:"id,omitzero"`
	// Unique identifier of the Aircraft Status Remark record from the originating
	// system.
	AltRmkID param.Opt[string] `json:"altRmkId,omitzero"`
	// Time the remark was last updated in the originating system in ISO 8601 UTC
	// format with millisecond precision.
	LastUpdatedAt param.Opt[time.Time] `json:"lastUpdatedAt,omitzero" format:"date-time"`
	// The name or ID of the external user that updated this remark in the originating
	// system.
	LastUpdatedBy param.Opt[string] `json:"lastUpdatedBy,omitzero"`
	// The name of the remark.
	Name param.Opt[string] `json:"name,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// Time the remark was created in the originating system in ISO 8601 UTC format
	// with millisecond precision.
	Timestamp param.Opt[time.Time] `json:"timestamp,omitzero" format:"date-time"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f AircraftstatusremarkUpdateParams) IsPresent() bool { return !param.IsOmitted(f) && !f.IsNull() }

func (r AircraftstatusremarkUpdateParams) MarshalJSON() (data []byte, err error) {
	type shadow AircraftstatusremarkUpdateParams
	return param.MarshalObject(r, (*shadow)(&r))
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AircraftstatusremarkUpdateParamsDataMode string

const (
	AircraftstatusremarkUpdateParamsDataModeReal      AircraftstatusremarkUpdateParamsDataMode = "REAL"
	AircraftstatusremarkUpdateParamsDataModeTest      AircraftstatusremarkUpdateParamsDataMode = "TEST"
	AircraftstatusremarkUpdateParamsDataModeSimulated AircraftstatusremarkUpdateParamsDataMode = "SIMULATED"
	AircraftstatusremarkUpdateParamsDataModeExercise  AircraftstatusremarkUpdateParamsDataMode = "EXERCISE"
)

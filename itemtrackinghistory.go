// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apiquery"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/pagination"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/resp"
)

// ItemTrackingHistoryService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewItemTrackingHistoryService] method instead.
type ItemTrackingHistoryService struct {
	Options []option.RequestOption
}

// NewItemTrackingHistoryService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewItemTrackingHistoryService(opts ...option.RequestOption) (r ItemTrackingHistoryService) {
	r = ItemTrackingHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *ItemTrackingHistoryService) List(ctx context.Context, query ItemTrackingHistoryListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[ItemTrackingHistoryListResponse], err error) {
	var raw *http.Response
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/itemtracking/history"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *ItemTrackingHistoryService) ListAutoPaging(ctx context.Context, query ItemTrackingHistoryListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[ItemTrackingHistoryListResponse] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *ItemTrackingHistoryService) Count(ctx context.Context, query ItemTrackingHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/itemtracking/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

type ItemTrackingHistoryListResponse struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode ItemTrackingHistoryListResponseDataMode `json:"dataMode,required"`
	// The tracking identifier of an item or person. May be similar in representation
	// of a barcode or UPC.
	ScanCode string `json:"scanCode,required"`
	// The ID of the scanner or input device.
	ScannerID string `json:"scannerId,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The United States distinguished visitor code of the person scanned, only
	// applicable to people.
	DvCode string `json:"dvCode"`
	// The UDL ID of the item this record is associated with.
	IDItem string `json:"idItem"`
	// Array of keys that may be associated with this tracked item.
	Keys []string `json:"keys"`
	// WGS84 latitude where the item was scanned, in degrees.
	Lat float64 `json:"lat"`
	// WGS84 longitude where the item was scanned, in degrees.
	Lon float64 `json:"lon"`
	// Optional notes or comments about the tracking data.
	Notes string `json:"notes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The type of scan for tracking the item within it's journey (e.g. IN, OUT,
	// RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD,
	// OTHER). For example, received and delivered are for when an item is received
	// from or delivered to the end customer. In and out are for stops in between such
	// as being loaded on an airplane or received at a warehouse.
	ScanType string `json:"scanType"`
	// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13,
	// GTIN, SSCC, bID, JAN, etc.).
	ScGenTool string `json:"scGenTool"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
	Type string `json:"type"`
	// Array of values for the keys that may be associated to this tracked item. The
	// entries in this array must correspond to the position index in the keys array.
	// This array must be the same length as keys.
	Values []string `json:"values"`
	// JSON contains metadata for fields, check presence with [resp.Field.Valid].
	JSON struct {
		ClassificationMarking resp.Field
		DataMode              resp.Field
		ScanCode              resp.Field
		ScannerID             resp.Field
		Source                resp.Field
		Ts                    resp.Field
		ID                    resp.Field
		CreatedAt             resp.Field
		CreatedBy             resp.Field
		DvCode                resp.Field
		IDItem                resp.Field
		Keys                  resp.Field
		Lat                   resp.Field
		Lon                   resp.Field
		Notes                 resp.Field
		Origin                resp.Field
		OrigNetwork           resp.Field
		ScanType              resp.Field
		ScGenTool             resp.Field
		SourceDl              resp.Field
		Type                  resp.Field
		Values                resp.Field
		ExtraFields           map[string]resp.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r ItemTrackingHistoryListResponse) RawJSON() string { return r.JSON.raw }
func (r *ItemTrackingHistoryListResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type ItemTrackingHistoryListResponseDataMode string

const (
	ItemTrackingHistoryListResponseDataModeReal      ItemTrackingHistoryListResponseDataMode = "REAL"
	ItemTrackingHistoryListResponseDataModeTest      ItemTrackingHistoryListResponseDataMode = "TEST"
	ItemTrackingHistoryListResponseDataModeSimulated ItemTrackingHistoryListResponseDataMode = "SIMULATED"
	ItemTrackingHistoryListResponseDataModeExercise  ItemTrackingHistoryListResponseDataMode = "EXERCISE"
)

type ItemTrackingHistoryListParams struct {
	// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
	// (YYYY-MM-DDTHH:MM:SS.sssZ)
	Ts time.Time `query:"ts,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [ItemTrackingHistoryListParams]'s query parameters as
// `url.Values`.
func (r ItemTrackingHistoryListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type ItemTrackingHistoryCountParams struct {
	// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
	// (YYYY-MM-DDTHH:MM:SS.sssZ)
	Ts          time.Time        `query:"ts,required" format:"date-time" json:"-"`
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [ItemTrackingHistoryCountParams]'s query parameters as
// `url.Values`.
func (r ItemTrackingHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

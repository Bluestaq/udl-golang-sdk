// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apiquery"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/pagination"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/resp"
)

// EnginedetailService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewEnginedetailService] method instead.
type EnginedetailService struct {
	Options []option.RequestOption
}

// NewEnginedetailService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewEnginedetailService(opts ...option.RequestOption) (r EnginedetailService) {
	r = EnginedetailService{}
	r.Options = opts
	return
}

// Service operation to dynamically query data by a variety of query parameters not
// specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *EnginedetailService) List(ctx context.Context, query EnginedetailListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[EngineDetailsAbridged], err error) {
	var raw *http.Response
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/enginedetails"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query data by a variety of query parameters not
// specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *EnginedetailService) ListAutoPaging(ctx context.Context, query EnginedetailListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[EngineDetailsAbridged] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Known launch vehicle engine details and performance characteristics and limits
// compiled by a particular source. A launch vehicle engine may have several
// details records from multiple sources.
type EngineDetailsAbridged struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EngineDetailsAbridgedDataMode `json:"dataMode,required"`
	// Identifier of the parent engine record.
	IDEngine string `json:"idEngine,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Launch engine maximum burn time in seconds.
	BurnTime float64 `json:"burnTime"`
	// Engine chamber pressure in bars.
	ChamberPressure float64 `json:"chamberPressure"`
	// Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant,
	// etc.).
	CharacteristicType string `json:"characteristicType"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic
	// Decomposition, etc.).
	CycleType string `json:"cycleType"`
	// Engine type or family.
	Family string `json:"family"`
	// Organization ID of the engine manufacturer.
	ManufacturerOrgID string `json:"manufacturerOrgId"`
	// Engine maximum number of firings.
	MaxFirings int64 `json:"maxFirings"`
	// Notes/Description of the engine.
	Notes string `json:"notes"`
	// Engine nozzle expansion ratio.
	NozzleExpansionRatio float64 `json:"nozzleExpansionRatio"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
	Oxidizer string `json:"oxidizer"`
	// Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine,
	// etc).
	Propellant string `json:"propellant"`
	// Engine maximum thrust at sea level in Kilo-Newtons.
	SeaLevelThrust float64 `json:"seaLevelThrust"`
	// Launch engine specific impulse in seconds.
	SpecificImpulse float64 `json:"specificImpulse"`
	// Engine maximum thrust in a vacuum in Kilo-Newtons.
	VacuumThrust float64 `json:"vacuumThrust"`
	// Metadata for the response, check the presence of optional fields with the
	// [resp.Field.IsPresent] method.
	JSON struct {
		ClassificationMarking resp.Field
		DataMode              resp.Field
		IDEngine              resp.Field
		Source                resp.Field
		ID                    resp.Field
		BurnTime              resp.Field
		ChamberPressure       resp.Field
		CharacteristicType    resp.Field
		CreatedAt             resp.Field
		CreatedBy             resp.Field
		CycleType             resp.Field
		Family                resp.Field
		ManufacturerOrgID     resp.Field
		MaxFirings            resp.Field
		Notes                 resp.Field
		NozzleExpansionRatio  resp.Field
		Origin                resp.Field
		OrigNetwork           resp.Field
		Oxidizer              resp.Field
		Propellant            resp.Field
		SeaLevelThrust        resp.Field
		SpecificImpulse       resp.Field
		VacuumThrust          resp.Field
		ExtraFields           map[string]resp.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EngineDetailsAbridged) RawJSON() string { return r.JSON.raw }
func (r *EngineDetailsAbridged) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EngineDetailsAbridgedDataMode string

const (
	EngineDetailsAbridgedDataModeReal      EngineDetailsAbridgedDataMode = "REAL"
	EngineDetailsAbridgedDataModeTest      EngineDetailsAbridgedDataMode = "TEST"
	EngineDetailsAbridgedDataModeSimulated EngineDetailsAbridgedDataMode = "SIMULATED"
	EngineDetailsAbridgedDataModeExercise  EngineDetailsAbridgedDataMode = "EXERCISE"
)

type EnginedetailListParams struct {
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f EnginedetailListParams) IsPresent() bool { return !param.IsOmitted(f) && !f.IsNull() }

// URLQuery serializes [EnginedetailListParams]'s query parameters as `url.Values`.
func (r EnginedetailListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

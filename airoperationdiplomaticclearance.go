// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	shimjson "github.com/Bluestaq/udl-golang-sdk/internal/encoding/json"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/packages/respjson"
)

// AirOperationDiplomaticClearanceService contains methods and other services that
// help with interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAirOperationDiplomaticClearanceService] method instead.
type AirOperationDiplomaticClearanceService struct {
	Options []option.RequestOption
}

// NewAirOperationDiplomaticClearanceService generates a new service that applies
// the given options to each request. These options are applied after the parent
// client's options (if there is one), and before any request-specific options.
func NewAirOperationDiplomaticClearanceService(opts ...option.RequestOption) (r AirOperationDiplomaticClearanceService) {
	r = AirOperationDiplomaticClearanceService{}
	r.Options = opts
	return
}

// Service operation to take multiple Diplomatic Clearance records as a POST body
// and ingest into the database. This operation is intended to be used for
// automated feeds into UDL. A specific role is required to perform this service
// operation. Please contact the UDL team for assistance.
func (r *AirOperationDiplomaticClearanceService) UnvalidatedPublish(ctx context.Context, body AirOperationDiplomaticClearanceUnvalidatedPublishParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "filedrop/udl-diplomaticclearance"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

// A diplomatic clearance is an authorization for an aircraft to traverse or land
// within a specified country.
type DiplomaticclearanceAbridged struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode DiplomaticclearanceAbridgedDataMode `json:"dataMode,required"`
	// The First Departure Date (FDD) the mission is scheduled for departure, in ISO
	// 8601 UTC format with millisecond precision.
	FirstDepDate time.Time `json:"firstDepDate,required" format:"date-time"`
	// Unique identifier of the Mission associated with this diplomatic clearance
	// record.
	IDMission string `json:"idMission,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system if not provided on
	// create operations.
	ID string `json:"id"`
	// The Aircraft and Personnel Automated Clearance System (APACS) system identifier
	// used to process and approve this clearance request.
	ApacsID string `json:"apacsId"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Collection of diplomatic clearance details.
	DiplomaticClearanceDetails []DiplomaticclearanceAbridgedDiplomaticClearanceDetail `json:"diplomaticClearanceDetails"`
	// Collection of diplomatic clearance remarks.
	DiplomaticClearanceRemarks []DiplomaticclearanceAbridgedDiplomaticClearanceRemark `json:"diplomaticClearanceRemarks"`
	// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft
	// clearance requests.
	DipWorksheetName string `json:"dipWorksheetName"`
	// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601
	// UTC format with millisecond precision.
	DocDeadline time.Time `json:"docDeadline" format:"date-time"`
	// Optional diplomatic clearance worksheet ID from external systems. This field has
	// no meaning within UDL and is provided as a convenience for systems that require
	// tracking of an internal system generated ID.
	ExternalWorksheetID string `json:"externalWorksheetId"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking      respjson.Field
		DataMode                   respjson.Field
		FirstDepDate               respjson.Field
		IDMission                  respjson.Field
		Source                     respjson.Field
		ID                         respjson.Field
		ApacsID                    respjson.Field
		CreatedAt                  respjson.Field
		CreatedBy                  respjson.Field
		DiplomaticClearanceDetails respjson.Field
		DiplomaticClearanceRemarks respjson.Field
		DipWorksheetName           respjson.Field
		DocDeadline                respjson.Field
		ExternalWorksheetID        respjson.Field
		Origin                     respjson.Field
		OrigNetwork                respjson.Field
		SourceDl                   respjson.Field
		UpdatedAt                  respjson.Field
		UpdatedBy                  respjson.Field
		ExtraFields                map[string]respjson.Field
		raw                        string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DiplomaticclearanceAbridged) RawJSON() string { return r.JSON.raw }
func (r *DiplomaticclearanceAbridged) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type DiplomaticclearanceAbridgedDataMode string

const (
	DiplomaticclearanceAbridgedDataModeReal      DiplomaticclearanceAbridgedDataMode = "REAL"
	DiplomaticclearanceAbridgedDataModeTest      DiplomaticclearanceAbridgedDataMode = "TEST"
	DiplomaticclearanceAbridgedDataModeSimulated DiplomaticclearanceAbridgedDataMode = "SIMULATED"
	DiplomaticclearanceAbridgedDataModeExercise  DiplomaticclearanceAbridgedDataMode = "EXERCISE"
)

// Collection of diplomatic clearance details.
type DiplomaticclearanceAbridgedDiplomaticClearanceDetail struct {
	// The type of action the aircraft can take with this diplomatic clearance (e.g. O
	// for Overfly, L for Land, etc.).
	Action string `json:"action"`
	// Specifies an alternate country code if the data provider code does not match a
	// UDL Country code value (ISO-3166-ALPHA-2). This field will be set to the value
	// provided by the source and should be used for all Queries specifying a Country
	// Code.
	AltCountryCode string `json:"altCountryCode"`
	// Identifier of this diplomatic clearance issued by the host country.
	ClearanceID string `json:"clearanceId"`
	// Remarks concerning this diplomatic clearance.
	ClearanceRemark string `json:"clearanceRemark"`
	// The call sign of the sortie cleared with this diplomatic clearance.
	ClearedCallSign string `json:"clearedCallSign"`
	// The DoD Standard Country Code designator for the country issuing the diplomatic
	// clearance. This field will be set to "OTHR" if the source value does not match a
	// UDL Country code value (ISO-3166-ALPHA-2).
	CountryCode string `json:"countryCode"`
	// Name of the country issuing this diplomatic clearance.
	CountryName string `json:"countryName"`
	// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with
	// millisecond precision.
	EntryNet time.Time `json:"entryNET" format:"date-time"`
	// The navigation point name where the aircraft must enter the country.
	EntryPoint string `json:"entryPoint"`
	// Latest time the aircraft may exit the country, in ISO 8601 UTC format with
	// millisecond precision.
	ExitNlt time.Time `json:"exitNLT" format:"date-time"`
	// The navigation point name where the aircraft must exit the country.
	ExitPoint string `json:"exitPoint"`
	// Optional clearance ID from external systems. This field has no meaning within
	// UDL and is provided as a convenience for systems that require tracking of an
	// internal system generated ID.
	ExternalClearanceID string `json:"externalClearanceId"`
	// Unique identifier of the Aircraft Sortie associated with this diplomatic
	// clearance record.
	IDSortie string `json:"idSortie"`
	// Identifies the Itinerary point of a sortie where an air event occurs.
	LegNum int64 `json:"legNum"`
	// The diplomatic clearance profile name used within clearance management systems.
	Profile string `json:"profile"`
	// Flag indicating whether the clearance request requires ICAO specific
	// information.
	ReqIcao bool `json:"reqICAO"`
	// Flag indicating whether entry/exit points are required for clearances.
	ReqPoint bool `json:"reqPoint"`
	// The 1801 fileable route of flight string associated with this diplomatic
	// clearance. The route of flight string contains route designators, significant
	// points, change of speed/altitude, change of flight rules, and cruise climbs.
	RouteString string `json:"routeString"`
	// The placement of this diplomatic clearance within a sequence of clearances used
	// on a sortie. For example, a sequence value of 3 means that it is the third
	// diplomatic clearance the aircraft will use.
	SequenceNum int64 `json:"sequenceNum"`
	// Indicates the current status of the diplomatic clearance request.
	Status string `json:"status"`
	// Description of when this diplomatic clearance is valid.
	ValidDesc string `json:"validDesc"`
	// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC
	// format with millisecond precision.
	ValidEndTime time.Time `json:"validEndTime" format:"date-time"`
	// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC
	// format with millisecond precision.
	ValidStartTime time.Time `json:"validStartTime" format:"date-time"`
	// Remarks concerning the valid diplomatic clearance window.
	WindowRemark string `json:"windowRemark"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Action              respjson.Field
		AltCountryCode      respjson.Field
		ClearanceID         respjson.Field
		ClearanceRemark     respjson.Field
		ClearedCallSign     respjson.Field
		CountryCode         respjson.Field
		CountryName         respjson.Field
		EntryNet            respjson.Field
		EntryPoint          respjson.Field
		ExitNlt             respjson.Field
		ExitPoint           respjson.Field
		ExternalClearanceID respjson.Field
		IDSortie            respjson.Field
		LegNum              respjson.Field
		Profile             respjson.Field
		ReqIcao             respjson.Field
		ReqPoint            respjson.Field
		RouteString         respjson.Field
		SequenceNum         respjson.Field
		Status              respjson.Field
		ValidDesc           respjson.Field
		ValidEndTime        respjson.Field
		ValidStartTime      respjson.Field
		WindowRemark        respjson.Field
		ExtraFields         map[string]respjson.Field
		raw                 string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DiplomaticclearanceAbridgedDiplomaticClearanceDetail) RawJSON() string { return r.JSON.raw }
func (r *DiplomaticclearanceAbridgedDiplomaticClearanceDetail) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of diplomatic clearance remarks.
type DiplomaticclearanceAbridgedDiplomaticClearanceRemark struct {
	// Date the remark was published, in ISO 8601 UTC format, with millisecond
	// precision.
	Date time.Time `json:"date" format:"date-time"`
	// Global Decision Support System (GDSS) remark identifier.
	GdssRemarkID string `json:"gdssRemarkId"`
	// Text of the remark.
	Text string `json:"text"`
	// User who published the remark.
	User string `json:"user"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Date         respjson.Field
		GdssRemarkID respjson.Field
		Text         respjson.Field
		User         respjson.Field
		ExtraFields  map[string]respjson.Field
		raw          string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DiplomaticclearanceAbridgedDiplomaticClearanceRemark) RawJSON() string { return r.JSON.raw }
func (r *DiplomaticclearanceAbridgedDiplomaticClearanceRemark) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AirOperationDiplomaticClearanceUnvalidatedPublishParams struct {
	Body []AirOperationDiplomaticClearanceUnvalidatedPublishParamsBody
	paramObj
}

func (r AirOperationDiplomaticClearanceUnvalidatedPublishParams) MarshalJSON() (data []byte, err error) {
	return shimjson.Marshal(r.Body)
}
func (r *AirOperationDiplomaticClearanceUnvalidatedPublishParams) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &r.Body)
}

// A diplomatic clearance is an authorization for an aircraft to traverse or land
// within a specified country.
//
// The properties ClassificationMarking, DataMode, FirstDepDate, IDMission, Source
// are required.
type AirOperationDiplomaticClearanceUnvalidatedPublishParamsBody struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,omitzero,required"`
	// The First Departure Date (FDD) the mission is scheduled for departure, in ISO
	// 8601 UTC format with millisecond precision.
	FirstDepDate time.Time `json:"firstDepDate,required" format:"date-time"`
	// Unique identifier of the Mission associated with this diplomatic clearance
	// record.
	IDMission string `json:"idMission,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system if not provided on
	// create operations.
	ID param.Opt[string] `json:"id,omitzero"`
	// The Aircraft and Personnel Automated Clearance System (APACS) system identifier
	// used to process and approve this clearance request.
	ApacsID param.Opt[string] `json:"apacsId,omitzero"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt param.Opt[time.Time] `json:"createdAt,omitzero" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy param.Opt[string] `json:"createdBy,omitzero"`
	// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft
	// clearance requests.
	DipWorksheetName param.Opt[string] `json:"dipWorksheetName,omitzero"`
	// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601
	// UTC format with millisecond precision.
	DocDeadline param.Opt[time.Time] `json:"docDeadline,omitzero" format:"date-time"`
	// Optional diplomatic clearance worksheet ID from external systems. This field has
	// no meaning within UDL and is provided as a convenience for systems that require
	// tracking of an internal system generated ID.
	ExternalWorksheetID param.Opt[string] `json:"externalWorksheetId,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork param.Opt[string] `json:"origNetwork,omitzero"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl param.Opt[string] `json:"sourceDL,omitzero"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt param.Opt[time.Time] `json:"updatedAt,omitzero" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy param.Opt[string] `json:"updatedBy,omitzero"`
	// Collection of diplomatic clearance details.
	DiplomaticClearanceDetails []AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceDetail `json:"diplomaticClearanceDetails,omitzero"`
	// Collection of diplomatic clearance remarks.
	DiplomaticClearanceRemarks []AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceRemark `json:"diplomaticClearanceRemarks,omitzero"`
	paramObj
}

func (r AirOperationDiplomaticClearanceUnvalidatedPublishParamsBody) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationDiplomaticClearanceUnvalidatedPublishParamsBody
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AirOperationDiplomaticClearanceUnvalidatedPublishParamsBody) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func init() {
	apijson.RegisterFieldValidator[AirOperationDiplomaticClearanceUnvalidatedPublishParamsBody](
		"dataMode", "REAL", "TEST", "SIMULATED", "EXERCISE",
	)
}

// Collection of diplomatic clearance details.
type AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceDetail struct {
	// The type of action the aircraft can take with this diplomatic clearance (e.g. O
	// for Overfly, L for Land, etc.).
	Action param.Opt[string] `json:"action,omitzero"`
	// Specifies an alternate country code if the data provider code does not match a
	// UDL Country code value (ISO-3166-ALPHA-2). This field will be set to the value
	// provided by the source and should be used for all Queries specifying a Country
	// Code.
	AltCountryCode param.Opt[string] `json:"altCountryCode,omitzero"`
	// Identifier of this diplomatic clearance issued by the host country.
	ClearanceID param.Opt[string] `json:"clearanceId,omitzero"`
	// Remarks concerning this diplomatic clearance.
	ClearanceRemark param.Opt[string] `json:"clearanceRemark,omitzero"`
	// The call sign of the sortie cleared with this diplomatic clearance.
	ClearedCallSign param.Opt[string] `json:"clearedCallSign,omitzero"`
	// The DoD Standard Country Code designator for the country issuing the diplomatic
	// clearance. This field will be set to "OTHR" if the source value does not match a
	// UDL Country code value (ISO-3166-ALPHA-2).
	CountryCode param.Opt[string] `json:"countryCode,omitzero"`
	// Name of the country issuing this diplomatic clearance.
	CountryName param.Opt[string] `json:"countryName,omitzero"`
	// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with
	// millisecond precision.
	EntryNet param.Opt[time.Time] `json:"entryNET,omitzero" format:"date-time"`
	// The navigation point name where the aircraft must enter the country.
	EntryPoint param.Opt[string] `json:"entryPoint,omitzero"`
	// Latest time the aircraft may exit the country, in ISO 8601 UTC format with
	// millisecond precision.
	ExitNlt param.Opt[time.Time] `json:"exitNLT,omitzero" format:"date-time"`
	// The navigation point name where the aircraft must exit the country.
	ExitPoint param.Opt[string] `json:"exitPoint,omitzero"`
	// Optional clearance ID from external systems. This field has no meaning within
	// UDL and is provided as a convenience for systems that require tracking of an
	// internal system generated ID.
	ExternalClearanceID param.Opt[string] `json:"externalClearanceId,omitzero"`
	// Unique identifier of the Aircraft Sortie associated with this diplomatic
	// clearance record.
	IDSortie param.Opt[string] `json:"idSortie,omitzero"`
	// Identifies the Itinerary point of a sortie where an air event occurs.
	LegNum param.Opt[int64] `json:"legNum,omitzero"`
	// The diplomatic clearance profile name used within clearance management systems.
	Profile param.Opt[string] `json:"profile,omitzero"`
	// Flag indicating whether the clearance request requires ICAO specific
	// information.
	ReqIcao param.Opt[bool] `json:"reqICAO,omitzero"`
	// Flag indicating whether entry/exit points are required for clearances.
	ReqPoint param.Opt[bool] `json:"reqPoint,omitzero"`
	// The 1801 fileable route of flight string associated with this diplomatic
	// clearance. The route of flight string contains route designators, significant
	// points, change of speed/altitude, change of flight rules, and cruise climbs.
	RouteString param.Opt[string] `json:"routeString,omitzero"`
	// The placement of this diplomatic clearance within a sequence of clearances used
	// on a sortie. For example, a sequence value of 3 means that it is the third
	// diplomatic clearance the aircraft will use.
	SequenceNum param.Opt[int64] `json:"sequenceNum,omitzero"`
	// Indicates the current status of the diplomatic clearance request.
	Status param.Opt[string] `json:"status,omitzero"`
	// Description of when this diplomatic clearance is valid.
	ValidDesc param.Opt[string] `json:"validDesc,omitzero"`
	// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC
	// format with millisecond precision.
	ValidEndTime param.Opt[time.Time] `json:"validEndTime,omitzero" format:"date-time"`
	// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC
	// format with millisecond precision.
	ValidStartTime param.Opt[time.Time] `json:"validStartTime,omitzero" format:"date-time"`
	// Remarks concerning the valid diplomatic clearance window.
	WindowRemark param.Opt[string] `json:"windowRemark,omitzero"`
	paramObj
}

func (r AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceDetail) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceDetail
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceDetail) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of diplomatic clearance remarks.
type AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceRemark struct {
	// Date the remark was published, in ISO 8601 UTC format, with millisecond
	// precision.
	Date param.Opt[time.Time] `json:"date,omitzero" format:"date-time"`
	// Global Decision Support System (GDSS) remark identifier.
	GdssRemarkID param.Opt[string] `json:"gdssRemarkId,omitzero"`
	// Text of the remark.
	Text param.Opt[string] `json:"text,omitzero"`
	// User who published the remark.
	User param.Opt[string] `json:"user,omitzero"`
	paramObj
}

func (r AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceRemark) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceRemark
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AirOperationDiplomaticClearanceUnvalidatedPublishParamsBodyDiplomaticClearanceRemark) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

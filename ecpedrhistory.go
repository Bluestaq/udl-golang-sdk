// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	"github.com/Bluestaq/udl-golang-sdk/internal/apiquery"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/pagination"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/packages/respjson"
)

// EcpedrHistoryService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewEcpedrHistoryService] method instead.
type EcpedrHistoryService struct {
	Options []option.RequestOption
}

// NewEcpedrHistoryService generates a new service that applies the given options
// to each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewEcpedrHistoryService(opts ...option.RequestOption) (r EcpedrHistoryService) {
	r = EcpedrHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *EcpedrHistoryService) List(ctx context.Context, query EcpedrHistoryListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[EcpedrHistoryListResponse], err error) {
	var raw *http.Response
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/ecpedr/history"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *EcpedrHistoryService) ListAutoPaging(ctx context.Context, query EcpedrHistoryListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[EcpedrHistoryListResponse] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation, then write that data to the
// Secure Content Store. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *EcpedrHistoryService) Aodr(ctx context.Context, query EcpedrHistoryAodrParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "udl/ecpedr/history/aodr"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, nil, opts...)
	return
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *EcpedrHistoryService) Count(ctx context.Context, query EcpedrHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/ecpedr/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Energetic Charged Particles (ECP) Environmental Data Records (EDRs).
type EcpedrHistoryListResponse struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EcpedrHistoryListResponseDataMode `json:"dataMode,required"`
	// Collection of measurements associated with this ECP EDR record.
	EcpedrMeasurements []EcpedrHistoryListResponseEcpedrMeasurement `json:"ecpedrMeasurements,required"`
	// Time of the observation, in ISO 8601 UTC format with microsecond precision.
	ObTime time.Time `json:"obTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system if not provided on
	// create operations.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// System which generated the message.
	GenSystem string `json:"genSystem"`
	// Time when message was generated in ISO 8601 UTC format with millisecond
	// precision.
	GenTime time.Time `json:"genTime" format:"date-time"`
	// Unique identifier of the on-orbit satellite hosting the sensor.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the reporting sensor. This ID can be used to obtain
	// additional information on a sensor using the 'get by ID' operation (e.g.
	// /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried
	// as /udl/sensor/abc.
	IDSensor string `json:"idSensor"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the record source to indicate the satellite
	// hosting the sensor. This may be an internal identifier and not necessarily map
	// to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Optional identifier provided by the observation source to indicate the sensor
	// which produced this observation. This may be an internal identifier and not
	// necessarily a valid sensor ID.
	OrigSensorID string `json:"origSensorId"`
	// Satellite/catalog number of the on-orbit satellite hosting the sensor.
	SatNo int64 `json:"satNo"`
	// Three element array, expressing the observing spacecraft/sensor position vector
	// components at observation time, in kilometers, in the specified
	// senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed.
	// The array element order is [xpos, ypos, zpos].
	SenPos []float64 `json:"senPos"`
	// The reference frame of the observing sensor state. If the senReferenceFrame is
	// null it is assumed to be J2000.
	//
	// Any of "J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF".
	SenReferenceFrame EcpedrHistoryListResponseSenReferenceFrame `json:"senReferenceFrame"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		EcpedrMeasurements    respjson.Field
		ObTime                respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		GenSystem             respjson.Field
		GenTime               respjson.Field
		IDOnOrbit             respjson.Field
		IDSensor              respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		OrigSensorID          respjson.Field
		SatNo                 respjson.Field
		SenPos                respjson.Field
		SenReferenceFrame     respjson.Field
		SourceDl              respjson.Field
		Tags                  respjson.Field
		TransactionID         respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EcpedrHistoryListResponse) RawJSON() string { return r.JSON.raw }
func (r *EcpedrHistoryListResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EcpedrHistoryListResponseDataMode string

const (
	EcpedrHistoryListResponseDataModeReal      EcpedrHistoryListResponseDataMode = "REAL"
	EcpedrHistoryListResponseDataModeTest      EcpedrHistoryListResponseDataMode = "TEST"
	EcpedrHistoryListResponseDataModeSimulated EcpedrHistoryListResponseDataMode = "SIMULATED"
	EcpedrHistoryListResponseDataModeExercise  EcpedrHistoryListResponseDataMode = "EXERCISE"
)

// Collection of measurements associated with this ECP EDR record.
type EcpedrHistoryListResponseEcpedrMeasurement struct {
	// The type of observation associated with this record. (e.g., FLUX, CHARGE, etc.).
	ObType string `json:"obType,required"`
	// The Unit of Measure associated with this observation. If there are no physical
	// units associated with the measurement, a value of NONE should be specified.
	ObUoM string `json:"obUoM,required"`
	// Higher energy threshold of the channel for event detection and data collection.
	ChanEnergyHigh float64 `json:"chanEnergyHigh"`
	// Lower energy threshold of the channel for event detection and data collection.
	ChanEnergyLow float64 `json:"chanEnergyLow"`
	// Identifier of the channel based on energy levels and particle species.
	ChanID string `json:"chanId"`
	// Type of channel based on the measurement method (e.g., INTEGRAL, DIFFERENTIAL,
	// etc.).
	ChanType string `json:"chanType"`
	// Units used for defining channel energy boundaries (e.g., eV, keV, MeV, etc.).
	ChanUnit string `json:"chanUnit"`
	// Designates a specific group of measurements made.
	MsgNumber int64 `json:"msgNumber"`
	// A single observation value expressed in the specified unit of measure (obUoM).
	ObValue float64 `json:"obValue"`
	// Type of particle species being measured by a channel (e.g., ELECTRON, PROTON,
	// etc.).
	Species string `json:"species"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ObType         respjson.Field
		ObUoM          respjson.Field
		ChanEnergyHigh respjson.Field
		ChanEnergyLow  respjson.Field
		ChanID         respjson.Field
		ChanType       respjson.Field
		ChanUnit       respjson.Field
		MsgNumber      respjson.Field
		ObValue        respjson.Field
		Species        respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EcpedrHistoryListResponseEcpedrMeasurement) RawJSON() string { return r.JSON.raw }
func (r *EcpedrHistoryListResponseEcpedrMeasurement) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// The reference frame of the observing sensor state. If the senReferenceFrame is
// null it is assumed to be J2000.
type EcpedrHistoryListResponseSenReferenceFrame string

const (
	EcpedrHistoryListResponseSenReferenceFrameJ2000   EcpedrHistoryListResponseSenReferenceFrame = "J2000"
	EcpedrHistoryListResponseSenReferenceFrameEfgTdr  EcpedrHistoryListResponseSenReferenceFrame = "EFG/TDR"
	EcpedrHistoryListResponseSenReferenceFrameEcrEcef EcpedrHistoryListResponseSenReferenceFrame = "ECR/ECEF"
	EcpedrHistoryListResponseSenReferenceFrameTeme    EcpedrHistoryListResponseSenReferenceFrame = "TEME"
	EcpedrHistoryListResponseSenReferenceFrameItrf    EcpedrHistoryListResponseSenReferenceFrame = "ITRF"
	EcpedrHistoryListResponseSenReferenceFrameGcrf    EcpedrHistoryListResponseSenReferenceFrame = "GCRF"
)

type EcpedrHistoryListParams struct {
	// Time of the observation, in ISO 8601 UTC format with microsecond precision.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	ObTime time.Time `query:"obTime,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [EcpedrHistoryListParams]'s query parameters as
// `url.Values`.
func (r EcpedrHistoryListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type EcpedrHistoryAodrParams struct {
	// Time of the observation, in ISO 8601 UTC format with microsecond precision.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	ObTime time.Time `query:"obTime,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	// optional, notification method for the created file link. When omitted, EMAIL is
	// assumed. Current valid values are: EMAIL, SMS.
	Notification param.Opt[string] `query:"notification,omitzero" json:"-"`
	// optional, field delimiter when the created file is not JSON. Must be a single
	// character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
	// It is strongly encouraged that your field delimiter be a character unlikely to
	// occur within the data.
	OutputDelimiter param.Opt[string] `query:"outputDelimiter,omitzero" json:"-"`
	// optional, output format for the file. When omitted, JSON is assumed. Current
	// valid values are: JSON and CSV.
	OutputFormat param.Opt[string] `query:"outputFormat,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [EcpedrHistoryAodrParams]'s query parameters as
// `url.Values`.
func (r EcpedrHistoryAodrParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type EcpedrHistoryCountParams struct {
	// Time of the observation, in ISO 8601 UTC format with microsecond precision.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	ObTime      time.Time        `query:"obTime,required" format:"date-time" json:"-"`
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [EcpedrHistoryCountParams]'s query parameters as
// `url.Values`.
func (r EcpedrHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

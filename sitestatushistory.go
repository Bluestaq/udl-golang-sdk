// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"slices"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	"github.com/Bluestaq/udl-golang-sdk/internal/apiquery"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/pagination"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/packages/respjson"
)

// SiteStatusHistoryService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewSiteStatusHistoryService] method instead.
type SiteStatusHistoryService struct {
	Options []option.RequestOption
}

// NewSiteStatusHistoryService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewSiteStatusHistoryService(opts ...option.RequestOption) (r SiteStatusHistoryService) {
	r = SiteStatusHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *SiteStatusHistoryService) List(ctx context.Context, query SiteStatusHistoryListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[SiteStatusHistoryListResponse], err error) {
	var raw *http.Response
	opts = slices.Concat(r.Options, opts)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/sitestatus/history"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *SiteStatusHistoryService) ListAutoPaging(ctx context.Context, query SiteStatusHistoryListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[SiteStatusHistoryListResponse] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *SiteStatusHistoryService) Count(ctx context.Context, query SiteStatusHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = slices.Concat(r.Options, opts)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/sitestatus/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

type SiteStatusHistoryListResponse struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode SiteStatusHistoryListResponseDataMode `json:"dataMode,required"`
	// The ID of the site, if this status is associated with a fixed site or platform.
	IDSite string `json:"idSite,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Crisis Action Team (CAT).
	//
	// COLD - Not in use.
	//
	// WARM - Facility prepped/possible skeleton crew.
	//
	// HOT - Fully active.
	//
	// Any of "COLD", "WARM", "HOT".
	Cat SiteStatusHistoryListResponseCat `json:"cat"`
	// Estimated number of cold missiles of all types remaining in weapons system
	// inventory.
	ColdInventory int64 `json:"coldInventory"`
	// The communications component causing the platform or system to be less than
	// fully operational.
	CommImpairment string `json:"commImpairment"`
	// Cyberspace Protection Condition (CPCON).
	//
	// 1 - VERY HIGH - Critical functions.
	//
	// 2 - HIGH - Critical and essential functions.
	//
	// 3 - MEDIUM - Critical, essential, and support functions.
	//
	// 4 - LOW - All functions.
	//
	// 5 - VERY LOW - All functions.
	//
	// Any of "1", "2", "3", "4", "5".
	Cpcon SiteStatusHistoryListResponseCpcon `json:"cpcon"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Emergency Operations Center (EOC) status.
	//
	// COLD - Not in use.
	//
	// WARM - Facility prepped/possible skeleton crew.
	//
	// HOT - Fully active.
	//
	// Any of "COLD", "WARM", "HOT".
	Eoc SiteStatusHistoryListResponseEoc `json:"eoc"`
	// Force Protection Condition (FPCON).
	//
	// NORMAL - Applies when a general global threat of possible terrorist activity
	// exists and warrants a routine security posture.
	//
	// ALPHA - Applies when an increased general threat of possible terrorist activity
	// against personnel or facilities. Nature and extent of threat are unpredictable.
	//
	// BRAVO - Applies when an increased or predictable threat of terrorist activity
	// exists.
	//
	// CHARLIE - Applies when an incident occurs or intelligence is received indicating
	// some form of terrorist action against personnel and facilities is imminent.
	//
	// DELTA - Applies in the immediate area where an attack has occurred or when
	// intelligence is received indicating terrorist action against a location is
	// imminent.
	//
	// Any of "NORMAL", "ALPHA", "BRAVO", "CHARLIE", "DELTA".
	Fpcon SiteStatusHistoryListResponseFpcon `json:"fpcon"`
	// Estimated number of hot missiles of all types remaining in weapons system
	// inventory.
	HotInventory int64 `json:"hotInventory"`
	// Health Protection Condition (HPCON).
	//
	// 0 - Routine, no community transmission.
	//
	// ALPHA - Limited, community transmission beginning.
	//
	// BRAVO - Moderate, increased community transmission.
	//
	// CHARLIE - Substantial, sustained community transmission.
	//
	// DELTA - Severe, widespread community transmission.
	//
	// Any of "0", "ALPHA", "BRAVO", "CHARLIE", "DELTA".
	Hpcon SiteStatusHistoryListResponseHpcon `json:"hpcon"`
	// The status of the installation.
	//
	// # FMC - Fully Mission Capable
	//
	// # PMC - Partially Mission Capable
	//
	// # NMC - Non Mission Capable
	//
	// UNK - Unknown.
	//
	// Any of "FMC", "PMC", "NMC", "UNK".
	InstStatus SiteStatusHistoryListResponseInstStatus `json:"instStatus"`
	// Array of Link item(s) for which status is available and reported (ATDL, IJMS,
	// LINK-1, LINK-11, LINK-11B, LINK-16). This array must be the same length as the
	// linkStatus array.
	Link []string `json:"link"`
	// Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in
	// the link array. This array must be the same length as the link array, and the
	// status must correspond to the appropriate position index in the link array.
	LinkStatus []string `json:"linkStatus"`
	// Array of specific missile types for which an estimated inventory count is
	// available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.). This array must be the
	// same length as the missileInventory array.
	Missile []string `json:"missile"`
	// Array of the quantity of each of the missile items. This array must be the same
	// length as the missile array, and the values must correspond to appropriate
	// position index in the missile array.
	MissileInventory []int64 `json:"missileInventory"`
	// Alternate Identifier for a mobile or transportable platform provided by source.
	MobileAltID string `json:"mobileAltId"`
	// The operational status of the platform (e.g. Fully Operational, Partially
	// Operational, Not Operational, etc.).
	OpsCapability string `json:"opsCapability"`
	// The primary component degrading the operational capability of the platform or
	// system.
	OpsImpairment string `json:"opsImpairment"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Position Engagement Status flag, Indicating whether this platform is initiating
	// multiple simultaneous engagements. A value of 1/True indicates the platform is
	// initiating multiple simultaneous engagements.
	Pes bool `json:"pes"`
	// The POI (point of interest) ID related to this platform, if available.
	Poiid string `json:"poiid"`
	// Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in
	// the radarSystem array. This array must be the same length as the radarSystem
	// array, and the status must correspond to the appropriate position index in the
	// radarSystem array.
	RadarStatus []string `json:"radarStatus"`
	// Array of radar system(s) for which status is available and reported
	// (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY
	// SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the
	// radarStatus array.
	RadarSystem []string `json:"radarSystem"`
	// SAM sensor radar surveillance mode (Active, Passive, Off).
	RadiateMode string `json:"radiateMode"`
	// Time of report, in ISO8601 UTC format.
	ReportTime time.Time `json:"reportTime" format:"date-time"`
	// The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
	SamMode string `json:"samMode"`
	// Optional site type or further detail of type. Intended for, but not limited to,
	// Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
	SiteType string `json:"siteType"`
	// Description of the time function associated with the reportTime (e.g.
	// Activation, Deactivation, Arrival, Departure, etc.), if applicable.
	TimeFunction string `json:"timeFunction"`
	// The track ID related to this platform (if mobile or transportable), if
	// available.
	TrackID string `json:"trackId"`
	// Link-16 specific reference track number.
	TrackRefL16 string `json:"trackRefL16"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Description of the current weather conditions over a site.
	WeatherMessage string `json:"weatherMessage"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDSite                respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Cat                   respjson.Field
		ColdInventory         respjson.Field
		CommImpairment        respjson.Field
		Cpcon                 respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Eoc                   respjson.Field
		Fpcon                 respjson.Field
		HotInventory          respjson.Field
		Hpcon                 respjson.Field
		InstStatus            respjson.Field
		Link                  respjson.Field
		LinkStatus            respjson.Field
		Missile               respjson.Field
		MissileInventory      respjson.Field
		MobileAltID           respjson.Field
		OpsCapability         respjson.Field
		OpsImpairment         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Pes                   respjson.Field
		Poiid                 respjson.Field
		RadarStatus           respjson.Field
		RadarSystem           respjson.Field
		RadiateMode           respjson.Field
		ReportTime            respjson.Field
		SamMode               respjson.Field
		SiteType              respjson.Field
		TimeFunction          respjson.Field
		TrackID               respjson.Field
		TrackRefL16           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		WeatherMessage        respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SiteStatusHistoryListResponse) RawJSON() string { return r.JSON.raw }
func (r *SiteStatusHistoryListResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type SiteStatusHistoryListResponseDataMode string

const (
	SiteStatusHistoryListResponseDataModeReal      SiteStatusHistoryListResponseDataMode = "REAL"
	SiteStatusHistoryListResponseDataModeTest      SiteStatusHistoryListResponseDataMode = "TEST"
	SiteStatusHistoryListResponseDataModeSimulated SiteStatusHistoryListResponseDataMode = "SIMULATED"
	SiteStatusHistoryListResponseDataModeExercise  SiteStatusHistoryListResponseDataMode = "EXERCISE"
)

// Crisis Action Team (CAT).
//
// COLD - Not in use.
//
// WARM - Facility prepped/possible skeleton crew.
//
// HOT - Fully active.
type SiteStatusHistoryListResponseCat string

const (
	SiteStatusHistoryListResponseCatCold SiteStatusHistoryListResponseCat = "COLD"
	SiteStatusHistoryListResponseCatWarm SiteStatusHistoryListResponseCat = "WARM"
	SiteStatusHistoryListResponseCatHot  SiteStatusHistoryListResponseCat = "HOT"
)

// Cyberspace Protection Condition (CPCON).
//
// 1 - VERY HIGH - Critical functions.
//
// 2 - HIGH - Critical and essential functions.
//
// 3 - MEDIUM - Critical, essential, and support functions.
//
// 4 - LOW - All functions.
//
// 5 - VERY LOW - All functions.
type SiteStatusHistoryListResponseCpcon string

const (
	SiteStatusHistoryListResponseCpcon1 SiteStatusHistoryListResponseCpcon = "1"
	SiteStatusHistoryListResponseCpcon2 SiteStatusHistoryListResponseCpcon = "2"
	SiteStatusHistoryListResponseCpcon3 SiteStatusHistoryListResponseCpcon = "3"
	SiteStatusHistoryListResponseCpcon4 SiteStatusHistoryListResponseCpcon = "4"
	SiteStatusHistoryListResponseCpcon5 SiteStatusHistoryListResponseCpcon = "5"
)

// Emergency Operations Center (EOC) status.
//
// COLD - Not in use.
//
// WARM - Facility prepped/possible skeleton crew.
//
// HOT - Fully active.
type SiteStatusHistoryListResponseEoc string

const (
	SiteStatusHistoryListResponseEocCold SiteStatusHistoryListResponseEoc = "COLD"
	SiteStatusHistoryListResponseEocWarm SiteStatusHistoryListResponseEoc = "WARM"
	SiteStatusHistoryListResponseEocHot  SiteStatusHistoryListResponseEoc = "HOT"
)

// Force Protection Condition (FPCON).
//
// NORMAL - Applies when a general global threat of possible terrorist activity
// exists and warrants a routine security posture.
//
// ALPHA - Applies when an increased general threat of possible terrorist activity
// against personnel or facilities. Nature and extent of threat are unpredictable.
//
// BRAVO - Applies when an increased or predictable threat of terrorist activity
// exists.
//
// CHARLIE - Applies when an incident occurs or intelligence is received indicating
// some form of terrorist action against personnel and facilities is imminent.
//
// DELTA - Applies in the immediate area where an attack has occurred or when
// intelligence is received indicating terrorist action against a location is
// imminent.
type SiteStatusHistoryListResponseFpcon string

const (
	SiteStatusHistoryListResponseFpconNormal  SiteStatusHistoryListResponseFpcon = "NORMAL"
	SiteStatusHistoryListResponseFpconAlpha   SiteStatusHistoryListResponseFpcon = "ALPHA"
	SiteStatusHistoryListResponseFpconBravo   SiteStatusHistoryListResponseFpcon = "BRAVO"
	SiteStatusHistoryListResponseFpconCharlie SiteStatusHistoryListResponseFpcon = "CHARLIE"
	SiteStatusHistoryListResponseFpconDelta   SiteStatusHistoryListResponseFpcon = "DELTA"
)

// Health Protection Condition (HPCON).
//
// 0 - Routine, no community transmission.
//
// ALPHA - Limited, community transmission beginning.
//
// BRAVO - Moderate, increased community transmission.
//
// CHARLIE - Substantial, sustained community transmission.
//
// DELTA - Severe, widespread community transmission.
type SiteStatusHistoryListResponseHpcon string

const (
	SiteStatusHistoryListResponseHpcon0       SiteStatusHistoryListResponseHpcon = "0"
	SiteStatusHistoryListResponseHpconAlpha   SiteStatusHistoryListResponseHpcon = "ALPHA"
	SiteStatusHistoryListResponseHpconBravo   SiteStatusHistoryListResponseHpcon = "BRAVO"
	SiteStatusHistoryListResponseHpconCharlie SiteStatusHistoryListResponseHpcon = "CHARLIE"
	SiteStatusHistoryListResponseHpconDelta   SiteStatusHistoryListResponseHpcon = "DELTA"
)

// The status of the installation.
//
// # FMC - Fully Mission Capable
//
// # PMC - Partially Mission Capable
//
// # NMC - Non Mission Capable
//
// UNK - Unknown.
type SiteStatusHistoryListResponseInstStatus string

const (
	SiteStatusHistoryListResponseInstStatusFmc SiteStatusHistoryListResponseInstStatus = "FMC"
	SiteStatusHistoryListResponseInstStatusPmc SiteStatusHistoryListResponseInstStatus = "PMC"
	SiteStatusHistoryListResponseInstStatusNmc SiteStatusHistoryListResponseInstStatus = "NMC"
	SiteStatusHistoryListResponseInstStatusUnk SiteStatusHistoryListResponseInstStatus = "UNK"
)

type SiteStatusHistoryListParams struct {
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [SiteStatusHistoryListParams]'s query parameters as
// `url.Values`.
func (r SiteStatusHistoryListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type SiteStatusHistoryCountParams struct {
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [SiteStatusHistoryCountParams]'s query parameters as
// `url.Values`.
func (r SiteStatusHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

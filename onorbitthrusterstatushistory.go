// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apiquery"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/pagination"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/resp"
)

// OnorbitthrusterstatusHistoryService contains methods and other services that
// help with interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewOnorbitthrusterstatusHistoryService] method instead.
type OnorbitthrusterstatusHistoryService struct {
	Options []option.RequestOption
}

// NewOnorbitthrusterstatusHistoryService generates a new service that applies the
// given options to each request. These options are applied after the parent
// client's options (if there is one), and before any request-specific options.
func NewOnorbitthrusterstatusHistoryService(opts ...option.RequestOption) (r OnorbitthrusterstatusHistoryService) {
	r = OnorbitthrusterstatusHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *OnorbitthrusterstatusHistoryService) List(ctx context.Context, query OnorbitthrusterstatusHistoryListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[OnorbitthrusterstatusFull], err error) {
	var raw *http.Response
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/onorbitthrusterstatus/history"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *OnorbitthrusterstatusHistoryService) ListAutoPaging(ctx context.Context, query OnorbitthrusterstatusHistoryListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[OnorbitthrusterstatusFull] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *OnorbitthrusterstatusHistoryService) Count(ctx context.Context, query OnorbitthrusterstatusHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/onorbitthrusterstatus/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Status information for OnorbitThruster objects.
type OnorbitthrusterstatusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitthrusterstatusFullDataMode `json:"dataMode,required"`
	// ID of the associated OnorbitThruster record. This ID can be used to obtain
	// additional information on an onorbit thruster object using the 'get by ID'
	// operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster
	// object with idOnorbitThruster = abc would be queried as
	// /udl/onorbitthruster/abc.
	IDOnorbitThruster string `json:"idOnorbitThruster,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Datetime of the thruster status observation in ISO 8601 UTC datetime format with
	// millisecond precision.
	StatusTime time.Time `json:"statusTime,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Estimated available delta-velocity for this thruster, in meters per second.
	EstDeltaV float64 `json:"estDeltaV"`
	// Total fuel mass available for this thruster's type, in kilograms.
	FuelMass float64 `json:"fuelMass"`
	// 1-sigma uncertainty of the total fuel mass available for this thruster type, in
	// kilograms.
	FuelMassUnc float64 `json:"fuelMassUnc"`
	// Specific impulse for this thruster, in seconds.
	Isp float64 `json:"isp"`
	// Maximum available delta-velocity for this thruster, in meters per second.
	MaxDeltaV float64 `json:"maxDeltaV"`
	// Minimum available delta-velocity for this thruster, in meters per second.
	MinDeltaV float64 `json:"minDeltaV"`
	// Identifier of this thruster.
	Name string `json:"name"`
	// Flag indicating if this thruster is operational.
	Operational bool `json:"operational"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Average available propellant mass for this thruster's type, in kilograms.
	PropMassAvg float64 `json:"propMassAvg"`
	// Maximum available propellant mass for this thruster's type, in kilograms.
	PropMassMax float64 `json:"propMassMax"`
	// Median available propellant mass for this thruster's type, in kilograms.
	PropMassMedian float64 `json:"propMassMedian"`
	// Minimum available propellant mass for this thruster's type, in kilograms.
	PropMassMin float64 `json:"propMassMin"`
	// Maximum available thrust for this thruster, in newtons.
	ThrustMax float64 `json:"thrustMax"`
	// Total delta-velocity available for this thruster's type, in meters per second.
	TotalDeltaV float64 `json:"totalDeltaV"`
	// JSON contains metadata for fields, check presence with [resp.Field.Valid].
	JSON struct {
		ClassificationMarking resp.Field
		DataMode              resp.Field
		IDOnorbitThruster     resp.Field
		Source                resp.Field
		StatusTime            resp.Field
		ID                    resp.Field
		CreatedAt             resp.Field
		CreatedBy             resp.Field
		EstDeltaV             resp.Field
		FuelMass              resp.Field
		FuelMassUnc           resp.Field
		Isp                   resp.Field
		MaxDeltaV             resp.Field
		MinDeltaV             resp.Field
		Name                  resp.Field
		Operational           resp.Field
		Origin                resp.Field
		OrigNetwork           resp.Field
		PropMassAvg           resp.Field
		PropMassMax           resp.Field
		PropMassMedian        resp.Field
		PropMassMin           resp.Field
		ThrustMax             resp.Field
		TotalDeltaV           resp.Field
		ExtraFields           map[string]resp.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitthrusterstatusFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitthrusterstatusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitthrusterstatusFullDataMode string

const (
	OnorbitthrusterstatusFullDataModeReal      OnorbitthrusterstatusFullDataMode = "REAL"
	OnorbitthrusterstatusFullDataModeTest      OnorbitthrusterstatusFullDataMode = "TEST"
	OnorbitthrusterstatusFullDataModeSimulated OnorbitthrusterstatusFullDataMode = "SIMULATED"
	OnorbitthrusterstatusFullDataModeExercise  OnorbitthrusterstatusFullDataMode = "EXERCISE"
)

type OnorbitthrusterstatusHistoryListParams struct {
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	// (One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the
	// associated OnorbitThruster record. This ID can be used to obtain additional
	// information on an onorbit thruster object using the 'get by ID' operation (e.g.
	// /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with
	// idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
	IDOnorbitThruster param.Opt[string] `query:"idOnorbitThruster,omitzero" json:"-"`
	MaxResults        param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	// (One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime
	// of the thruster status observation in ISO 8601 UTC datetime format with
	// millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
	StatusTime param.Opt[time.Time] `query:"statusTime,omitzero" format:"date-time" json:"-"`
	paramObj
}

// URLQuery serializes [OnorbitthrusterstatusHistoryListParams]'s query parameters
// as `url.Values`.
func (r OnorbitthrusterstatusHistoryListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type OnorbitthrusterstatusHistoryCountParams struct {
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	// (One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the
	// associated OnorbitThruster record. This ID can be used to obtain additional
	// information on an onorbit thruster object using the 'get by ID' operation (e.g.
	// /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with
	// idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
	IDOnorbitThruster param.Opt[string] `query:"idOnorbitThruster,omitzero" json:"-"`
	MaxResults        param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	// (One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime
	// of the thruster status observation in ISO 8601 UTC datetime format with
	// millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
	StatusTime param.Opt[time.Time] `query:"statusTime,omitzero" format:"date-time" json:"-"`
	paramObj
}

// URLQuery serializes [OnorbitthrusterstatusHistoryCountParams]'s query parameters
// as `url.Values`.
func (r OnorbitthrusterstatusHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

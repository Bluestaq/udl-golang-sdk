// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apiquery"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/pagination"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/resp"
)

// GnssObservationsetHistoryService contains methods and other services that help
// with interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewGnssObservationsetHistoryService] method instead.
type GnssObservationsetHistoryService struct {
	Options []option.RequestOption
}

// NewGnssObservationsetHistoryService generates a new service that applies the
// given options to each request. These options are applied after the parent
// client's options (if there is one), and before any request-specific options.
func NewGnssObservationsetHistoryService(opts ...option.RequestOption) (r GnssObservationsetHistoryService) {
	r = GnssObservationsetHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *GnssObservationsetHistoryService) List(ctx context.Context, query GnssObservationsetHistoryListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[GnssObservationSetFull], err error) {
	var raw *http.Response
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/gnssobservationset/history"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *GnssObservationsetHistoryService) ListAutoPaging(ctx context.Context, query GnssObservationsetHistoryListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[GnssObservationSetFull] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation, then write that data to the
// Secure Content Store. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *GnssObservationsetHistoryService) Aodr(ctx context.Context, query GnssObservationsetHistoryAodrParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "udl/gnssobservationset/history/aodr"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, nil, opts...)
	return
}

// Set of GNSSObservation data.
type GnssObservationSetFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode GnssObservationSetFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Observation Time, in ISO8601 UTC format with microsecond precision. This
	// timestamp applies to all observations within the set.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// GNSS Automatic Gain Control State.
	AgcState int64 `json:"agcState"`
	// Spacecraft altitude at observation time (ts), expressed in kilometers above
	// WGS-84 ellipsoid.
	Alt float64 `json:"alt"`
	// unit vector of the outward facing direction of the receiver boresight in a
	// body-fixed coordinate system.
	Boresight []float64 `json:"boresight"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the parent Ephemeris Set, if this data is correlated with
	// an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS
	// receivers, this ID may be associated with multiple GNSS Observation records if
	// each receiver is synced to the ephemeris points.
	EsID string `json:"esId"`
	// Optional source-provided identifier for this collection event. This field can be
	// used to associate records related to the same event.
	EventID string `json:"eventId"`
	// Geometric Dilution of Precision.
	GDop float64 `json:"gDop"`
	// GNSSObservations associated with this GNSSObservationSet.
	GnssObservationList []GnssObservationSetFullGnssObservationList `json:"gnssObservationList"`
	// Horizontal Dilution of Precision.
	HDop float64 `json:"hDop"`
	// Unique identifier of the primary satellite on-orbit object.
	IDOnOrbit string `json:"idOnOrbit"`
	// WGS-84 spacecraft latitude sub-point at observation time (ts), represented as
	// -90 to 90 degrees (negative values south of equator).
	Lat float64 `json:"lat"`
	// WGS-84 spacecraft longitude sub-point at observation time (ts), represented as
	// -180 to 180 degrees (negative values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED
	// BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON
	// GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT). Reference RINEX 3+ for further
	// information concerning marker types.
	MarkerType string `json:"markerType"`
	// The current navigation status as defined by the data source. In general the
	// navigation status specifies whether the signal is normal, degraded, or
	// unavailable. For status value definitions please reach out to data source
	// provider.
	NavigationStatus string `json:"navigationStatus"`
	// Array of the strings containing the individual observation code sets that are
	// contained within this GNSS Observation set. Each string is a three-character
	// representation of the measurement type, the channel, and the coding, in
	// compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L),
	// Doppler (D), Signal Strength C/No (S), or Channel Number (X)). See the GNSS
	// Observation ob field for the units of measure associated with each observation
	// type.
	ObsCodes []string `json:"obsCodes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by ephemeris source to indicate the target object
	// of this ephemeris. This may be an internal identifier and not necessarily map to
	// a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Time, in seconds, that the receiver has been unable to compute a GNSS fix.
	Outage int64 `json:"outage"`
	// Position Dilution of Precision.
	PDop float64 `json:"pDop"`
	// The quaternion describing the rotation of the body-fixed frame used for this
	// system into the local geodetic frame, at observation time (ts). The array
	// element order convention is scalar component first, followed by the three vector
	// components. For a vector u in the body-fixed frame, the corresponding vector u'
	// in the geodetic frame should satisfy u' = quq\*, where q is this quaternion.
	Quat []float64 `json:"quat"`
	// The number or ID of the GNSS receiver associated with this data. Each GNSS
	// Observation Set is associated with only one receiver. If reporting for multiple
	// receivers a separate set should be generated for each. A null value is assumed
	// to indicate that only one receiver is present, or reported.
	Receiver string `json:"receiver"`
	// Satellite/catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo"`
	// Three element array, expressing the ECI J2K spacecraft position components, in
	// kilometers, at observation time (ts). The array element order is [x, y, z].
	SatPosition []float64 `json:"satPosition"`
	// Three element array, expressing the ECI J2K spacecraft velocity components, in
	// km/second, at observation time (ts). The array element order is [xvel, yvel,
	// zvel].
	SatVelocity []float64 `json:"satVelocity"`
	// Array of UUIDs of the UDL data records that are related to this GNSS Observation
	// Set. See the associated 'srcTyps' array for the specific types of data,
	// positionally corresponding to the UUIDs in this array. The 'srcTyps' and
	// 'srcIds' arrays must match in size. See the corresponding srcTyps array element
	// for the data type of the UUID and use the appropriate API operation to retrieve
	// that object (e.g. /udl/statevector/{uuid}).
	SrcIDs []string `json:"srcIds"`
	// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
	// POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
	// are related to this GNSS Observation Set. See the associated 'srcIds' array for
	// the record UUIDs, positionally corresponding to the record types in this array.
	// The 'srcTyps' and 'srcIds' arrays must match in size.
	SrcTyps []string `json:"srcTyps"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Time Dilution of Precision.
	TDop float64 `json:"tDop"`
	// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the
	// best).
	TrackingStatus int64 `json:"trackingStatus"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Vertical Dilution of Precision.
	VDop float64 `json:"vDop"`
	// JSON contains metadata for fields, check presence with [resp.Field.Valid].
	JSON struct {
		ClassificationMarking resp.Field
		DataMode              resp.Field
		Source                resp.Field
		Ts                    resp.Field
		ID                    resp.Field
		AgcState              resp.Field
		Alt                   resp.Field
		Boresight             resp.Field
		CreatedAt             resp.Field
		CreatedBy             resp.Field
		EsID                  resp.Field
		EventID               resp.Field
		GDop                  resp.Field
		GnssObservationList   resp.Field
		HDop                  resp.Field
		IDOnOrbit             resp.Field
		Lat                   resp.Field
		Lon                   resp.Field
		MarkerType            resp.Field
		NavigationStatus      resp.Field
		ObsCodes              resp.Field
		Origin                resp.Field
		OrigNetwork           resp.Field
		OrigObjectID          resp.Field
		Outage                resp.Field
		PDop                  resp.Field
		Quat                  resp.Field
		Receiver              resp.Field
		SatNo                 resp.Field
		SatPosition           resp.Field
		SatVelocity           resp.Field
		SrcIDs                resp.Field
		SrcTyps               resp.Field
		Tags                  resp.Field
		TDop                  resp.Field
		TrackingStatus        resp.Field
		TransactionID         resp.Field
		VDop                  resp.Field
		ExtraFields           map[string]resp.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r GnssObservationSetFull) RawJSON() string { return r.JSON.raw }
func (r *GnssObservationSetFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type GnssObservationSetFullDataMode string

const (
	GnssObservationSetFullDataModeReal      GnssObservationSetFullDataMode = "REAL"
	GnssObservationSetFullDataModeTest      GnssObservationSetFullDataMode = "TEST"
	GnssObservationSetFullDataModeSimulated GnssObservationSetFullDataMode = "SIMULATED"
	GnssObservationSetFullDataModeExercise  GnssObservationSetFullDataMode = "EXERCISE"
)

// Information for Global Navigation Satellite Systems (GNSS) Observations
// collected from GNSS receivers, including the specific GNSS sat from which each
// signal was received, and the observation codes of each observation in the
// record. Each GNSS Observation is associated with a GNSS Observation Set record
// containing data which applies to all observations in the set, including
// observation time, receiver location, and Dilution of Precision (DOP) values.
// Users can Reference RINEX 3+ documentation for further information concerning
// many of the standards and conventions for GNSS observations.
type GnssObservationSetFullGnssObservationList struct {
	// GNSS Automatic Gain Control State.
	AgcState int64 `json:"agcState"`
	// RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN,
	// where S is the system code, and NN is the satellite identifier) associated with
	// this observation:
	//
	// G - GPS (NN = PRN)
	//
	// R - GLONASS (NN = Slot Number)
	//
	// S - SBAS Payload (NN = PRN-100)
	//
	// E - Galileo (NN = PRN)
	//
	// C - BeiDou (NN = PRN)
	//
	// J - QZSS (NN = PRN - 1923)
	//
	// I - IRNSS (NN = PRN)
	GnssSatID string `json:"gnssSatId"`
	// Array of observation(s). The ob array must be the same length as the obsCodeSet.
	// Pseudorange (C) is expressed meters, carrier phase (L) in cycles, doppler (D) in
	// Hz where + values indicate approaching sats, and signal strength C/No (S) in
	// dB-Hz.
	Ob []float64 `json:"ob"`
	// The observation code set that applies to this observation record. Reference
	// RINEX 3+ for further information concerning observation code set conventions.
	ObsCodeSet []string `json:"obsCodeSet"`
	// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the
	// best).
	TrackingStatus int64 `json:"trackingStatus"`
	// JSON contains metadata for fields, check presence with [resp.Field.Valid].
	JSON struct {
		AgcState       resp.Field
		GnssSatID      resp.Field
		Ob             resp.Field
		ObsCodeSet     resp.Field
		TrackingStatus resp.Field
		ExtraFields    map[string]resp.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r GnssObservationSetFullGnssObservationList) RawJSON() string { return r.JSON.raw }
func (r *GnssObservationSetFullGnssObservationList) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type GnssObservationsetHistoryListParams struct {
	// Observation Time, in ISO8601 UTC format with microsecond precision. This
	// timestamp applies to all observations within the set.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	Ts time.Time `query:"ts,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [GnssObservationsetHistoryListParams]'s query parameters as
// `url.Values`.
func (r GnssObservationsetHistoryListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type GnssObservationsetHistoryAodrParams struct {
	// Observation Time, in ISO8601 UTC format with microsecond precision. This
	// timestamp applies to all observations within the set.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	Ts time.Time `query:"ts,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	// optional, notification method for the created file link. When omitted, EMAIL is
	// assumed. Current valid values are: EMAIL, SMS.
	Notification param.Opt[string] `query:"notification,omitzero" json:"-"`
	// optional, field delimiter when the created file is not JSON. Must be a single
	// character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
	// It is strongly encouraged that your field delimiter be a character unlikely to
	// occur within the data.
	OutputDelimiter param.Opt[string] `query:"outputDelimiter,omitzero" json:"-"`
	// optional, output format for the file. When omitted, JSON is assumed. Current
	// valid values are: JSON and CSV.
	OutputFormat param.Opt[string] `query:"outputFormat,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [GnssObservationsetHistoryAodrParams]'s query parameters as
// `url.Values`.
func (r GnssObservationsetHistoryAodrParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

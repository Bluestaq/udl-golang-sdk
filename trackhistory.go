// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"slices"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	"github.com/Bluestaq/udl-golang-sdk/internal/apiquery"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/pagination"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/packages/respjson"
)

// TrackHistoryService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewTrackHistoryService] method instead.
type TrackHistoryService struct {
	Options []option.RequestOption
}

// NewTrackHistoryService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewTrackHistoryService(opts ...option.RequestOption) (r TrackHistoryService) {
	r = TrackHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *TrackHistoryService) List(ctx context.Context, query TrackHistoryListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[TrackFull], err error) {
	var raw *http.Response
	opts = slices.Concat(r.Options, opts)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/track/history"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *TrackHistoryService) ListAutoPaging(ctx context.Context, query TrackHistoryListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[TrackFull] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation, then write that data to the
// Secure Content Store. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *TrackHistoryService) Aodr(ctx context.Context, query TrackHistoryAodrParams, opts ...option.RequestOption) (err error) {
	opts = slices.Concat(r.Options, opts)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "udl/track/history/aodr"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, nil, opts...)
	return
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *TrackHistoryService) Count(ctx context.Context, query TrackHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = slices.Concat(r.Options, opts)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/track/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// A track is a position and optionally a heading/velocity of an object such as an
// aircraft at a particular timestamp. It also includes optional information
// regarding the identity/type of the target object, if known.
type TrackFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode TrackFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Track timestamp in ISO8601 UTC format with microsecond precision.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values
	// indicate a track object height above ellipsoid, and negative values indicate a
	// track object below ellipsoid, applicable to the depth estimate for a subsurface
	// track.
	Alt float64 `json:"alt"`
	// Id/name of the platform providing the track data (i.e., tail number for air
	// platform, tower ID for tower based sensor, site id for fixed radar).
	Asset string `json:"asset"`
	// Nationality or organization of the tracking/reporting system or platform (e.g.
	// FR, NATO, US, etc.).
	AssetNat string `json:"assetNat"`
	// The attitude (Yaw, Pitch, and Roll), in degrees, of the track object. When
	// provided, the array must always contain 3 values defining the attitude and may
	// specify an optional timestamp indicating when the data was measured, last known
	// to be correct and/or predicted to occur. These values represent the vehicle's
	// rotation about the vertical, lateral, and longitudinal axes, respectively, in a
	// locally level, East, North, Up "right handed" coordinate system centered on the
	// vehicle. Yaw is measured in degrees and ranges from -180 to 180. Pitch is
	// measured in degrees and ranges from -90 to 90. Roll is measured in degrees and
	// ranges from -180 to 180.
	Attitude []float64 `json:"attitude"`
	// The attitude rate (Yaw Rate, Pitch Rate, and Roll Rate), in degrees per second,
	// of the track object. When provided, the array must always contain 3 values
	// defining the attitude rate and may specify an optional timestamp indicating when
	// the data was measured, last known to be correct and/or predicted to occur. These
	// values represent the rate of change of the vehicle's rotation about the
	// vertical, lateral, and longitudinal axes, respectively, in a locally level,
	// East, North, Up "right handed" coordinate system centered on the vehicle.
	AttitudeRate []float64 `json:"attitudeRate"`
	// The call sign currently assigned to this track object.
	CallSign string `json:"callSign"`
	// Contact information for assets reporting PPLI (Precise Participant Location and
	// Identification). PPLI is a Link 16 message that is used by units to transmit
	// complete location, identification, and limited status information.
	Cntct string `json:"cntct"`
	// An optional string array containing additional data (keys) representing relevant
	// items for context of fields not specifically defined in this schema. This array
	// is paired with the contextValues string array and must contain the same number
	// of items. Please note these fields are intended for contextual use only and do
	// not pertain to core schema information. To ensure proper integration and avoid
	// misuse, coordination of how these fields are populated and consumed is required
	// during onboarding.
	ContextKeys []string `json:"contextKeys"`
	// An optional string array containing the values associated with the contextKeys
	// array. This array is paired with the contextKeys string array and must contain
	// the same number of items. Please note these fields are intended for contextual
	// use only and do not pertain to core schema information. To ensure proper
	// integration and avoid misuse, coordination of how these fields are populated and
	// consumed is required during onboarding.
	ContextValues []string `json:"contextValues"`
	// The track object course-over-ground, in degrees clockwise from true North at the
	// object location (0-360 degrees).
	Course float64 `json:"course"`
	// Covariance matrix, in meter and second based units, for the defined cartesian
	// system.
	//
	// The array values represent the lower triangular half of the position-velocity
	// covariance matrix. The size of the covariance matrix is dynamic. The values are
	// output as an array of values corresponding to the position-velocity covariance
	// element positions, ordered as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
	//
	// x&nbsp;&nbsp;&nbsp;&nbsp;1
	//
	// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
	//
	// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
	//
	// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
	//
	// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
	//
	// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;
	// 21
	//
	// The covariance matrix will be as large as the last element needed, and with
	// unused values zero-filled to maintain proper element positioning in the array.
	// For example, for a 2D (x, y) position-only covariance, the covariance matrix
	// will be 2x2 and the array would contain the 3 elements corresponding to the x,
	// and y position. Another example, now for a 2D (x, y) position-velocity
	// covariance, the covariance matrix will be 5x5 and the array would contain the 15
	// elements corresponding to the relevant x, y, x', and y' values (with the z-row
	// and z-column being all zeros). The cov array should contain only the lower left
	// triangle values from top left down to bottom right, in order.
	Cov []float64 `json:"cov"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Array of the track object acceleration, [x”, y”, z”], in meters per second
	// squared, in the Earth Centered - Earth Fixed (ECEF) reference frame. When
	// provided, array must always contain 3 values.
	EcefAcc []float64 `json:"ecefAcc"`
	// Array of the track object position, [x, y, z], in meters, in the Earth
	// Centered - Earth Fixed (ECEF) reference frame. When provided, array must always
	// contain 3 values.
	EcefPos []float64 `json:"ecefPos"`
	// Array of the track object velocity, [x', y', z'], in meters per second, in the
	// Earth Centered - Earth Fixed (ECEF) reference frame. When provided, array must
	// always contain 3 values.
	EcefVel []float64 `json:"ecefVel"`
	// East, North, Up acceleration components, in meters per second squared. When
	// provided, array must always contain 3 values defining the acceleration.
	ENuAcc []float64 `json:"eNUAcc"`
	// East, North, Up ground velocity components, in meters per second. When provided,
	// array must always contain 3 values.
	ENuGroundVel []float64 `json:"eNUGroundVel"`
	// East, North, Up position components, in meters. When provided, array must always
	// contain 3 values.
	ENuPos []float64 `json:"eNUPos"`
	// East, North, Up velocity components, in meters per second. When provided, array
	// must always contain 3 values.
	ENuVel []float64 `json:"eNUVel"`
	// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
	//
	// AIR: Between sea level and the Kármán line, which has an altitude of 100
	// kilometers (62 miles).
	//
	// LAND: On the surface of dry land.
	//
	// SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62
	// miles).
	//
	// SURFACE: On the surface of a body of water.
	//
	// SUBSURFACE: Below the surface of a body of water.
	//
	// UNKNOWN: Environment is not known.
	Env string `json:"env"`
	// Track environment confidence estimate (not standardized).
	EnvConf float64 `json:"envConf"`
	// Uncertainty ellipsoid [semi-major axis (meters), semi-minor axis (meters),
	// orientation (degrees)]. When provided, array must always contain 3 values.
	ErrEllp []float64 `json:"errEllp"`
	// The track object heading, in degrees clockwise from true North at the object
	// location (0-360 degrees).
	Hdng float64 `json:"hdng"`
	// Additional track object identity/status information, typically used for EXERCISE
	// identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
	//
	// FAKER: Friendly track, object, or entity acting as an exercise hostile.
	//
	// JOKER: Friendly track, object, or entity acting as an exercise suspect.
	//
	// KILO: Friendly high-value object.
	//
	// TRAVELLER: Suspect land or surface track following a recognized traffic route.
	//
	// ZOMBIE: Suspect track, object, or entity of special interest.
	IdentAmp string `json:"identAmp"`
	// Track object identity credibility.
	IdentCred int64 `json:"identCred"`
	// Track object identity reliability.
	IdentRel int64 `json:"identRel"`
	// The J-series message type, if this track is derived from a J-series message.
	JSeries string `json:"jSeries"`
	// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	Lat float64 `json:"lat"`
	// Estimate of the acceleration, [x”, y”, z”], of the track object in the
	// defined cartesian system, in meters per second squared. When provided, array
	// must always contain 3 values.
	LcAcc []float64 `json:"lcAcc"`
	// Origin of a local coordinate system [lat, lon, altitude]. When provided, array
	// must always contain 3 values.
	Lco []float64 `json:"lco"`
	// Estimate of the position, [x, y, z], of the track object in the defined
	// cartesian system, in meters. When provided, array must always contain 3 values.
	LcPos []float64 `json:"lcPos"`
	// x, y, and z-axis rotations (degrees) about ECEF that define a local cartesian
	// system. When provided, array must always contain 3 values.
	Lcs []float64 `json:"lcs"`
	// Estimate of the velocity, [x', y', z'], of the track object in the defined
	// cartesian system, in meters per second. When provided, array must always contain
	// 3 values.
	LcVel []float64 `json:"lcVel"`
	// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// Mode-1 interrogation response (mission code), indicating mission or aircraft
	// type. Assume leading 0's for any inputs that are less than 2 digits.
	M1 int64 `json:"m1"`
	// Mode-1 validity status.
	M1v int64 `json:"m1v"`
	// Mode-2 interrogation response (military identification code). Assume leading 0's
	// for any inputs that are less than 4 digits.
	M2 int64 `json:"m2"`
	// Mode-2 validity status.
	M2v int64 `json:"m2v"`
	// Mode-3/A interrogation response (aircraft identification), provides a 4-digit
	// octal identification code for the aircraft, assigned by the air traffic
	// controller. Mode-3/A is shared military/civilian use. Assume leading 0's for any
	// inputs that are less than 4 digits.
	M3a int64 `json:"m3a"`
	// Mode-3/A validity status.
	M3av int64 `json:"m3av"`
	// The type of source information from which the track was derived. Intended as,
	// but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC,
	// COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
	//
	// AIS: Derived from an automated identification system source.
	//
	// BFT: Derived from a blue force tracking source.
	//
	// BIOMETRICS: Derived from a biometrics source.
	//
	// COMINT: Derived from a communications intelligence source.
	//
	// DOPPLER: Derived from a radar doppler source.
	//
	// ELINT: Derived from an electronics intelligence source.
	//
	// HRR: Derived from a radar high range resolution source.
	//
	// HUMINT: Derived from a human intelligence source.
	//
	// IMAGE: Derived from a still or motion imagery source.
	//
	// MASINT: Derived from a measurement and signals intelligence source.
	//
	// MIXED: Derived from a combination of two or more sources.
	//
	// OSINT: Derived from an open source intelligence source.
	//
	// OTHER: Derived from other types of unspecified sources.
	ModType string `json:"modType"`
	// Timestamp when the message was created, in ISO8601 UTC format with microsecond
	// precision.
	MsgTs time.Time `json:"msgTs" format:"date-time"`
	// Mission ID related to the track.
	MsnID string `json:"msnId"`
	// Flag indicating that this track is fused from multiple sensor sources.
	MultiSource bool `json:"multiSource"`
	// The activity in which the track object is engaged. Intended as, but not
	// constrained to, MIL-STD-6016 environment dependent activity designations. The
	// activity can be reported as either a combination of the code and environment
	// (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are
	// equivalent.
	ObjAct string `json:"objAct"`
	// This is the free-text, generally human-readable, name of the System or Resource
	// corresponding to this track record.
	ObjDescription string `json:"objDescription"`
	// The UID or designation of the tracked object.
	ObjID string `json:"objId"`
	// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE,
	// NEUTRAL, PENDING, SUSPECT, UNKNOWN):
	//
	// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics,
	// behavior, and/or origin.
	//
	// FRIEND: Track object supporting friendly forces and belonging to a declared
	// friendly nation or entity.
	//
	// HOSTILE: Track object belonging to an opposing nation, party, group, or entity
	// deemed to contribute to a threat to friendly forces or their mission due to its
	// behavior, characteristics, nationality, or origin.
	//
	// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or
	// origin indicate that it is neither supporting nor opposing friendly forces or
	// their mission.
	//
	// PENDING: Track object which has not been evaluated.
	//
	// SUSPECT: Track object deemed potentially hostile due to the object
	// characteristics, behavior, nationality, and/or origin.
	//
	// UNKNOWN: Track object which has been evaluated and does not meet criteria for
	// any standard identity.
	ObjIdent string `json:"objIdent"`
	// Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
	ObjNat string `json:"objNat"`
	// The object platform type. Intended as, but not constrained to, MIL-STD-6016
	// environment dependent platform type designations. The platform type can be
	// reported as either a combination of the code and environment (e.g. 14/LAND) or
	// as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
	ObjPlat string `json:"objPlat"`
	// The object specific type. Intended as, but not constrained to, MIL-STD-6016
	// environment dependent specific type designations. The specific type can be
	// reported as either a combination of the code and environment (e.g. 155/SURFACE)
	// or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
	ObjSpec string `json:"objSpec"`
	// The generic classification of the track object/group (e.g., HELICOPTER, TRACKED,
	// WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676
	// object type classifications.
	ObjType string `json:"objType"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Id/name of sensor providing the track data.
	Sen string `json:"sen"`
	// Sensor quality.
	SenQual string `json:"senQual"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Track object speed, in meters per second.
	Spd float64 `json:"spd"`
	// Array of UUIDs of the UDL data records that contributed to the generation of
	// this fused track. See the associated 'srcTyps' array for the specific types of
	// data, positionally corresponding to the UUIDs in this array, used in the track
	// fusion. The 'srcTyps' and 'srcIds' arrays must match in size. See the
	// corresponding srcTyps array element for the data type of the UUID and use the
	// appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
	SrcIDs []string `json:"srcIds"`
	// Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the
	// generation of this fused track. See the associated 'srcIds' array for the record
	// UUIDs, positionally corresponding to the record types in this array, used in the
	// track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
	SrcTyps []string `json:"srcTyps"`
	// The number of objects or units moving as a group and represented as a single
	// entity in this track message. If null, the track is assumed to represent a
	// single object. Note that if this track derives from a J-series message then
	// special definitions apply for the following values: 13 indicates an estimated
	// 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an
	// estimated more than 12 units.
	Strength int64 `json:"strength"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Overall track confidence estimate (not standardized, but typically a value
	// between 0 and 1, with 0 indicating lowest confidence).
	TrkConf float64 `json:"trkConf"`
	// UUID identifying the track, which should remain the same on subsequent tracks of
	// the same object.
	TrkID string `json:"trkId"`
	// UUID of the track item object. Intended for, but not restricted to, STANAG-4676
	// messages. This ID is used to distinguish an individual track within a message or
	// external system containing multiple tracks on single or multiple targets.
	TrkItmID string `json:"trkItmId"`
	// The track number (TN) of a surveillance entity. Intended as, but not constrained
	// to, the J-series track number encoded as five character alpha-numeric
	// characters. Users should refer to J-series documentation for specific TN
	// definitions.
	TrkNum string `json:"trkNum"`
	// Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED,
	// etc.).
	TrkPtType string `json:"trkPtType"`
	// Value indicating track quality (not standardized).
	TrkQual int64 `json:"trkQual"`
	// Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
	TrkStat string `json:"trkStat"`
	// The vertical uncertainty represents the 1-sigma position uncertainty
	// perpendicular to the error Ellipse surface in the up (+) / down (-) direction
	// measured in meters.
	VertUnc float64 `json:"vertUnc"`
	// The angle by which the Inertial Navigation System (INS) rotates the geodetic
	// frame about the axis to avoid the introduction of a singularity at the North
	// pole when it is calculating vehicle location.
	WanderAng float64 `json:"wanderAng"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		Ts                    respjson.Field
		ID                    respjson.Field
		Alt                   respjson.Field
		Asset                 respjson.Field
		AssetNat              respjson.Field
		Attitude              respjson.Field
		AttitudeRate          respjson.Field
		CallSign              respjson.Field
		Cntct                 respjson.Field
		ContextKeys           respjson.Field
		ContextValues         respjson.Field
		Course                respjson.Field
		Cov                   respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EcefAcc               respjson.Field
		EcefPos               respjson.Field
		EcefVel               respjson.Field
		ENuAcc                respjson.Field
		ENuGroundVel          respjson.Field
		ENuPos                respjson.Field
		ENuVel                respjson.Field
		Env                   respjson.Field
		EnvConf               respjson.Field
		ErrEllp               respjson.Field
		Hdng                  respjson.Field
		IdentAmp              respjson.Field
		IdentCred             respjson.Field
		IdentRel              respjson.Field
		JSeries               respjson.Field
		Lat                   respjson.Field
		LcAcc                 respjson.Field
		Lco                   respjson.Field
		LcPos                 respjson.Field
		Lcs                   respjson.Field
		LcVel                 respjson.Field
		Lon                   respjson.Field
		M1                    respjson.Field
		M1v                   respjson.Field
		M2                    respjson.Field
		M2v                   respjson.Field
		M3a                   respjson.Field
		M3av                  respjson.Field
		ModType               respjson.Field
		MsgTs                 respjson.Field
		MsnID                 respjson.Field
		MultiSource           respjson.Field
		ObjAct                respjson.Field
		ObjDescription        respjson.Field
		ObjID                 respjson.Field
		ObjIdent              respjson.Field
		ObjNat                respjson.Field
		ObjPlat               respjson.Field
		ObjSpec               respjson.Field
		ObjType               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Sen                   respjson.Field
		SenQual               respjson.Field
		SourceDl              respjson.Field
		Spd                   respjson.Field
		SrcIDs                respjson.Field
		SrcTyps               respjson.Field
		Strength              respjson.Field
		Tags                  respjson.Field
		TrkConf               respjson.Field
		TrkID                 respjson.Field
		TrkItmID              respjson.Field
		TrkNum                respjson.Field
		TrkPtType             respjson.Field
		TrkQual               respjson.Field
		TrkStat               respjson.Field
		VertUnc               respjson.Field
		WanderAng             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r TrackFull) RawJSON() string { return r.JSON.raw }
func (r *TrackFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type TrackFullDataMode string

const (
	TrackFullDataModeReal      TrackFullDataMode = "REAL"
	TrackFullDataModeTest      TrackFullDataMode = "TEST"
	TrackFullDataModeSimulated TrackFullDataMode = "SIMULATED"
	TrackFullDataModeExercise  TrackFullDataMode = "EXERCISE"
)

type TrackHistoryListParams struct {
	// Track timestamp in ISO8601 UTC format with microsecond precision.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	Ts time.Time `query:"ts,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [TrackHistoryListParams]'s query parameters as `url.Values`.
func (r TrackHistoryListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type TrackHistoryAodrParams struct {
	// Track timestamp in ISO8601 UTC format with microsecond precision.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	Ts time.Time `query:"ts,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	// optional, notification method for the created file link. When omitted, EMAIL is
	// assumed. Current valid values are: EMAIL, SMS.
	Notification param.Opt[string] `query:"notification,omitzero" json:"-"`
	// optional, field delimiter when the created file is not JSON. Must be a single
	// character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
	// It is strongly encouraged that your field delimiter be a character unlikely to
	// occur within the data.
	OutputDelimiter param.Opt[string] `query:"outputDelimiter,omitzero" json:"-"`
	// optional, output format for the file. When omitted, JSON is assumed. Current
	// valid values are: JSON and CSV.
	OutputFormat param.Opt[string] `query:"outputFormat,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [TrackHistoryAodrParams]'s query parameters as `url.Values`.
func (r TrackHistoryAodrParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type TrackHistoryCountParams struct {
	// Track timestamp in ISO8601 UTC format with microsecond precision.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	Ts          time.Time        `query:"ts,required" format:"date-time" json:"-"`
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [TrackHistoryCountParams]'s query parameters as
// `url.Values`.
func (r TrackHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

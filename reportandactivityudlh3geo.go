// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
)

// ReportAndActivityUdlH3geoService contains methods and other services that help
// with interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewReportAndActivityUdlH3geoService] method instead.
type ReportAndActivityUdlH3geoService struct {
	Options []option.RequestOption
}

// NewReportAndActivityUdlH3geoService generates a new service that applies the
// given options to each request. These options are applied after the parent
// client's options (if there is one), and before any request-specific options.
func NewReportAndActivityUdlH3geoService(opts ...option.RequestOption) (r ReportAndActivityUdlH3geoService) {
	r = ReportAndActivityUdlH3geoService{}
	r.Options = opts
	return
}

// Service operation to take a single H3Geo record and many associated H3Geo hex
// cell records as a POST body and ingest into the database. This operation is
// intended to be used for automated feeds into UDL. A specific role is required to
// perform this service operation. Please contact the UDL team for assistance.
func (r *ReportAndActivityUdlH3geoService) UnvalidatedPublish(ctx context.Context, body ReportAndActivityUdlH3geoUnvalidatedPublishParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "filedrop/udl-h3geo"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

type ReportAndActivityUdlH3geoUnvalidatedPublishParams struct {
	// The collection of hex cells contained in this H3 data set. The number of cells
	// is a function of the specified resolution.
	Cells []ReportAndActivityUdlH3geoUnvalidatedPublishParamsCell `json:"cells,omitzero,required"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataMode `json:"dataMode,omitzero,required"`
	// The number of cells associated with this H3 Geo data set. At this time, UDL
	// supports up to 50,000 cells.
	NumCells int64 `json:"numCells,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// The center frequency of this H3 Geo data set measured in megahertz.
	CenterFreq param.Opt[float64] `json:"centerFreq,omitzero"`
	// End time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.
	EndTime param.Opt[time.Time] `json:"endTime,omitzero" format:"date-time"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// H3 resolution (0 â€“ 15) for the data set. At this time, UDL supports a resolution
	// of 3 or less.
	Resolution param.Opt[int64] `json:"resolution,omitzero"`
	// An optional field containing the type of data that is represented by this H3 Geo
	// data set.
	Type param.Opt[string] `json:"type,omitzero"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags,omitzero"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f ReportAndActivityUdlH3geoUnvalidatedPublishParams) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}

func (r ReportAndActivityUdlH3geoUnvalidatedPublishParams) MarshalJSON() (data []byte, err error) {
	type shadow ReportAndActivityUdlH3geoUnvalidatedPublishParams
	return param.MarshalObject(r, (*shadow)(&r))
}

// Model representation of a hex cell array containing data for a set of
// observations.
//
// The properties CellID, ClassificationMarking, DataMode, Source are required.
type ReportAndActivityUdlH3geoUnvalidatedPublishParamsCell struct {
	// The H3 index represented as a 16 character hexadecimal string.
	CellID string `json:"cellId,required"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,omitzero,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// The mean altitude of the set of observations within this cell, measured in
	// kilometers.
	AltMean param.Opt[float64] `json:"altMean,omitzero"`
	// The standard deviation of alttitude in the set of observations within this cell,
	// measured in kilometers.
	AltSigma param.Opt[float64] `json:"altSigma,omitzero"`
	// The anomaly score for probable manufactured interference or RF interference;
	// calculated as a ratio of #anomalous obs / #total obs or coverage.
	AnomScoreInterference param.Opt[float64] `json:"anomScoreInterference,omitzero"`
	// The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs
	// / #total obs or coverage.
	AnomScoreSpoofing param.Opt[float64] `json:"anomScoreSpoofing,omitzero"`
	// The percentage degree of change in the aggregated observables for a particular
	// H3 bin.
	ChangeScore param.Opt[float64] `json:"changeScore,omitzero"`
	// The total number of available observations in the H3 cell during the start/end
	// times.
	Coverage param.Opt[int64] `json:"coverage,omitzero"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt param.Opt[time.Time] `json:"createdAt,omitzero" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy param.Opt[string] `json:"createdBy,omitzero"`
	// Unique identifier of the parent H3 Geo record containing this hex cell.
	IDH3Geo param.Opt[string] `json:"idH3Geo,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork param.Opt[string] `json:"origNetwork,omitzero"`
	// The max received power monitor (RPM) output value for the set of data contained
	// within this cell.
	RpmMax param.Opt[float64] `json:"rpmMax,omitzero"`
	// The mean received power monitor (RPM) output value for the set of data contained
	// within this cell.
	RpmMean param.Opt[float64] `json:"rpmMean,omitzero"`
	// The median received power monitor (RPM) output value for the set of data
	// contained within this cell.
	RpmMedian param.Opt[float64] `json:"rpmMedian,omitzero"`
	// The min received power monitor (RPM) output value for the set of data contained
	// within this cell.
	RpmMin param.Opt[float64] `json:"rpmMin,omitzero"`
	// The standard deviation of the received power monitor (RPM) output value for the
	// set of data contained within this cell.
	RpmSigma param.Opt[float64] `json:"rpmSigma,omitzero"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl param.Opt[string] `json:"sourceDL,omitzero"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f ReportAndActivityUdlH3geoUnvalidatedPublishParamsCell) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}
func (r ReportAndActivityUdlH3geoUnvalidatedPublishParamsCell) MarshalJSON() (data []byte, err error) {
	type shadow ReportAndActivityUdlH3geoUnvalidatedPublishParamsCell
	return param.MarshalObject(r, (*shadow)(&r))
}

func init() {
	apijson.RegisterFieldValidator[ReportAndActivityUdlH3geoUnvalidatedPublishParamsCell](
		"DataMode", false, "REAL", "TEST", "SIMULATED", "EXERCISE",
	)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataMode string

const (
	ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataModeReal      ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataMode = "REAL"
	ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataModeTest      ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataMode = "TEST"
	ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataModeSimulated ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataMode = "SIMULATED"
	ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataModeExercise  ReportAndActivityUdlH3geoUnvalidatedPublishParamsDataMode = "EXERCISE"
)

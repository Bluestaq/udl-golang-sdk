// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"github.com/Bluestaq/udl-golang-sdk/internal/apierror"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/shared"
)

// aliased to make [param.APIUnion] private when embedding
type paramUnion = param.APIUnion

// aliased to make [param.APIObject] private when embedding
type paramObj = param.APIObject

type Error = apierror.Error

// The information in an Air Transport Mission contains unique identification,
// description of the mission objective, aircraft and crew assignments, mission
// alias, embarkation/debarkation cargo locations, priority, and other mission
// characteristics.
//
// This is an alias to an internal type.
type AirTransportMissionFull = shared.AirTransportMissionFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirTransportMissionFullDataMode = shared.AirTransportMissionFullDataMode

// Equals "REAL"
const AirTransportMissionFullDataModeReal = shared.AirTransportMissionFullDataModeReal

// Equals "TEST"
const AirTransportMissionFullDataModeTest = shared.AirTransportMissionFullDataModeTest

// Equals "SIMULATED"
const AirTransportMissionFullDataModeSimulated = shared.AirTransportMissionFullDataModeSimulated

// Equals "EXERCISE"
const AirTransportMissionFullDataModeExercise = shared.AirTransportMissionFullDataModeExercise

// Collection of Hazardous Material information planned to be associated with this
// Air Transport Mission.
//
// This is an alias to an internal type.
type AirTransportMissionFullHazMat = shared.AirTransportMissionFullHazMat

// Collection of Remarks associated with this Air Transport Mission.
//
// This is an alias to an internal type.
type AirTransportMissionFullRemark = shared.AirTransportMissionFullRemark

// Collection of Requirements planned to be associated with this Air Transport
// Mission.
//
// This is an alias to an internal type.
type AirTransportMissionFullRequirement = shared.AirTransportMissionFullRequirement

// Aircraft readiness and status data. Contains the dynamic data associated with
// the specific aircraft status, either in-flight or on-ground, including remaining
// fuel, mission readiness, and inventory, etc.
//
// This is an alias to an internal type.
type AircraftstatusFull = shared.AircraftstatusFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AircraftstatusFullDataMode = shared.AircraftstatusFullDataMode

// Equals "REAL"
const AircraftstatusFullDataModeReal = shared.AircraftstatusFullDataModeReal

// Equals "TEST"
const AircraftstatusFullDataModeTest = shared.AircraftstatusFullDataModeTest

// Equals "SIMULATED"
const AircraftstatusFullDataModeSimulated = shared.AircraftstatusFullDataModeSimulated

// Equals "EXERCISE"
const AircraftstatusFullDataModeExercise = shared.AircraftstatusFullDataModeExercise

// The status of the air-to-air weapon release system (OPERATIONAL,
// NON-OPERATIONAL, OFF).
//
// This is an alias to an internal type.
type AircraftstatusFullAirToAirStatus = shared.AircraftstatusFullAirToAirStatus

// Equals "OPERATIONAL"
const AircraftstatusFullAirToAirStatusOperational = shared.AircraftstatusFullAirToAirStatusOperational

// Equals "NON-OPERATIONAL"
const AircraftstatusFullAirToAirStatusNonOperational = shared.AircraftstatusFullAirToAirStatusNonOperational

// Equals "OFF"
const AircraftstatusFullAirToAirStatusOff = shared.AircraftstatusFullAirToAirStatusOff

// The status of the air-to-ground weapon release system (OPERATIONAL,
// NON-OPERATIONAL, OFF).
//
// This is an alias to an internal type.
type AircraftstatusFullAirToGroundStatus = shared.AircraftstatusFullAirToGroundStatus

// Equals "OPERATIONAL"
const AircraftstatusFullAirToGroundStatusOperational = shared.AircraftstatusFullAirToGroundStatusOperational

// Equals "NON-OPERATIONAL"
const AircraftstatusFullAirToGroundStatusNonOperational = shared.AircraftstatusFullAirToGroundStatusNonOperational

// Equals "OFF"
const AircraftstatusFullAirToGroundStatusOff = shared.AircraftstatusFullAirToGroundStatusOff

// Self-reported information obtained from Automatic Identification System (AIS)
// equipment. This contains information such as unique identification, status,
// position, course, and speed. The AIS is an automatic tracking system that uses
// transceivers on ships and is used by vessel traffic services. Although
// technically and operationally distinct, the AIS system is analogous to ADS-B
// that performs a similar function for aircraft. AIS is intended to assist a
// vessel's watchstanding officers and allow maritime authorities to track and
// monitor vessel movements. AIS integrates a standardized VHF transceiver with a
// positioning system such as Global Positioning System receiver, with other
// electronic navigation sensors, such as gyrocompass or rate of turn indicator.
// Vessels fitted with AIS transceivers can be tracked by AIS base stations located
// along coast lines or, when out of range of terrestrial networks, through a
// growing number of satellites that are fitted with special AIS receivers which
// are capable of deconflicting a large number of signatures.
//
// This is an alias to an internal type.
type AIsFull = shared.AIsFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AIsFullDataMode = shared.AIsFullDataMode

// Equals "REAL"
const AIsFullDataModeReal = shared.AIsFullDataModeReal

// Equals "TEST"
const AIsFullDataModeTest = shared.AIsFullDataModeTest

// Equals "SIMULATED"
const AIsFullDataModeSimulated = shared.AIsFullDataModeSimulated

// Equals "EXERCISE"
const AIsFullDataModeExercise = shared.AIsFullDataModeExercise

// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and
// meta data indicating the specifics of the orientation of an on-orbit object.
// Attitude is typically distributed in a flat file containing details of the
// attitude generation as well as a large collection of individual points at
// varying time steps. AttitudeSet is analogous to this flat file.
//
// This is an alias to an internal type.
type AttitudesetFull = shared.AttitudesetFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AttitudesetFullDataMode = shared.AttitudesetFullDataMode

// Equals "REAL"
const AttitudesetFullDataModeReal = shared.AttitudesetFullDataModeReal

// Equals "TEST"
const AttitudesetFullDataModeTest = shared.AttitudesetFullDataModeTest

// Equals "SIMULATED"
const AttitudesetFullDataModeSimulated = shared.AttitudesetFullDataModeSimulated

// Equals "EXERCISE"
const AttitudesetFullDataModeExercise = shared.AttitudesetFullDataModeExercise

// Collect Requests support several types of individual requests, or
// planned/scheduled tasks on sensors and/or orbital objects. Options are provided
// to accomodate most common sensor contact and collection applications, including
// single sensor-object tasking, search operations, and TT&C support. Multiple
// requests originating from a plan or schedule may be associated to a sensor plan
// if desired.
//
// This is an alias to an internal type.
type CollectRequestFull = shared.CollectRequestFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type CollectRequestFullDataMode = shared.CollectRequestFullDataMode

// Equals "REAL"
const CollectRequestFullDataModeReal = shared.CollectRequestFullDataModeReal

// Equals "TEST"
const CollectRequestFullDataModeTest = shared.CollectRequestFullDataModeTest

// Equals "SIMULATED"
const CollectRequestFullDataModeSimulated = shared.CollectRequestFullDataModeSimulated

// Equals "EXERCISE"
const CollectRequestFullDataModeExercise = shared.CollectRequestFullDataModeExercise

// An element set is a collection of Keplerian orbital elements describing an orbit
// of a particular satellite. The data is used along with an orbit propagator in
// order to predict the motion of a satellite. The element set, or elset for short,
// consists of identification data, the classical elements and drag parameters.
//
// This is an alias to an internal type.
type CollectRequestFullElset = shared.CollectRequestFullElset

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
//
// This is an alias to an internal type.
type CollectRequestFullStateVector = shared.CollectRequestFullStateVector

// Collect response supports the response and status of individual collect
// requests. Each response is referenced by the UUID of the request, and contains
// information including the status of the request, collection times and types, and
// reference(s) to the observations collected. There may be multiple responses
// associated with a request, either from multiple collectors or to relay status
// changes prior to completion and delivery.
//
// This is an alias to an internal type.
type CollectResponseFull = shared.CollectResponseFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type CollectResponseFullDataMode = shared.CollectResponseFullDataMode

// Equals "REAL"
const CollectResponseFullDataModeReal = shared.CollectResponseFullDataModeReal

// Equals "TEST"
const CollectResponseFullDataModeTest = shared.CollectResponseFullDataModeTest

// Equals "SIMULATED"
const CollectResponseFullDataModeSimulated = shared.CollectResponseFullDataModeSimulated

// Equals "EXERCISE"
const CollectResponseFullDataModeExercise = shared.CollectResponseFullDataModeExercise

// Historical drift rates for GEO Onorbit objects resulting from updates to
// OnorbitDetails driftRate values.
//
// This is an alias to an internal type.
type DriftHistoryAbridged = shared.DriftHistoryAbridged

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type DriftHistoryAbridgedDataMode = shared.DriftHistoryAbridgedDataMode

// Equals "REAL"
const DriftHistoryAbridgedDataModeReal = shared.DriftHistoryAbridgedDataModeReal

// Equals "TEST"
const DriftHistoryAbridgedDataModeTest = shared.DriftHistoryAbridgedDataModeTest

// Equals "SIMULATED"
const DriftHistoryAbridgedDataModeSimulated = shared.DriftHistoryAbridgedDataModeSimulated

// Equals "EXERCISE"
const DriftHistoryAbridgedDataModeExercise = shared.DriftHistoryAbridgedDataModeExercise

// Historical drift rates for GEO Onorbit objects resulting from updates to
// OnorbitDetails driftRate values.
//
// This is an alias to an internal type.
type DriftHistoryFull = shared.DriftHistoryFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type DriftHistoryFullDataMode = shared.DriftHistoryFullDataMode

// Equals "REAL"
const DriftHistoryFullDataModeReal = shared.DriftHistoryFullDataModeReal

// Equals "TEST"
const DriftHistoryFullDataModeTest = shared.DriftHistoryFullDataModeTest

// Equals "SIMULATED"
const DriftHistoryFullDataModeSimulated = shared.DriftHistoryFullDataModeSimulated

// Equals "EXERCISE"
const DriftHistoryFullDataModeExercise = shared.DriftHistoryFullDataModeExercise

// Model representation of Earth Orientation Parameters (EOP) produced by the IERS
// (International Earth Rotation and Reference Systems Service). Earth Orientation
// Parameters describe the irregularities of the earth's rotation. Technically,
// they are the parameters which provide the rotation of the ITRS (International
// Terrestrial Reference System) to the ICRS (International Celestial Reference
// System) as a function of time. Universal time -- Universal time (UT1) is the
// time of the earth clock, which performs one revolution in about 24h. It is
// practically proportional to the sidereal time. The excess revolution time is
// called length of day (LOD). Coordinates of the pole -- x and y are the
// coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS
// Reference Pole. The CEP differs from the instantaneous rotation axis by
// quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The
// x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the
// direction 90 degrees West longitude. Celestial pole offsets -- Celestial pole
// offsets are described in the IAU Precession and Nutation models. The observed
// differences with respect to the conventional celestial pole position defined by
// the models are monitored and reported by the IERS. IERS Bulletins A and B
// provide current information on the Earth's orientation in the IERS Reference
// System. This includes Universal Time, coordinates of the terrestrial pole, and
// celestial pole offsets. Bulletin A gives an advanced solution updated weekly;
// the standard solution is given monthly in Bulletin B. Fields suffixed with 'B'
// are Bulletin B values. All solutions are continuous within their respective
// uncertainties. Bulletin A is issued by the IERS Rapid Service/Prediction Centre
// at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the
// IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports
// the latest determinations for polar motion, UT1-UTC, and nutation offsets at
// daily intervals based on a combination of contributed analysis results using
// data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging
// (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging
// (LLR). Predictions for variations a year into the future are also provided.
// Meteorological predictions of variations in Atmospheric Angular Momentum (AAM)
// are used to aid in the prediction of near-term UT1-UTC changes. This publication
// is prepared by the IERS Rapid Service/Prediction Center.
//
// This is an alias to an internal type.
type EopFull = shared.EopFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EopFullDataMode = shared.EopFullDataMode

// Equals "REAL"
const EopFullDataModeReal = shared.EopFullDataModeReal

// Equals "TEST"
const EopFullDataModeTest = shared.EopFullDataModeTest

// Equals "SIMULATED"
const EopFullDataModeSimulated = shared.EopFullDataModeSimulated

// Equals "EXERCISE"
const EopFullDataModeExercise = shared.EopFullDataModeExercise

// Flag indicating Issued (I), or Predicted (P) for this record's nutation values
// (dPSI and dEpsilon).
//
// This is an alias to an internal type.
type EopFullNutationState = shared.EopFullNutationState

// Equals "I"
const EopFullNutationStateI = shared.EopFullNutationStateI

// Equals "P"
const EopFullNutationStateP = shared.EopFullNutationStateP

// Flag indicating Issued (I), or Predicted (P) for this record's polar motion
// values.
//
// This is an alias to an internal type.
type EopFullPolarMotionState = shared.EopFullPolarMotionState

// Equals "I"
const EopFullPolarMotionStateI = shared.EopFullPolarMotionStateI

// Equals "P"
const EopFullPolarMotionStateP = shared.EopFullPolarMotionStateP

// Flag indicating Issued (I), or Predicted (P) for this record”s Bulletin A
// UT1-UTC values.
//
// This is an alias to an internal type.
type EopFullUt1UtcState = shared.EopFullUt1UtcState

// Equals "I"
const EopFullUt1UtcStateI = shared.EopFullUt1UtcStateI

// Equals "P"
const EopFullUt1UtcStateP = shared.EopFullUt1UtcStateP

// An ephemeris record is a position and velocity vector identifying the location
// and trajectory of an on-orbit object at a specified time. Ephemeris points,
// including covariance, are in kilometer and second based units in a user
// specified reference frame, with ECI J2K being preferred. The EphemerisSet ID
// (esId) links all points associated with an ephemeris set. The 'EphemerisSet'
// record contains details of the underlying data and propagation models used in
// the generation of the ephemeris. Ephemeris points must be retrieved by
// specifying the parent EphemerisSet ID (esId).
//
// This is an alias to an internal type.
type EphemerisFull = shared.EphemerisFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EphemerisFullDataMode = shared.EphemerisFullDataMode

// Equals "REAL"
const EphemerisFullDataModeReal = shared.EphemerisFullDataModeReal

// Equals "TEST"
const EphemerisFullDataModeTest = shared.EphemerisFullDataModeTest

// Equals "SIMULATED"
const EphemerisFullDataModeSimulated = shared.EphemerisFullDataModeSimulated

// Equals "EXERCISE"
const EphemerisFullDataModeExercise = shared.EphemerisFullDataModeExercise

// Casualty report and evacuation request. Used to report and request support to
// evacuate friendly and enemy casualties.
//
// This is an alias to an internal type.
type EvacFull = shared.EvacFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EvacFullDataMode = shared.EvacFullDataMode

// Equals "REAL"
const EvacFullDataModeReal = shared.EvacFullDataModeReal

// Equals "TEST"
const EvacFullDataModeTest = shared.EvacFullDataModeTest

// Equals "SIMULATED"
const EvacFullDataModeSimulated = shared.EvacFullDataModeSimulated

// Equals "EXERCISE"
const EvacFullDataModeExercise = shared.EvacFullDataModeExercise

// The type of this medevac record (REQUEST, RESPONSE).
//
// This is an alias to an internal type.
type EvacFullType = shared.EvacFullType

// Equals "REQUEST"
const EvacFullTypeRequest = shared.EvacFullTypeRequest

// Equals "RESPONSE"
const EvacFullTypeResponse = shared.EvacFullTypeResponse

// This is an alias to an internal type.
type EvacFullCasualtyInfo = shared.EvacFullCasualtyInfo

// This is an alias to an internal type.
type EvacFullCasualtyInfoAllergy = shared.EvacFullCasualtyInfoAllergy

// This is an alias to an internal type.
type EvacFullCasualtyInfoCondition = shared.EvacFullCasualtyInfoCondition

// This is an alias to an internal type.
type EvacFullCasualtyInfoEtiology = shared.EvacFullCasualtyInfoEtiology

// This is an alias to an internal type.
type EvacFullCasualtyInfoHealthState = shared.EvacFullCasualtyInfoHealthState

// This is an alias to an internal type.
type EvacFullCasualtyInfoInjury = shared.EvacFullCasualtyInfoInjury

// This is an alias to an internal type.
type EvacFullCasualtyInfoMedication = shared.EvacFullCasualtyInfoMedication

// This is an alias to an internal type.
type EvacFullCasualtyInfoTreatment = shared.EvacFullCasualtyInfoTreatment

// This is an alias to an internal type.
type EvacFullCasualtyInfoVitalSignData = shared.EvacFullCasualtyInfoVitalSignData

// This is an alias to an internal type.
type EvacFullEnemyData = shared.EvacFullEnemyData

// This is an alias to an internal type.
type EvacFullRelatedDoc = shared.EvacFullRelatedDoc

// This is an alias to an internal type.
type EvacFullRelatedDocDataSourceRef = shared.EvacFullRelatedDocDataSourceRef

// Event Evolution is a unique service supporting the association of UDL records of
// various data types to a common event or activity. The associations may be a one
// time summary, aggregating sources of a past event, or of an ongoing activity
// that evolves over a period of time.
//
// This is an alias to an internal type.
type EventEvolutionFull = shared.EventEvolutionFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EventEvolutionFullDataMode = shared.EventEvolutionFullDataMode

// Equals "REAL"
const EventEvolutionFullDataModeReal = shared.EventEvolutionFullDataModeReal

// Equals "TEST"
const EventEvolutionFullDataModeTest = shared.EventEvolutionFullDataModeTest

// Equals "SIMULATED"
const EventEvolutionFullDataModeSimulated = shared.EventEvolutionFullDataModeSimulated

// Equals "EXERCISE"
const EventEvolutionFullDataModeExercise = shared.EventEvolutionFullDataModeExercise

// This is an alias to an internal type.
type FileData = shared.FileData

// This is an alias to an internal type.
type FileDataAttributes = shared.FileDataAttributes

// This is an alias to an internal type.
type FileDataContentAction = shared.FileDataContentAction

// Equals "UPDATE"
const FileDataContentActionUpdate = shared.FileDataContentActionUpdate

// Equals "COPY"
const FileDataContentActionCopy = shared.FileDataContentActionCopy

// Equals "MOVE"
const FileDataContentActionMove = shared.FileDataContentActionMove

// This is an alias to an internal type.
type FileDataType = shared.FileDataType

// Equals "file"
const FileDataTypeFile = shared.FileDataTypeFile

// Equals "folder"
const FileDataTypeFolder = shared.FileDataTypeFolder

// Equals "summary"
const FileDataTypeSummary = shared.FileDataTypeSummary

// This is an alias to an internal type.
type FileDataParam = shared.FileDataParam

// This is an alias to an internal type.
type FileDataAttributesParam = shared.FileDataAttributesParam

// Flight Plan contains data specifying the details of an intended flight including
// schedule and expected route.
//
// This is an alias to an internal type.
type FlightPlanFull = shared.FlightPlanFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type FlightPlanFullDataMode = shared.FlightPlanFullDataMode

// Equals "REAL"
const FlightPlanFullDataModeReal = shared.FlightPlanFullDataModeReal

// Equals "TEST"
const FlightPlanFullDataModeTest = shared.FlightPlanFullDataModeTest

// Equals "SIMULATED"
const FlightPlanFullDataModeSimulated = shared.FlightPlanFullDataModeSimulated

// Equals "EXERCISE"
const FlightPlanFullDataModeExercise = shared.FlightPlanFullDataModeExercise

// Collection of air refueling events occurring on this flight.
//
// This is an alias to an internal type.
type FlightPlanFullAirRefuelEvent = shared.FlightPlanFullAirRefuelEvent

// Collection of messages associated with this flight plan indicating the severity,
// the point where the message was generated, the path (Primary, Alternate, etc.),
// and the text of the message.
//
// This is an alias to an internal type.
type FlightPlanFullFlightPlanMessage = shared.FlightPlanFullFlightPlanMessage

// Collection of point groups generated for this flight plan. Groups include point
// sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
// (ETP).
//
// This is an alias to an internal type.
type FlightPlanFullFlightPlanPointGroup = shared.FlightPlanFullFlightPlanPointGroup

// Array of point data for this Point Group.
//
// This is an alias to an internal type.
type FlightPlanFullFlightPlanPointGroupFlightPlanPoint = shared.FlightPlanFullFlightPlanPointGroupFlightPlanPoint

// Collection of waypoints associated with this flight plan.
//
// This is an alias to an internal type.
type FlightPlanFullFlightPlanWaypoint = shared.FlightPlanFullFlightPlanWaypoint

// Model object representing on-orbit objects or satellites in the system.
//
// This is an alias to an internal type.
type OnorbitFull = shared.OnorbitFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type OnorbitFullDataMode = shared.OnorbitFullDataMode

// Equals "REAL"
const OnorbitFullDataModeReal = shared.OnorbitFullDataModeReal

// Equals "TEST"
const OnorbitFullDataModeTest = shared.OnorbitFullDataModeTest

// Equals "SIMULATED"
const OnorbitFullDataModeSimulated = shared.OnorbitFullDataModeSimulated

// Equals "EXERCISE"
const OnorbitFullDataModeExercise = shared.OnorbitFullDataModeExercise

// This is an alias to an internal type.
type OnorbitFullAntenna = shared.OnorbitFullAntenna

// This is an alias to an internal type.
type OnorbitFullBattery = shared.OnorbitFullBattery

// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
// State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
// Heliocentric, Interplanetary, Lagrangian, Docked).
//
// This is an alias to an internal type.
type OnorbitFullCategory = shared.OnorbitFullCategory

// Equals "Unknown"
const OnorbitFullCategoryUnknown = shared.OnorbitFullCategoryUnknown

// Equals "On-Orbit"
const OnorbitFullCategoryOnOrbit = shared.OnorbitFullCategoryOnOrbit

// Equals "Decayed"
const OnorbitFullCategoryDecayed = shared.OnorbitFullCategoryDecayed

// Equals "Cataloged Without State"
const OnorbitFullCategoryCatalogedWithoutState = shared.OnorbitFullCategoryCatalogedWithoutState

// Equals "Launch Nominal"
const OnorbitFullCategoryLaunchNominal = shared.OnorbitFullCategoryLaunchNominal

// Equals "Analyst Satellite"
const OnorbitFullCategoryAnalystSatellite = shared.OnorbitFullCategoryAnalystSatellite

// Equals "Cislunar"
const OnorbitFullCategoryCislunar = shared.OnorbitFullCategoryCislunar

// Equals "Lunar"
const OnorbitFullCategoryLunar = shared.OnorbitFullCategoryLunar

// Equals "Hyperbolic"
const OnorbitFullCategoryHyperbolic = shared.OnorbitFullCategoryHyperbolic

// Equals "Heliocentric"
const OnorbitFullCategoryHeliocentric = shared.OnorbitFullCategoryHeliocentric

// Equals "Interplanetary"
const OnorbitFullCategoryInterplanetary = shared.OnorbitFullCategoryInterplanetary

// Equals "Lagrangian"
const OnorbitFullCategoryLagrangian = shared.OnorbitFullCategoryLagrangian

// Equals "Docked"
const OnorbitFullCategoryDocked = shared.OnorbitFullCategoryDocked

// An entity is a generic representation of any object within a space/SSA system
// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
// entity can have an operating unit, a location (if terrestrial), and statuses.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollection = shared.OnorbitFullEntityCollection

// Model representation of a unit or organization which operates or controls a
// space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
// belong to an organization.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionOperatingUnit = shared.OnorbitFullEntityCollectionOperatingUnit

// Remarks contain amplifying information for a specific service. The information
// may contain context and interpretations for consumer use.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionOperatingUnitOperatingUnitRemark = shared.OnorbitFullEntityCollectionOperatingUnitOperatingUnitRemark

// Details on a particular Radio Frequency (RF) band, also known as a carrier,
// which may be in use by any type of Entity for communications or operations.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionRfBand = shared.OnorbitFullEntityCollectionRfBand

// Status for a particular Entity. An entity may have multiple status records
// collected by various sources.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionStatusCollection = shared.OnorbitFullEntityCollectionStatusCollection

// Additional sub-system or capability status for the parent entity.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionStatusCollectionSubStatusCollection = shared.OnorbitFullEntityCollectionStatusCollectionSubStatusCollection

// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
// UNKNOWN.
//
// This is an alias to an internal type.
type OnorbitFullObjectType = shared.OnorbitFullObjectType

// Equals "ROCKET BODY"
const OnorbitFullObjectTypeRocketBody = shared.OnorbitFullObjectTypeRocketBody

// Equals "DEBRIS"
const OnorbitFullObjectTypeDebris = shared.OnorbitFullObjectTypeDebris

// Equals "PAYLOAD"
const OnorbitFullObjectTypePayload = shared.OnorbitFullObjectTypePayload

// Equals "PLATFORM"
const OnorbitFullObjectTypePlatform = shared.OnorbitFullObjectTypePlatform

// Equals "MANNED"
const OnorbitFullObjectTypeManned = shared.OnorbitFullObjectTypeManned

// Equals "UNKNOWN"
const OnorbitFullObjectTypeUnknown = shared.OnorbitFullObjectTypeUnknown

// Contains details of the OnOrbit object.
//
// This is an alias to an internal type.
type OnorbitFullOnorbitDetail = shared.OnorbitFullOnorbitDetail

// This is an alias to an internal type.
type OnorbitFullSolarArray = shared.OnorbitFullSolarArray

// Model representation of information on on-orbit/spacecraft solar arrays. A
// spacecraft may have multiple solar arrays and each solar array can have multiple
// 'details' records compiled by different sources.
//
// This is an alias to an internal type.
type OnorbitFullSolarArraySolarArray = shared.OnorbitFullSolarArraySolarArray

// This is an alias to an internal type.
type OnorbitFullThruster = shared.OnorbitFullThruster

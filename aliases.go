// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"github.com/Bluestaq/udl-golang-sdk/internal/apierror"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/shared"
)

// aliased to make [param.APIUnion] private when embedding
type paramUnion = param.APIUnion

// aliased to make [param.APIObject] private when embedding
type paramObj = param.APIObject

type Error = apierror.Error

// Beta Version Air Tasking Order: The ATO is used to task air missions, assign
// cross force tasking as well as intraservice tasking.
//
// This is an alias to an internal type.
type AirTaskingOrderFull = shared.AirTaskingOrderFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirTaskingOrderFullDataMode = shared.AirTaskingOrderFullDataMode

// Equals "REAL"
const AirTaskingOrderFullDataModeReal = shared.AirTaskingOrderFullDataModeReal

// Equals "TEST"
const AirTaskingOrderFullDataModeTest = shared.AirTaskingOrderFullDataModeTest

// Equals "SIMULATED"
const AirTaskingOrderFullDataModeSimulated = shared.AirTaskingOrderFullDataModeSimulated

// Equals "EXERCISE"
const AirTaskingOrderFullDataModeExercise = shared.AirTaskingOrderFullDataModeExercise

// Collection that specifies the tasked country, tasked service, unit and mission
// level tasking for this ATO.
//
// This is an alias to an internal type.
type AirTaskingOrderFullAcMsnTasking = shared.AirTaskingOrderFullAcMsnTasking

// Collection of aircraft mission location information for this aircraft mission
// tasking.
//
// This is an alias to an internal type.
type AirTaskingOrderFullAcMsnTaskingAcMsnLocSeg = shared.AirTaskingOrderFullAcMsnTaskingAcMsnLocSeg

// Collection that specifies the naval flight operations for this ATO.
//
// This is an alias to an internal type.
type AirTaskingOrderFullAcMsnTaskingIndAcTasking = shared.AirTaskingOrderFullAcMsnTaskingIndAcTasking

// Collection that details special instructions, important information, guidance,
// and amplifying information regarding this ATO.
//
// This is an alias to an internal type.
type AirTaskingOrderFullGenText = shared.AirTaskingOrderFullGenText

// Collection that specifies the naval flight operations for this ATO.
//
// This is an alias to an internal type.
type AirTaskingOrderFullNavalFltOp = shared.AirTaskingOrderFullNavalFltOp

// The information in an Air Transport Mission contains unique identification,
// description of the mission objective, aircraft and crew assignments, mission
// alias, embarkation/debarkation cargo locations, priority, and other mission
// characteristics.
//
// This is an alias to an internal type.
type AirTransportMissionFull = shared.AirTransportMissionFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirTransportMissionFullDataMode = shared.AirTransportMissionFullDataMode

// Equals "REAL"
const AirTransportMissionFullDataModeReal = shared.AirTransportMissionFullDataModeReal

// Equals "TEST"
const AirTransportMissionFullDataModeTest = shared.AirTransportMissionFullDataModeTest

// Equals "SIMULATED"
const AirTransportMissionFullDataModeSimulated = shared.AirTransportMissionFullDataModeSimulated

// Equals "EXERCISE"
const AirTransportMissionFullDataModeExercise = shared.AirTransportMissionFullDataModeExercise

// Collection of Hazardous Material information planned to be associated with this
// Air Transport Mission.
//
// This is an alias to an internal type.
type AirTransportMissionFullHazMat = shared.AirTransportMissionFullHazMat

// Collection of Remarks associated with this Air Transport Mission.
//
// This is an alias to an internal type.
type AirTransportMissionFullRemark = shared.AirTransportMissionFullRemark

// Collection of Requirements planned to be associated with this Air Transport
// Mission.
//
// This is an alias to an internal type.
type AirTransportMissionFullRequirement = shared.AirTransportMissionFullRequirement

// General aircraft designation, characteristics, and capabilities. The aircraft
// schema contains static data of specific aircraft, including tail number, cruise
// speed, max speed, and minimum required runway length, etc.
//
// This is an alias to an internal type.
type AircraftFull = shared.AircraftFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AircraftFullDataMode = shared.AircraftFullDataMode

// Equals "REAL"
const AircraftFullDataModeReal = shared.AircraftFullDataModeReal

// Equals "TEST"
const AircraftFullDataModeTest = shared.AircraftFullDataModeTest

// Equals "SIMULATED"
const AircraftFullDataModeSimulated = shared.AircraftFullDataModeSimulated

// Equals "EXERCISE"
const AircraftFullDataModeExercise = shared.AircraftFullDataModeExercise

// Information related to the planning, load, status, and deployment or dispatch of
// one aircraft to carry out a mission.
//
// This is an alias to an internal type.
type AircraftsortieFull = shared.AircraftsortieFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AircraftsortieFullDataMode = shared.AircraftsortieFullDataMode

// Equals "REAL"
const AircraftsortieFullDataModeReal = shared.AircraftsortieFullDataModeReal

// Equals "TEST"
const AircraftsortieFullDataModeTest = shared.AircraftsortieFullDataModeTest

// Equals "SIMULATED"
const AircraftsortieFullDataModeSimulated = shared.AircraftsortieFullDataModeSimulated

// Equals "EXERCISE"
const AircraftsortieFullDataModeExercise = shared.AircraftsortieFullDataModeExercise

// The status of the supporting document.
//
// This is an alias to an internal type.
type AircraftsortieFullPaperStatus = shared.AircraftsortieFullPaperStatus

// Equals "PUBLISHED"
const AircraftsortieFullPaperStatusPublished = shared.AircraftsortieFullPaperStatusPublished

// Equals "DELETED"
const AircraftsortieFullPaperStatusDeleted = shared.AircraftsortieFullPaperStatusDeleted

// Equals "UPDATED"
const AircraftsortieFullPaperStatusUpdated = shared.AircraftsortieFullPaperStatusUpdated

// Equals "READ"
const AircraftsortieFullPaperStatusRead = shared.AircraftsortieFullPaperStatusRead

// The prior permission required (PPR) status.
//
// This is an alias to an internal type.
type AircraftsortieFullPprStatus = shared.AircraftsortieFullPprStatus

// Equals "NOT REQUIRED"
const AircraftsortieFullPprStatusNotRequired = shared.AircraftsortieFullPprStatusNotRequired

// Equals "REQUIRED NOT REQUESTED"
const AircraftsortieFullPprStatusRequiredNotRequested = shared.AircraftsortieFullPprStatusRequiredNotRequested

// Equals "GRANTED"
const AircraftsortieFullPprStatusGranted = shared.AircraftsortieFullPprStatusGranted

// Equals "PENDING"
const AircraftsortieFullPprStatusPending = shared.AircraftsortieFullPprStatusPending

// Type of Ravens required for this sortie (N - None, R - Raven (Security Team)
// required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required
// (Ground time over 6 hours)).
//
// This is an alias to an internal type.
type AircraftsortieFullRvnReq = shared.AircraftsortieFullRvnReq

// Equals "N"
const AircraftsortieFullRvnReqN = shared.AircraftsortieFullRvnReqN

// Equals "R"
const AircraftsortieFullRvnReqR = shared.AircraftsortieFullRvnReqR

// Equals "C6"
const AircraftsortieFullRvnReqC6 = shared.AircraftsortieFullRvnReqC6

// Equals "R6"
const AircraftsortieFullRvnReqR6 = shared.AircraftsortieFullRvnReqR6

// Aircraft readiness and status data. Contains the dynamic data associated with
// the specific aircraft status, either in-flight or on-ground, including remaining
// fuel, mission readiness, and inventory, etc.
//
// This is an alias to an internal type.
type AircraftstatusFull = shared.AircraftstatusFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AircraftstatusFullDataMode = shared.AircraftstatusFullDataMode

// Equals "REAL"
const AircraftstatusFullDataModeReal = shared.AircraftstatusFullDataModeReal

// Equals "TEST"
const AircraftstatusFullDataModeTest = shared.AircraftstatusFullDataModeTest

// Equals "SIMULATED"
const AircraftstatusFullDataModeSimulated = shared.AircraftstatusFullDataModeSimulated

// Equals "EXERCISE"
const AircraftstatusFullDataModeExercise = shared.AircraftstatusFullDataModeExercise

// The status of the air-to-air weapon release system (OPERATIONAL,
// NON-OPERATIONAL, OFF).
//
// This is an alias to an internal type.
type AircraftstatusFullAirToAirStatus = shared.AircraftstatusFullAirToAirStatus

// Equals "OPERATIONAL"
const AircraftstatusFullAirToAirStatusOperational = shared.AircraftstatusFullAirToAirStatusOperational

// Equals "NON-OPERATIONAL"
const AircraftstatusFullAirToAirStatusNonOperational = shared.AircraftstatusFullAirToAirStatusNonOperational

// Equals "OFF"
const AircraftstatusFullAirToAirStatusOff = shared.AircraftstatusFullAirToAirStatusOff

// The status of the air-to-ground weapon release system (OPERATIONAL,
// NON-OPERATIONAL, OFF).
//
// This is an alias to an internal type.
type AircraftstatusFullAirToGroundStatus = shared.AircraftstatusFullAirToGroundStatus

// Equals "OPERATIONAL"
const AircraftstatusFullAirToGroundStatusOperational = shared.AircraftstatusFullAirToGroundStatusOperational

// Equals "NON-OPERATIONAL"
const AircraftstatusFullAirToGroundStatusNonOperational = shared.AircraftstatusFullAirToGroundStatusNonOperational

// Equals "OFF"
const AircraftstatusFullAirToGroundStatusOff = shared.AircraftstatusFullAirToGroundStatusOff

// Properties and characteristics of a remark that is associated with an aircraft
// status.
//
// This is an alias to an internal type.
type AircraftstatusremarkFull = shared.AircraftstatusremarkFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AircraftstatusremarkFullDataMode = shared.AircraftstatusremarkFullDataMode

// Equals "REAL"
const AircraftstatusremarkFullDataModeReal = shared.AircraftstatusremarkFullDataModeReal

// Equals "TEST"
const AircraftstatusremarkFullDataModeTest = shared.AircraftstatusremarkFullDataModeTest

// Equals "SIMULATED"
const AircraftstatusremarkFullDataModeSimulated = shared.AircraftstatusremarkFullDataModeSimulated

// Equals "EXERCISE"
const AircraftstatusremarkFullDataModeExercise = shared.AircraftstatusremarkFullDataModeExercise

// Properties and characteristics of an airfield, which includes location, airfield
// codes, suitability codes, and remarks.
//
// This is an alias to an internal type.
type AirfieldFull = shared.AirfieldFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirfieldFullDataMode = shared.AirfieldFullDataMode

// Equals "REAL"
const AirfieldFullDataModeReal = shared.AirfieldFullDataModeReal

// Equals "TEST"
const AirfieldFullDataModeTest = shared.AirfieldFullDataModeTest

// Equals "SIMULATED"
const AirfieldFullDataModeSimulated = shared.AirfieldFullDataModeSimulated

// Equals "EXERCISE"
const AirfieldFullDataModeExercise = shared.AirfieldFullDataModeExercise

// Airfield capacity data. Contains data associated with the airfieldslots
// available for parking, working, takeoff, and landing at the airfield, as well as
// the types of aircraft that can be accommodated.
//
// This is an alias to an internal type.
type AirfieldslotFull = shared.AirfieldslotFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirfieldslotFullDataMode = shared.AirfieldslotFullDataMode

// Equals "REAL"
const AirfieldslotFullDataModeReal = shared.AirfieldslotFullDataModeReal

// Equals "TEST"
const AirfieldslotFullDataModeTest = shared.AirfieldslotFullDataModeTest

// Equals "SIMULATED"
const AirfieldslotFullDataModeSimulated = shared.AirfieldslotFullDataModeSimulated

// Equals "EXERCISE"
const AirfieldslotFullDataModeExercise = shared.AirfieldslotFullDataModeExercise

// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL,
// OTHER).
//
// This is an alias to an internal type.
type AirfieldslotFullAcSlotCat = shared.AirfieldslotFullAcSlotCat

// Equals "WIDE"
const AirfieldslotFullAcSlotCatWide = shared.AirfieldslotFullAcSlotCatWide

// Equals "NARROW"
const AirfieldslotFullAcSlotCatNarrow = shared.AirfieldslotFullAcSlotCatNarrow

// Equals "HELO"
const AirfieldslotFullAcSlotCatHelo = shared.AirfieldslotFullAcSlotCatHelo

// Equals "ALL"
const AirfieldslotFullAcSlotCatAll = shared.AirfieldslotFullAcSlotCatAll

// Equals "OTHER"
const AirfieldslotFullAcSlotCatOther = shared.AirfieldslotFullAcSlotCatOther

// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING,
// OTHER).
//
// This is an alias to an internal type.
type AirfieldslotFullType = shared.AirfieldslotFullType

// Equals "WORKING"
const AirfieldslotFullTypeWorking = shared.AirfieldslotFullTypeWorking

// Equals "PARKING"
const AirfieldslotFullTypeParking = shared.AirfieldslotFullTypeParking

// Equals "TAKEOFF"
const AirfieldslotFullTypeTakeoff = shared.AirfieldslotFullTypeTakeoff

// Equals "LANDING"
const AirfieldslotFullTypeLanding = shared.AirfieldslotFullTypeLanding

// Equals "OTHER"
const AirfieldslotFullTypeOther = shared.AirfieldslotFullTypeOther

// Airfield slot use data. Contains the dynamic data associated with the status and
// use of specific airfield slots.
//
// This is an alias to an internal type.
type AirfieldslotconsumptionFull = shared.AirfieldslotconsumptionFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirfieldslotconsumptionFullDataMode = shared.AirfieldslotconsumptionFullDataMode

// Equals "REAL"
const AirfieldslotconsumptionFullDataModeReal = shared.AirfieldslotconsumptionFullDataModeReal

// Equals "TEST"
const AirfieldslotconsumptionFullDataModeTest = shared.AirfieldslotconsumptionFullDataModeTest

// Equals "SIMULATED"
const AirfieldslotconsumptionFullDataModeSimulated = shared.AirfieldslotconsumptionFullDataModeSimulated

// Equals "EXERCISE"
const AirfieldslotconsumptionFullDataModeExercise = shared.AirfieldslotconsumptionFullDataModeExercise

// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
//
// This is an alias to an internal type.
type AirfieldslotconsumptionFullStatus = shared.AirfieldslotconsumptionFullStatus

// Equals "REQUESTED"
const AirfieldslotconsumptionFullStatusRequested = shared.AirfieldslotconsumptionFullStatusRequested

// Equals "APPROVED"
const AirfieldslotconsumptionFullStatusApproved = shared.AirfieldslotconsumptionFullStatusApproved

// Equals "DENIED"
const AirfieldslotconsumptionFullStatusDenied = shared.AirfieldslotconsumptionFullStatusDenied

// Equals "BLOCKED"
const AirfieldslotconsumptionFullStatusBlocked = shared.AirfieldslotconsumptionFullStatusBlocked

// Equals "OTHER"
const AirfieldslotconsumptionFullStatusOther = shared.AirfieldslotconsumptionFullStatusOther

// The airfield status contains dynamic data of an airfield's capabilities.
//
// This is an alias to an internal type.
type AirfieldstatusFull = shared.AirfieldstatusFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirfieldstatusFullDataMode = shared.AirfieldstatusFullDataMode

// Equals "REAL"
const AirfieldstatusFullDataModeReal = shared.AirfieldstatusFullDataModeReal

// Equals "TEST"
const AirfieldstatusFullDataModeTest = shared.AirfieldstatusFullDataModeTest

// Equals "SIMULATED"
const AirfieldstatusFullDataModeSimulated = shared.AirfieldstatusFullDataModeSimulated

// Equals "EXERCISE"
const AirfieldstatusFullDataModeExercise = shared.AirfieldstatusFullDataModeExercise

// Information related to how an aircraft is loaded with cargo, equipment, and
// passengers.
//
// This is an alias to an internal type.
type AirloadplanFull = shared.AirloadplanFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirloadplanFullDataMode = shared.AirloadplanFullDataMode

// Equals "REAL"
const AirloadplanFullDataModeReal = shared.AirloadplanFullDataModeReal

// Equals "TEST"
const AirloadplanFullDataModeTest = shared.AirloadplanFullDataModeTest

// Equals "SIMULATED"
const AirloadplanFullDataModeSimulated = shared.AirloadplanFullDataModeSimulated

// Equals "EXERCISE"
const AirloadplanFullDataModeExercise = shared.AirloadplanFullDataModeExercise

// Collection of hazmat actuals associated with this load plan.
//
// This is an alias to an internal type.
type AirloadplanFullAirLoadPlanHazmatActual = shared.AirloadplanFullAirLoadPlanHazmatActual

// Collection of human remains transport information associated with this load
// plan.
//
// This is an alias to an internal type.
type AirloadplanFullAirLoadPlanHr = shared.AirloadplanFullAirLoadPlanHr

// Collection of cargo information located at the pallet positions associated with
// this load plan.
//
// This is an alias to an internal type.
type AirloadplanFullAirLoadPlanPalletDetail = shared.AirloadplanFullAirLoadPlanPalletDetail

// Collection of passenger and cargo details associated with this load plan for
// this leg of the mission.
//
// This is an alias to an internal type.
type AirloadplanFullAirLoadPlanPaxCargo = shared.AirloadplanFullAirLoadPlanPaxCargo

// Collection of unit line number actuals associated with this load plan.
//
// This is an alias to an internal type.
type AirloadplanFullAirLoadPlanUlnActual = shared.AirloadplanFullAirLoadPlanUlnActual

// Beta Version Airspace Control Order: Contains airspace coordination information
// and instructions that have been issued by an airspace control authority.
//
// This is an alias to an internal type.
type AirspacecontrolorderFull = shared.AirspacecontrolorderFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AirspacecontrolorderFullDataMode = shared.AirspacecontrolorderFullDataMode

// Equals "REAL"
const AirspacecontrolorderFullDataModeReal = shared.AirspacecontrolorderFullDataModeReal

// Equals "TEST"
const AirspacecontrolorderFullDataModeTest = shared.AirspacecontrolorderFullDataModeTest

// Equals "SIMULATED"
const AirspacecontrolorderFullDataModeSimulated = shared.AirspacecontrolorderFullDataModeSimulated

// Equals "EXERCISE"
const AirspacecontrolorderFullDataModeExercise = shared.AirspacecontrolorderFullDataModeExercise

// Mandatory nested segment to report multiple airspace control means statuses
// within an ACOID.
//
// This is an alias to an internal type.
type AirspacecontrolorderFullAirspaceControlMeansStatus = shared.AirspacecontrolorderFullAirspaceControlMeansStatus

// A conditional nested segment to report multiple airspace control means within a
// particular airspace control means status.
//
// This is an alias to an internal type.
type AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMean = shared.AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMean

// The controlPoint set describes any reference/controlling/rendezvous point for a
// given airspace control means.
//
// This is an alias to an internal type.
type AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint = shared.AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint

// The timePeriods set describes the effective datetime for a given airspace
// control means.
//
// This is an alias to an internal type.
type AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod = shared.AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod

// The airspaceControlReferences set provides both USMTF and non-USMTF references
// for this airspace control order.
//
// This is an alias to an internal type.
type AirspacecontrolorderFullAirspaceControlOrderReference = shared.AirspacecontrolorderFullAirspaceControlOrderReference

// Self-reported information obtained from Automatic Identification System (AIS)
// equipment. This contains information such as unique identification, status,
// position, course, and speed. The AIS is an automatic tracking system that uses
// transceivers on ships and is used by vessel traffic services. Although
// technically and operationally distinct, the AIS system is analogous to ADS-B
// that performs a similar function for aircraft. AIS is intended to assist a
// vessel's watchstanding officers and allow maritime authorities to track and
// monitor vessel movements. AIS integrates a standardized VHF transceiver with a
// positioning system such as Global Positioning System receiver, with other
// electronic navigation sensors, such as gyrocompass or rate of turn indicator.
// Vessels fitted with AIS transceivers can be tracked by AIS base stations located
// along coast lines or, when out of range of terrestrial networks, through a
// growing number of satellites that are fitted with special AIS receivers which
// are capable of deconflicting a large number of signatures.
//
// This is an alias to an internal type.
type AIsFull = shared.AIsFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AIsFullDataMode = shared.AIsFullDataMode

// Equals "REAL"
const AIsFullDataModeReal = shared.AIsFullDataModeReal

// Equals "TEST"
const AIsFullDataModeTest = shared.AIsFullDataModeTest

// Equals "SIMULATED"
const AIsFullDataModeSimulated = shared.AIsFullDataModeSimulated

// Equals "EXERCISE"
const AIsFullDataModeExercise = shared.AIsFullDataModeExercise

// The analytic imagery schema supports data plots and graphics of various types.
// The records contain general file information, allows for annotations to
// user-defined areas of interest on the graphics, and supports keyword searching.
//
// This is an alias to an internal type.
type AnalyticImageryFull = shared.AnalyticImageryFull

// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
//
// This is an alias to an internal type.
type AnalyticImageryFullDataMode = shared.AnalyticImageryFullDataMode

// Equals "REAL"
const AnalyticImageryFullDataModeReal = shared.AnalyticImageryFullDataModeReal

// Equals "TEST"
const AnalyticImageryFullDataModeTest = shared.AnalyticImageryFullDataModeTest

// Equals "SIMULATED"
const AnalyticImageryFullDataModeSimulated = shared.AnalyticImageryFullDataModeSimulated

// Equals "EXERCISE"
const AnalyticImageryFullDataModeExercise = shared.AnalyticImageryFullDataModeExercise

// Feature assessments obtained from imagery analysis or other data analytics.
// Feature assessments are georeferenced terrestrial features such as marine
// vessels, vehicles, buildings, etc., or contain other types of non terrestrial
// assessments such as spacecraft structures. Geospatial queries are supported
// through either the regionText (WKT) or regionGeoJSON fields.
//
// This is an alias to an internal type.
type AnalyticImageryFullFeatureAssessment = shared.AnalyticImageryFullFeatureAssessment

// Detailed information for a spacecraft communication antenna. One antenna may
// have multiple AntennaDetails records, compiled by various sources.
//
// This is an alias to an internal type.
type AntennaDetailsFull = shared.AntennaDetailsFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AntennaDetailsFullDataMode = shared.AntennaDetailsFullDataMode

// Equals "REAL"
const AntennaDetailsFullDataModeReal = shared.AntennaDetailsFullDataModeReal

// Equals "TEST"
const AntennaDetailsFullDataModeTest = shared.AntennaDetailsFullDataModeTest

// Equals "SIMULATED"
const AntennaDetailsFullDataModeSimulated = shared.AntennaDetailsFullDataModeSimulated

// Equals "EXERCISE"
const AntennaDetailsFullDataModeExercise = shared.AntennaDetailsFullDataModeExercise

// Antenna mode (e.g. TX,RX).
//
// This is an alias to an internal type.
type AntennaDetailsFullMode = shared.AntennaDetailsFullMode

// Equals "TX"
const AntennaDetailsFullModeTx = shared.AntennaDetailsFullModeTx

// Equals "RX"
const AntennaDetailsFullModeRx = shared.AntennaDetailsFullModeRx

// Model representation of information on on-orbit/spacecraft communication
// antennas. A spacecraft may have multiple antennas and each antenna can have
// multiple 'details' records compiled by different sources.
//
// This is an alias to an internal type.
type AntennaFull = shared.AntennaFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AntennaFullDataMode = shared.AntennaFullDataMode

// Equals "REAL"
const AntennaFullDataModeReal = shared.AntennaFullDataModeReal

// Equals "TEST"
const AntennaFullDataModeTest = shared.AntennaFullDataModeTest

// Equals "SIMULATED"
const AntennaFullDataModeSimulated = shared.AntennaFullDataModeSimulated

// Equals "EXERCISE"
const AntennaFullDataModeExercise = shared.AntennaFullDataModeExercise

// These services provide operations for posting and querying attitude of on-orbit
// objects. Attitude describes the orientation of an object, which can be
// represented by quaternions or euler angles. The AttitudeSet ID (asId) identifies
// the 'AttitudeSet' record which contains details of the underlying data as well
// as a collection of attitude points. Points must be retrieved by first
// identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID
// 'asId'.
//
// This is an alias to an internal type.
type AttitudedataFull = shared.AttitudedataFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AttitudedataFullDataMode = shared.AttitudedataFullDataMode

// Equals "REAL"
const AttitudedataFullDataModeReal = shared.AttitudedataFullDataModeReal

// Equals "TEST"
const AttitudedataFullDataModeTest = shared.AttitudedataFullDataModeTest

// Equals "SIMULATED"
const AttitudedataFullDataModeSimulated = shared.AttitudedataFullDataModeSimulated

// Equals "EXERCISE"
const AttitudedataFullDataModeExercise = shared.AttitudedataFullDataModeExercise

// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and
// meta data indicating the specifics of the orientation of an on-orbit object.
// Attitude is typically distributed in a flat file containing details of the
// attitude generation as well as a large collection of individual points at
// varying time steps. AttitudeSet is analogous to this flat file.
//
// This is an alias to an internal type.
type AttitudesetFull = shared.AttitudesetFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type AttitudesetFullDataMode = shared.AttitudesetFullDataMode

// Equals "REAL"
const AttitudesetFullDataModeReal = shared.AttitudesetFullDataModeReal

// Equals "TEST"
const AttitudesetFullDataModeTest = shared.AttitudesetFullDataModeTest

// Equals "SIMULATED"
const AttitudesetFullDataModeSimulated = shared.AttitudesetFullDataModeSimulated

// Equals "EXERCISE"
const AttitudesetFullDataModeExercise = shared.AttitudesetFullDataModeExercise

// Model representation of specific spacecraft battery types.
//
// This is an alias to an internal type.
type BatteryFull = shared.BatteryFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type BatteryFullDataMode = shared.BatteryFullDataMode

// Equals "REAL"
const BatteryFullDataModeReal = shared.BatteryFullDataModeReal

// Equals "TEST"
const BatteryFullDataModeTest = shared.BatteryFullDataModeTest

// Equals "SIMULATED"
const BatteryFullDataModeSimulated = shared.BatteryFullDataModeSimulated

// Equals "EXERCISE"
const BatteryFullDataModeExercise = shared.BatteryFullDataModeExercise

// Detailed information on a spacecraft battery type compiled by a particular
// source. A Battery record may have multiple details records from several sources.
//
// This is an alias to an internal type.
type BatterydetailsFull = shared.BatterydetailsFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type BatterydetailsFullDataMode = shared.BatterydetailsFullDataMode

// Equals "REAL"
const BatterydetailsFullDataModeReal = shared.BatterydetailsFullDataModeReal

// Equals "TEST"
const BatterydetailsFullDataModeTest = shared.BatterydetailsFullDataModeTest

// Equals "SIMULATED"
const BatterydetailsFullDataModeSimulated = shared.BatterydetailsFullDataModeSimulated

// Equals "EXERCISE"
const BatterydetailsFullDataModeExercise = shared.BatterydetailsFullDataModeExercise

// Describes a satellite antenna beam.
//
// This is an alias to an internal type.
type BeamFull = shared.BeamFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type BeamFullDataMode = shared.BeamFullDataMode

// Equals "REAL"
const BeamFullDataModeReal = shared.BeamFullDataModeReal

// Equals "TEST"
const BeamFullDataModeTest = shared.BeamFullDataModeTest

// Equals "SIMULATED"
const BeamFullDataModeSimulated = shared.BeamFullDataModeSimulated

// Equals "EXERCISE"
const BeamFullDataModeExercise = shared.BeamFullDataModeExercise

// Describes the beam contour associated with a beam entity. Beam contours are the
// geographic representation of the relative gain levels of beam power off of the
// maximum gain boresight points.
//
// This is an alias to an internal type.
type BeamcontourFull = shared.BeamcontourFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type BeamcontourFullDataMode = shared.BeamcontourFullDataMode

// Equals "REAL"
const BeamcontourFullDataModeReal = shared.BeamcontourFullDataModeReal

// Equals "TEST"
const BeamcontourFullDataModeTest = shared.BeamcontourFullDataModeTest

// Equals "SIMULATED"
const BeamcontourFullDataModeSimulated = shared.BeamcontourFullDataModeSimulated

// Equals "EXERCISE"
const BeamcontourFullDataModeExercise = shared.BeamcontourFullDataModeExercise

// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).
// Boresight refers to the point of maximum/peak gain, and should not be confused
// with the 'aim point' of the related beam. Gain contours are regions of coverage
// referenced to the relative gain of the related beam. Service Areas are composed
// of one or more service regions, with each region being either discrete point(s)
// or a continuous contour.
//
// This is an alias to an internal type.
type BeamcontourFullType = shared.BeamcontourFullType

// Equals "BORESIGHT"
const BeamcontourFullTypeBoresight = shared.BeamcontourFullTypeBoresight

// Equals "CONTOUR"
const BeamcontourFullTypeContour = shared.BeamcontourFullTypeContour

// Equals "SVC AREA"
const BeamcontourFullTypeSvcArea = shared.BeamcontourFullTypeSvcArea

// A bus is the physical and software infrastructure backbone to which on-orbit
// satellite payloads are attached for power, control, and other support functions.
//
// This is an alias to an internal type.
type BusFull = shared.BusFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type BusFullDataMode = shared.BusFullDataMode

// Equals "REAL"
const BusFullDataModeReal = shared.BusFullDataModeReal

// Equals "TEST"
const BusFullDataModeTest = shared.BusFullDataModeTest

// Equals "SIMULATED"
const BusFullDataModeSimulated = shared.BusFullDataModeSimulated

// Equals "EXERCISE"
const BusFullDataModeExercise = shared.BusFullDataModeExercise

// Channel information on a particular transponder.
//
// This is an alias to an internal type.
type ChannelFull = shared.ChannelFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type ChannelFullDataMode = shared.ChannelFullDataMode

// Equals "REAL"
const ChannelFullDataModeReal = shared.ChannelFullDataModeReal

// Equals "TEST"
const ChannelFullDataModeTest = shared.ChannelFullDataModeTest

// Equals "SIMULATED"
const ChannelFullDataModeSimulated = shared.ChannelFullDataModeSimulated

// Equals "EXERCISE"
const ChannelFullDataModeExercise = shared.ChannelFullDataModeExercise

// Collect Requests support several types of individual requests, or
// planned/scheduled tasks on sensors and/or orbital objects. Options are provided
// to accomodate most common sensor contact and collection applications, including
// single sensor-object tasking, search operations, and TT&C support. Multiple
// requests originating from a plan or schedule may be associated to a sensor plan
// if desired.
//
// This is an alias to an internal type.
type CollectRequestFull = shared.CollectRequestFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type CollectRequestFullDataMode = shared.CollectRequestFullDataMode

// Equals "REAL"
const CollectRequestFullDataModeReal = shared.CollectRequestFullDataModeReal

// Equals "TEST"
const CollectRequestFullDataModeTest = shared.CollectRequestFullDataModeTest

// Equals "SIMULATED"
const CollectRequestFullDataModeSimulated = shared.CollectRequestFullDataModeSimulated

// Equals "EXERCISE"
const CollectRequestFullDataModeExercise = shared.CollectRequestFullDataModeExercise

// An element set is a collection of Keplerian orbital elements describing an orbit
// of a particular satellite. The data is used along with an orbit propagator in
// order to predict the motion of a satellite. The element set, or elset for short,
// consists of identification data, the classical elements and drag parameters.
//
// This is an alias to an internal type.
type CollectRequestFullElset = shared.CollectRequestFullElset

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
//
// This is an alias to an internal type.
type CollectRequestFullStateVector = shared.CollectRequestFullStateVector

// Collect response supports the response and status of individual collect
// requests. Each response is referenced by the UUID of the request, and contains
// information including the status of the request, collection times and types, and
// reference(s) to the observations collected. There may be multiple responses
// associated with a request, either from multiple collectors or to relay status
// changes prior to completion and delivery.
//
// This is an alias to an internal type.
type CollectResponseFull = shared.CollectResponseFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type CollectResponseFullDataMode = shared.CollectResponseFullDataMode

// Equals "REAL"
const CollectResponseFullDataModeReal = shared.CollectResponseFullDataModeReal

// Equals "TEST"
const CollectResponseFullDataModeTest = shared.CollectResponseFullDataModeTest

// Equals "SIMULATED"
const CollectResponseFullDataModeSimulated = shared.CollectResponseFullDataModeSimulated

// Equals "EXERCISE"
const CollectResponseFullDataModeExercise = shared.CollectResponseFullDataModeExercise

// Comm represents communications entities (e.g. on-orbit communications satellite
// payloads) within the SSA environment.
//
// This is an alias to an internal type.
type CommFull = shared.CommFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type CommFullDataMode = shared.CommFullDataMode

// Equals "REAL"
const CommFullDataModeReal = shared.CommFullDataModeReal

// Equals "TEST"
const CommFullDataModeTest = shared.CommFullDataModeTest

// Equals "SIMULATED"
const CommFullDataModeSimulated = shared.CommFullDataModeSimulated

// Equals "EXERCISE"
const CommFullDataModeExercise = shared.CommFullDataModeExercise

// A transponder receives and transmits radio signals at a prescribed frequency
// range. A communications satellite's transponder is the series of interconnected
// units that form a communications channel between the receiving and the
// transmitting antennas. It is mainly used in satellite communication to transfer
// the received signals.
//
// This is an alias to an internal type.
type CommFullTransponder = shared.CommFullTransponder

// Stores the results of a particular Conjunction Assessment (CA) run.
//
// This is an alias to an internal type.
type ConjunctionFull = shared.ConjunctionFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type ConjunctionFullDataMode = shared.ConjunctionFullDataMode

// Equals "REAL"
const ConjunctionFullDataModeReal = shared.ConjunctionFullDataModeReal

// Equals "TEST"
const ConjunctionFullDataModeTest = shared.ConjunctionFullDataModeTest

// Equals "SIMULATED"
const ConjunctionFullDataModeSimulated = shared.ConjunctionFullDataModeSimulated

// Equals "EXERCISE"
const ConjunctionFullDataModeExercise = shared.ConjunctionFullDataModeExercise

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
//
// This is an alias to an internal type.
type ConjunctionFullStateVector1 = shared.ConjunctionFullStateVector1

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
//
// This is an alias to an internal type.
type ConjunctionFullStateVector2 = shared.ConjunctionFullStateVector2

// A Country may represent countries, multi-national consortiums, and international
// organizations.
//
// This is an alias to an internal type.
type CountryFull = shared.CountryFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type CountryFullDataMode = shared.CountryFullDataMode

// Equals "REAL"
const CountryFullDataModeReal = shared.CountryFullDataModeReal

// Equals "TEST"
const CountryFullDataModeTest = shared.CountryFullDataModeTest

// Equals "SIMULATED"
const CountryFullDataModeSimulated = shared.CountryFullDataModeSimulated

// Equals "EXERCISE"
const CountryFullDataModeExercise = shared.CountryFullDataModeExercise

// Crew Services.
//
// This is an alias to an internal type.
type CrewFull = shared.CrewFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type CrewFullDataMode = shared.CrewFullDataMode

// Equals "REAL"
const CrewFullDataModeReal = shared.CrewFullDataModeReal

// Equals "TEST"
const CrewFullDataModeTest = shared.CrewFullDataModeTest

// Equals "SIMULATED"
const CrewFullDataModeSimulated = shared.CrewFullDataModeSimulated

// Equals "EXERCISE"
const CrewFullDataModeExercise = shared.CrewFullDataModeExercise

// Schema for Crew Member data.
//
// This is an alias to an internal type.
type CrewFullCrewMember = shared.CrewFullCrewMember

// A diplomatic clearance is an authorization for an aircraft to traverse or land
// within a specified country.
//
// This is an alias to an internal type.
type DiplomaticclearanceFull = shared.DiplomaticclearanceFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type DiplomaticclearanceFullDataMode = shared.DiplomaticclearanceFullDataMode

// Equals "REAL"
const DiplomaticclearanceFullDataModeReal = shared.DiplomaticclearanceFullDataModeReal

// Equals "TEST"
const DiplomaticclearanceFullDataModeTest = shared.DiplomaticclearanceFullDataModeTest

// Equals "SIMULATED"
const DiplomaticclearanceFullDataModeSimulated = shared.DiplomaticclearanceFullDataModeSimulated

// Equals "EXERCISE"
const DiplomaticclearanceFullDataModeExercise = shared.DiplomaticclearanceFullDataModeExercise

// Collection of diplomatic clearance details.
//
// This is an alias to an internal type.
type DiplomaticclearanceFullDiplomaticClearanceDetail = shared.DiplomaticclearanceFullDiplomaticClearanceDetail

// Collection of diplomatic clearance remarks.
//
// This is an alias to an internal type.
type DiplomaticclearanceFullDiplomaticClearanceRemark = shared.DiplomaticclearanceFullDiplomaticClearanceRemark

// Historical drift rates for GEO Onorbit objects resulting from updates to
// OnorbitDetails driftRate values.
//
// This is an alias to an internal type.
type DriftHistoryAbridged = shared.DriftHistoryAbridged

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type DriftHistoryAbridgedDataMode = shared.DriftHistoryAbridgedDataMode

// Equals "REAL"
const DriftHistoryAbridgedDataModeReal = shared.DriftHistoryAbridgedDataModeReal

// Equals "TEST"
const DriftHistoryAbridgedDataModeTest = shared.DriftHistoryAbridgedDataModeTest

// Equals "SIMULATED"
const DriftHistoryAbridgedDataModeSimulated = shared.DriftHistoryAbridgedDataModeSimulated

// Equals "EXERCISE"
const DriftHistoryAbridgedDataModeExercise = shared.DriftHistoryAbridgedDataModeExercise

// Historical drift rates for GEO Onorbit objects resulting from updates to
// OnorbitDetails driftRate values.
//
// This is an alias to an internal type.
type DriftHistoryFull = shared.DriftHistoryFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type DriftHistoryFullDataMode = shared.DriftHistoryFullDataMode

// Equals "REAL"
const DriftHistoryFullDataModeReal = shared.DriftHistoryFullDataModeReal

// Equals "TEST"
const DriftHistoryFullDataModeTest = shared.DriftHistoryFullDataModeTest

// Equals "SIMULATED"
const DriftHistoryFullDataModeSimulated = shared.DriftHistoryFullDataModeSimulated

// Equals "EXERCISE"
const DriftHistoryFullDataModeExercise = shared.DriftHistoryFullDataModeExercise

// Known launch vehicle engines and their performance characteristics and limits. A
// launch vehicle has 1 to many engines per stage.
//
// This is an alias to an internal type.
type Engine = shared.Engine

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EngineDataMode = shared.EngineDataMode

// Equals "REAL"
const EngineDataModeReal = shared.EngineDataModeReal

// Equals "TEST"
const EngineDataModeTest = shared.EngineDataModeTest

// Equals "SIMULATED"
const EngineDataModeSimulated = shared.EngineDataModeSimulated

// Equals "EXERCISE"
const EngineDataModeExercise = shared.EngineDataModeExercise

// Known launch vehicle engine details and performance characteristics and limits
// compiled by a particular source. A launch vehicle engine may have several
// details records from multiple sources.
//
// This is an alias to an internal type.
type EngineDetailsFull = shared.EngineDetailsFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EngineDetailsFullDataMode = shared.EngineDetailsFullDataMode

// Equals "REAL"
const EngineDetailsFullDataModeReal = shared.EngineDetailsFullDataModeReal

// Equals "TEST"
const EngineDetailsFullDataModeTest = shared.EngineDetailsFullDataModeTest

// Equals "SIMULATED"
const EngineDetailsFullDataModeSimulated = shared.EngineDetailsFullDataModeSimulated

// Equals "EXERCISE"
const EngineDetailsFullDataModeExercise = shared.EngineDetailsFullDataModeExercise

// An entity is a generic representation of any object within a space/SSA system
// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
// entity can have an operating unit, a location (if terrestrial), and statuses.
//
// This is an alias to an internal type.
type EntityFull = shared.EntityFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EntityFullDataMode = shared.EntityFullDataMode

// Equals "REAL"
const EntityFullDataModeReal = shared.EntityFullDataModeReal

// Equals "TEST"
const EntityFullDataModeTest = shared.EntityFullDataModeTest

// Equals "SIMULATED"
const EntityFullDataModeSimulated = shared.EntityFullDataModeSimulated

// Equals "EXERCISE"
const EntityFullDataModeExercise = shared.EntityFullDataModeExercise

// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
// LASEREMITTER, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
//
// This is an alias to an internal type.
type EntityFullType = shared.EntityFullType

// Equals "AIRCRAFT"
const EntityFullTypeAircraft = shared.EntityFullTypeAircraft

// Equals "BUS"
const EntityFullTypeBus = shared.EntityFullTypeBus

// Equals "COMM"
const EntityFullTypeComm = shared.EntityFullTypeComm

// Equals "IR"
const EntityFullTypeIr = shared.EntityFullTypeIr

// Equals "LASEREMITTER"
const EntityFullTypeLaseremitter = shared.EntityFullTypeLaseremitter

// Equals "NAVIGATION"
const EntityFullTypeNavigation = shared.EntityFullTypeNavigation

// Equals "ONORBIT"
const EntityFullTypeOnorbit = shared.EntityFullTypeOnorbit

// Equals "RFEMITTER"
const EntityFullTypeRfemitter = shared.EntityFullTypeRfemitter

// Equals "SCIENTIFIC"
const EntityFullTypeScientific = shared.EntityFullTypeScientific

// Equals "SENSOR"
const EntityFullTypeSensor = shared.EntityFullTypeSensor

// Equals "SITE"
const EntityFullTypeSite = shared.EntityFullTypeSite

// Equals "VESSEL"
const EntityFullTypeVessel = shared.EntityFullTypeVessel

// Model object representing on-orbit objects or satellites in the system.
//
// This is an alias to an internal type.
type EntityFullOnOrbit = shared.EntityFullOnOrbit

// This is an alias to an internal type.
type EntityFullOnOrbitAntenna = shared.EntityFullOnOrbitAntenna

// This is an alias to an internal type.
type EntityFullOnOrbitBattery = shared.EntityFullOnOrbitBattery

// Contains details of the OnOrbit object.
//
// This is an alias to an internal type.
type EntityFullOnOrbitOnorbitDetail = shared.EntityFullOnOrbitOnorbitDetail

// This is an alias to an internal type.
type EntityFullOnOrbitSolarArray = shared.EntityFullOnOrbitSolarArray

// Model representation of information on on-orbit/spacecraft solar arrays. A
// spacecraft may have multiple solar arrays and each solar array can have multiple
// 'details' records compiled by different sources.
//
// This is an alias to an internal type.
type EntityFullOnOrbitSolarArraySolarArray = shared.EntityFullOnOrbitSolarArraySolarArray

// This is an alias to an internal type.
type EntityFullOnOrbitThruster = shared.EntityFullOnOrbitThruster

// Model representation of a unit or organization which operates or controls a
// space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
// belong to an organization.
//
// This is an alias to an internal type.
type EntityFullOperatingUnit = shared.EntityFullOperatingUnit

// Remarks contain amplifying information for a specific service. The information
// may contain context and interpretations for consumer use.
//
// This is an alias to an internal type.
type EntityFullOperatingUnitOperatingUnitRemark = shared.EntityFullOperatingUnitOperatingUnitRemark

// Type of organization which owns this entity (e.g. Commercial, Government,
// Academic, Consortium, etc).
//
// This is an alias to an internal type.
type EntityFullOwnerType = shared.EntityFullOwnerType

// Equals "Commercial"
const EntityFullOwnerTypeCommercial = shared.EntityFullOwnerTypeCommercial

// Equals "Government"
const EntityFullOwnerTypeGovernment = shared.EntityFullOwnerTypeGovernment

// Equals "Academic"
const EntityFullOwnerTypeAcademic = shared.EntityFullOwnerTypeAcademic

// Equals "Consortium"
const EntityFullOwnerTypeConsortium = shared.EntityFullOwnerTypeConsortium

// Equals "Other"
const EntityFullOwnerTypeOther = shared.EntityFullOwnerTypeOther

// Details on a particular Radio Frequency (RF) band, also known as a carrier,
// which may be in use by any type of Entity for communications or operations.
//
// This is an alias to an internal type.
type EntityFullRfBand = shared.EntityFullRfBand

// Status for a particular Entity. An entity may have multiple status records
// collected by various sources.
//
// This is an alias to an internal type.
type EntityFullStatusCollection = shared.EntityFullStatusCollection

// Additional sub-system or capability status for the parent entity.
//
// This is an alias to an internal type.
type EntityFullStatusCollectionSubStatusCollection = shared.EntityFullStatusCollectionSubStatusCollection

// Model representation of observation data for electro-optical based sensor
// phenomenologies. ECI J2K is the preferred reference frame for EOObservations,
// however, several user-specified reference frames are accommodated. Users should
// check the EOObservation record as well as the 'Discover' tab in the storefront
// to confirm the coordinate frames used by the data provider.
//
// This is an alias to an internal type.
type EoObservationFull = shared.EoObservationFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EoObservationFullDataMode = shared.EoObservationFullDataMode

// Equals "REAL"
const EoObservationFullDataModeReal = shared.EoObservationFullDataModeReal

// Equals "TEST"
const EoObservationFullDataModeTest = shared.EoObservationFullDataModeTest

// Equals "SIMULATED"
const EoObservationFullDataModeSimulated = shared.EoObservationFullDataModeSimulated

// Equals "EXERCISE"
const EoObservationFullDataModeExercise = shared.EoObservationFullDataModeExercise

// Model representation of additional detailed observation data for electro-optical
// based sensor phenomenologies.
//
// This is an alias to an internal type.
type EoObservationFullEoobservationDetails = shared.EoObservationFullEoobservationDetails

// The reference frame of the EOObservation measurements. If the referenceFrame is
// null it is assumed to be J2000.
//
// This is an alias to an internal type.
type EoObservationFullReferenceFrame = shared.EoObservationFullReferenceFrame

// Equals "J2000"
const EoObservationFullReferenceFrameJ2000 = shared.EoObservationFullReferenceFrameJ2000

// Equals "GCRF"
const EoObservationFullReferenceFrameGcrf = shared.EoObservationFullReferenceFrameGcrf

// Equals "ITRF"
const EoObservationFullReferenceFrameItrf = shared.EoObservationFullReferenceFrameItrf

// Equals "TEME"
const EoObservationFullReferenceFrameTeme = shared.EoObservationFullReferenceFrameTeme

// The reference frame of the observing sensor state. If the senReferenceFrame is
// null it is assumed to be J2000.
//
// This is an alias to an internal type.
type EoObservationFullSenReferenceFrame = shared.EoObservationFullSenReferenceFrame

// Equals "J2000"
const EoObservationFullSenReferenceFrameJ2000 = shared.EoObservationFullSenReferenceFrameJ2000

// Equals "EFG/TDR"
const EoObservationFullSenReferenceFrameEfgTdr = shared.EoObservationFullSenReferenceFrameEfgTdr

// Equals "ECR/ECEF"
const EoObservationFullSenReferenceFrameEcrEcef = shared.EoObservationFullSenReferenceFrameEcrEcef

// Equals "TEME"
const EoObservationFullSenReferenceFrameTeme = shared.EoObservationFullSenReferenceFrameTeme

// Equals "ITRF"
const EoObservationFullSenReferenceFrameItrf = shared.EoObservationFullSenReferenceFrameItrf

// Equals "GCRF"
const EoObservationFullSenReferenceFrameGcrf = shared.EoObservationFullSenReferenceFrameGcrf

// Model representation of Earth Orientation Parameters (EOP) produced by the IERS
// (International Earth Rotation and Reference Systems Service). Earth Orientation
// Parameters describe the irregularities of the earth's rotation. Technically,
// they are the parameters which provide the rotation of the ITRS (International
// Terrestrial Reference System) to the ICRS (International Celestial Reference
// System) as a function of time. Universal time -- Universal time (UT1) is the
// time of the earth clock, which performs one revolution in about 24h. It is
// practically proportional to the sidereal time. The excess revolution time is
// called length of day (LOD). Coordinates of the pole -- x and y are the
// coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS
// Reference Pole. The CEP differs from the instantaneous rotation axis by
// quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The
// x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the
// direction 90 degrees West longitude. Celestial pole offsets -- Celestial pole
// offsets are described in the IAU Precession and Nutation models. The observed
// differences with respect to the conventional celestial pole position defined by
// the models are monitored and reported by the IERS. IERS Bulletins A and B
// provide current information on the Earth's orientation in the IERS Reference
// System. This includes Universal Time, coordinates of the terrestrial pole, and
// celestial pole offsets. Bulletin A gives an advanced solution updated weekly;
// the standard solution is given monthly in Bulletin B. Fields suffixed with 'B'
// are Bulletin B values. All solutions are continuous within their respective
// uncertainties. Bulletin A is issued by the IERS Rapid Service/Prediction Centre
// at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the
// IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports
// the latest determinations for polar motion, UT1-UTC, and nutation offsets at
// daily intervals based on a combination of contributed analysis results using
// data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging
// (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging
// (LLR). Predictions for variations a year into the future are also provided.
// Meteorological predictions of variations in Atmospheric Angular Momentum (AAM)
// are used to aid in the prediction of near-term UT1-UTC changes. This publication
// is prepared by the IERS Rapid Service/Prediction Center.
//
// This is an alias to an internal type.
type EopFull = shared.EopFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EopFullDataMode = shared.EopFullDataMode

// Equals "REAL"
const EopFullDataModeReal = shared.EopFullDataModeReal

// Equals "TEST"
const EopFullDataModeTest = shared.EopFullDataModeTest

// Equals "SIMULATED"
const EopFullDataModeSimulated = shared.EopFullDataModeSimulated

// Equals "EXERCISE"
const EopFullDataModeExercise = shared.EopFullDataModeExercise

// Flag indicating Issued (I), or Predicted (P) for this record's nutation values
// (dPSI and dEpsilon).
//
// This is an alias to an internal type.
type EopFullNutationState = shared.EopFullNutationState

// Equals "I"
const EopFullNutationStateI = shared.EopFullNutationStateI

// Equals "P"
const EopFullNutationStateP = shared.EopFullNutationStateP

// Flag indicating Issued (I), or Predicted (P) for this record's polar motion
// values.
//
// This is an alias to an internal type.
type EopFullPolarMotionState = shared.EopFullPolarMotionState

// Equals "I"
const EopFullPolarMotionStateI = shared.EopFullPolarMotionStateI

// Equals "P"
const EopFullPolarMotionStateP = shared.EopFullPolarMotionStateP

// Flag indicating Issued (I), or Predicted (P) for this record”s Bulletin A
// UT1-UTC values.
//
// This is an alias to an internal type.
type EopFullUt1UtcState = shared.EopFullUt1UtcState

// Equals "I"
const EopFullUt1UtcStateI = shared.EopFullUt1UtcStateI

// Equals "P"
const EopFullUt1UtcStateP = shared.EopFullUt1UtcStateP

// An ephemeris record is a position and velocity vector identifying the location
// and trajectory of an on-orbit object at a specified time. Ephemeris points,
// including covariance, are in kilometer and second based units in a user
// specified reference frame, with ECI J2K being preferred. The EphemerisSet ID
// (esId) links all points associated with an ephemeris set. The 'EphemerisSet'
// record contains details of the underlying data and propagation models used in
// the generation of the ephemeris. Ephemeris points must be retrieved by
// specifying the parent EphemerisSet ID (esId).
//
// This is an alias to an internal type.
type EphemerisFull = shared.EphemerisFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EphemerisFullDataMode = shared.EphemerisFullDataMode

// Equals "REAL"
const EphemerisFullDataModeReal = shared.EphemerisFullDataModeReal

// Equals "TEST"
const EphemerisFullDataModeTest = shared.EphemerisFullDataModeTest

// Equals "SIMULATED"
const EphemerisFullDataModeSimulated = shared.EphemerisFullDataModeSimulated

// Equals "EXERCISE"
const EphemerisFullDataModeExercise = shared.EphemerisFullDataModeExercise

// Casualty report and evacuation request. Used to report and request support to
// evacuate friendly and enemy casualties.
//
// This is an alias to an internal type.
type EvacFull = shared.EvacFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EvacFullDataMode = shared.EvacFullDataMode

// Equals "REAL"
const EvacFullDataModeReal = shared.EvacFullDataModeReal

// Equals "TEST"
const EvacFullDataModeTest = shared.EvacFullDataModeTest

// Equals "SIMULATED"
const EvacFullDataModeSimulated = shared.EvacFullDataModeSimulated

// Equals "EXERCISE"
const EvacFullDataModeExercise = shared.EvacFullDataModeExercise

// The type of this medevac record (REQUEST, RESPONSE).
//
// This is an alias to an internal type.
type EvacFullType = shared.EvacFullType

// Equals "REQUEST"
const EvacFullTypeRequest = shared.EvacFullTypeRequest

// Equals "RESPONSE"
const EvacFullTypeResponse = shared.EvacFullTypeResponse

// This is an alias to an internal type.
type EvacFullCasualtyInfo = shared.EvacFullCasualtyInfo

// This is an alias to an internal type.
type EvacFullCasualtyInfoAllergy = shared.EvacFullCasualtyInfoAllergy

// This is an alias to an internal type.
type EvacFullCasualtyInfoCondition = shared.EvacFullCasualtyInfoCondition

// This is an alias to an internal type.
type EvacFullCasualtyInfoEtiology = shared.EvacFullCasualtyInfoEtiology

// This is an alias to an internal type.
type EvacFullCasualtyInfoHealthState = shared.EvacFullCasualtyInfoHealthState

// This is an alias to an internal type.
type EvacFullCasualtyInfoInjury = shared.EvacFullCasualtyInfoInjury

// This is an alias to an internal type.
type EvacFullCasualtyInfoMedication = shared.EvacFullCasualtyInfoMedication

// This is an alias to an internal type.
type EvacFullCasualtyInfoTreatment = shared.EvacFullCasualtyInfoTreatment

// This is an alias to an internal type.
type EvacFullCasualtyInfoVitalSignData = shared.EvacFullCasualtyInfoVitalSignData

// This is an alias to an internal type.
type EvacFullEnemyData = shared.EvacFullEnemyData

// This is an alias to an internal type.
type EvacFullRelatedDoc = shared.EvacFullRelatedDoc

// This is an alias to an internal type.
type EvacFullRelatedDocDataSourceRef = shared.EvacFullRelatedDocDataSourceRef

// Event Evolution is a unique service supporting the association of UDL records of
// various data types to a common event or activity. The associations may be a one
// time summary, aggregating sources of a past event, or of an ongoing activity
// that evolves over a period of time.
//
// This is an alias to an internal type.
type EventEvolutionFull = shared.EventEvolutionFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type EventEvolutionFullDataMode = shared.EventEvolutionFullDataMode

// Equals "REAL"
const EventEvolutionFullDataModeReal = shared.EventEvolutionFullDataModeReal

// Equals "TEST"
const EventEvolutionFullDataModeTest = shared.EventEvolutionFullDataModeTest

// Equals "SIMULATED"
const EventEvolutionFullDataModeSimulated = shared.EventEvolutionFullDataModeSimulated

// Equals "EXERCISE"
const EventEvolutionFullDataModeExercise = shared.EventEvolutionFullDataModeExercise

// This is an alias to an internal type.
type FileData = shared.FileData

// This is an alias to an internal type.
type FileDataAttributes = shared.FileDataAttributes

// This is an alias to an internal type.
type FileDataContentAction = shared.FileDataContentAction

// Equals "UPDATE"
const FileDataContentActionUpdate = shared.FileDataContentActionUpdate

// Equals "COPY"
const FileDataContentActionCopy = shared.FileDataContentActionCopy

// Equals "MOVE"
const FileDataContentActionMove = shared.FileDataContentActionMove

// This is an alias to an internal type.
type FileDataType = shared.FileDataType

// Equals "file"
const FileDataTypeFile = shared.FileDataTypeFile

// Equals "folder"
const FileDataTypeFolder = shared.FileDataTypeFolder

// Equals "summary"
const FileDataTypeSummary = shared.FileDataTypeSummary

// This is an alias to an internal type.
type FileDataParam = shared.FileDataParam

// This is an alias to an internal type.
type FileDataAttributesParam = shared.FileDataAttributesParam

// Flight Plan contains data specifying the details of an intended flight including
// schedule and expected route.
//
// This is an alias to an internal type.
type FlightPlanFull = shared.FlightPlanFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type FlightPlanFullDataMode = shared.FlightPlanFullDataMode

// Equals "REAL"
const FlightPlanFullDataModeReal = shared.FlightPlanFullDataModeReal

// Equals "TEST"
const FlightPlanFullDataModeTest = shared.FlightPlanFullDataModeTest

// Equals "SIMULATED"
const FlightPlanFullDataModeSimulated = shared.FlightPlanFullDataModeSimulated

// Equals "EXERCISE"
const FlightPlanFullDataModeExercise = shared.FlightPlanFullDataModeExercise

// Collection of air refueling events occurring on this flight.
//
// This is an alias to an internal type.
type FlightPlanFullAirRefuelEvent = shared.FlightPlanFullAirRefuelEvent

// Collection of messages associated with this flight plan indicating the severity,
// the point where the message was generated, the path (Primary, Alternate, etc.),
// and the text of the message.
//
// This is an alias to an internal type.
type FlightPlanFullFlightPlanMessage = shared.FlightPlanFullFlightPlanMessage

// Collection of point groups generated for this flight plan. Groups include point
// sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
// (ETP).
//
// This is an alias to an internal type.
type FlightPlanFullFlightPlanPointGroup = shared.FlightPlanFullFlightPlanPointGroup

// Array of point data for this Point Group.
//
// This is an alias to an internal type.
type FlightPlanFullFlightPlanPointGroupFlightPlanPoint = shared.FlightPlanFullFlightPlanPointGroupFlightPlanPoint

// Collection of waypoints associated with this flight plan.
//
// This is an alias to an internal type.
type FlightPlanFullFlightPlanWaypoint = shared.FlightPlanFullFlightPlanWaypoint

// Model representation of a location, which is a specific fixed point on the earth
// and is used to denote the locations of fixed sensors, operating units, etc.
//
// This is an alias to an internal type.
type LocationFull = shared.LocationFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type LocationFullDataMode = shared.LocationFullDataMode

// Equals "REAL"
const LocationFullDataModeReal = shared.LocationFullDataModeReal

// Equals "TEST"
const LocationFullDataModeTest = shared.LocationFullDataModeTest

// Equals "SIMULATED"
const LocationFullDataModeSimulated = shared.LocationFullDataModeSimulated

// Equals "EXERCISE"
const LocationFullDataModeExercise = shared.LocationFullDataModeExercise

// Model representation of client generated notification data. Contains a message
// type and message body field to store notification information.
//
// This is an alias to an internal type.
type NotificationFull = shared.NotificationFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type NotificationFullDataMode = shared.NotificationFullDataMode

// Equals "REAL"
const NotificationFullDataModeReal = shared.NotificationFullDataModeReal

// Equals "TEST"
const NotificationFullDataModeTest = shared.NotificationFullDataModeTest

// Equals "SIMULATED"
const NotificationFullDataModeSimulated = shared.NotificationFullDataModeSimulated

// Equals "EXERCISE"
const NotificationFullDataModeExercise = shared.NotificationFullDataModeExercise

// These services provide spacecraft positional data derived from on-board
// navigational sensors. Navigational points are provided in kilometers and in a
// user specified reference frame, with ECI J2K being preferred.
//
// This is an alias to an internal type.
type OnboardnavigationFull = shared.OnboardnavigationFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type OnboardnavigationFullDataMode = shared.OnboardnavigationFullDataMode

// Equals "REAL"
const OnboardnavigationFullDataModeReal = shared.OnboardnavigationFullDataModeReal

// Equals "TEST"
const OnboardnavigationFullDataModeTest = shared.OnboardnavigationFullDataModeTest

// Equals "SIMULATED"
const OnboardnavigationFullDataModeSimulated = shared.OnboardnavigationFullDataModeSimulated

// Equals "EXERCISE"
const OnboardnavigationFullDataModeExercise = shared.OnboardnavigationFullDataModeExercise

// The reference frame in which the sensor derived positions are provided. If the
// referenceFrame is null it is assumed to be J2000. Note that this frame is
// assumed to apply to all of the sensor data in this record. If onboard sensors
// process positional estimates in different frames then separate records should be
// generated.
//
// This is an alias to an internal type.
type OnboardnavigationFullReferenceFrame = shared.OnboardnavigationFullReferenceFrame

// Equals "J2000"
const OnboardnavigationFullReferenceFrameJ2000 = shared.OnboardnavigationFullReferenceFrameJ2000

// Equals "EFG/TDR"
const OnboardnavigationFullReferenceFrameEfgTdr = shared.OnboardnavigationFullReferenceFrameEfgTdr

// Equals "ECR/ECEF"
const OnboardnavigationFullReferenceFrameEcrEcef = shared.OnboardnavigationFullReferenceFrameEcrEcef

// Equals "TEME"
const OnboardnavigationFullReferenceFrameTeme = shared.OnboardnavigationFullReferenceFrameTeme

// Equals "ITRF"
const OnboardnavigationFullReferenceFrameItrf = shared.OnboardnavigationFullReferenceFrameItrf

// Equals "GCRF"
const OnboardnavigationFullReferenceFrameGcrf = shared.OnboardnavigationFullReferenceFrameGcrf

// Model object representing on-orbit objects or satellites in the system.
//
// This is an alias to an internal type.
type OnorbitFull = shared.OnorbitFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type OnorbitFullDataMode = shared.OnorbitFullDataMode

// Equals "REAL"
const OnorbitFullDataModeReal = shared.OnorbitFullDataModeReal

// Equals "TEST"
const OnorbitFullDataModeTest = shared.OnorbitFullDataModeTest

// Equals "SIMULATED"
const OnorbitFullDataModeSimulated = shared.OnorbitFullDataModeSimulated

// Equals "EXERCISE"
const OnorbitFullDataModeExercise = shared.OnorbitFullDataModeExercise

// This is an alias to an internal type.
type OnorbitFullAntenna = shared.OnorbitFullAntenna

// This is an alias to an internal type.
type OnorbitFullBattery = shared.OnorbitFullBattery

// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
// State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
// Heliocentric, Interplanetary, Lagrangian, Docked).
//
// This is an alias to an internal type.
type OnorbitFullCategory = shared.OnorbitFullCategory

// Equals "Unknown"
const OnorbitFullCategoryUnknown = shared.OnorbitFullCategoryUnknown

// Equals "On-Orbit"
const OnorbitFullCategoryOnOrbit = shared.OnorbitFullCategoryOnOrbit

// Equals "Decayed"
const OnorbitFullCategoryDecayed = shared.OnorbitFullCategoryDecayed

// Equals "Cataloged Without State"
const OnorbitFullCategoryCatalogedWithoutState = shared.OnorbitFullCategoryCatalogedWithoutState

// Equals "Launch Nominal"
const OnorbitFullCategoryLaunchNominal = shared.OnorbitFullCategoryLaunchNominal

// Equals "Analyst Satellite"
const OnorbitFullCategoryAnalystSatellite = shared.OnorbitFullCategoryAnalystSatellite

// Equals "Cislunar"
const OnorbitFullCategoryCislunar = shared.OnorbitFullCategoryCislunar

// Equals "Lunar"
const OnorbitFullCategoryLunar = shared.OnorbitFullCategoryLunar

// Equals "Hyperbolic"
const OnorbitFullCategoryHyperbolic = shared.OnorbitFullCategoryHyperbolic

// Equals "Heliocentric"
const OnorbitFullCategoryHeliocentric = shared.OnorbitFullCategoryHeliocentric

// Equals "Interplanetary"
const OnorbitFullCategoryInterplanetary = shared.OnorbitFullCategoryInterplanetary

// Equals "Lagrangian"
const OnorbitFullCategoryLagrangian = shared.OnorbitFullCategoryLagrangian

// Equals "Docked"
const OnorbitFullCategoryDocked = shared.OnorbitFullCategoryDocked

// An entity is a generic representation of any object within a space/SSA system
// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
// entity can have an operating unit, a location (if terrestrial), and statuses.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollection = shared.OnorbitFullEntityCollection

// Model representation of a unit or organization which operates or controls a
// space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
// belong to an organization.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionOperatingUnit = shared.OnorbitFullEntityCollectionOperatingUnit

// Remarks contain amplifying information for a specific service. The information
// may contain context and interpretations for consumer use.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionOperatingUnitOperatingUnitRemark = shared.OnorbitFullEntityCollectionOperatingUnitOperatingUnitRemark

// Details on a particular Radio Frequency (RF) band, also known as a carrier,
// which may be in use by any type of Entity for communications or operations.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionRfBand = shared.OnorbitFullEntityCollectionRfBand

// Status for a particular Entity. An entity may have multiple status records
// collected by various sources.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionStatusCollection = shared.OnorbitFullEntityCollectionStatusCollection

// Additional sub-system or capability status for the parent entity.
//
// This is an alias to an internal type.
type OnorbitFullEntityCollectionStatusCollectionSubStatusCollection = shared.OnorbitFullEntityCollectionStatusCollectionSubStatusCollection

// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
// UNKNOWN.
//
// This is an alias to an internal type.
type OnorbitFullObjectType = shared.OnorbitFullObjectType

// Equals "ROCKET BODY"
const OnorbitFullObjectTypeRocketBody = shared.OnorbitFullObjectTypeRocketBody

// Equals "DEBRIS"
const OnorbitFullObjectTypeDebris = shared.OnorbitFullObjectTypeDebris

// Equals "PAYLOAD"
const OnorbitFullObjectTypePayload = shared.OnorbitFullObjectTypePayload

// Equals "PLATFORM"
const OnorbitFullObjectTypePlatform = shared.OnorbitFullObjectTypePlatform

// Equals "MANNED"
const OnorbitFullObjectTypeManned = shared.OnorbitFullObjectTypeManned

// Equals "UNKNOWN"
const OnorbitFullObjectTypeUnknown = shared.OnorbitFullObjectTypeUnknown

// Contains details of the OnOrbit object.
//
// This is an alias to an internal type.
type OnorbitFullOnorbitDetail = shared.OnorbitFullOnorbitDetail

// This is an alias to an internal type.
type OnorbitFullSolarArray = shared.OnorbitFullSolarArray

// Model representation of information on on-orbit/spacecraft solar arrays. A
// spacecraft may have multiple solar arrays and each solar array can have multiple
// 'details' records compiled by different sources.
//
// This is an alias to an internal type.
type OnorbitFullSolarArraySolarArray = shared.OnorbitFullSolarArraySolarArray

// This is an alias to an internal type.
type OnorbitFullThruster = shared.OnorbitFullThruster

// Status information for OnorbitThruster objects.
//
// This is an alias to an internal type.
type OnorbitthrusterstatusFull = shared.OnorbitthrusterstatusFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type OnorbitthrusterstatusFullDataMode = shared.OnorbitthrusterstatusFullDataMode

// Equals "REAL"
const OnorbitthrusterstatusFullDataModeReal = shared.OnorbitthrusterstatusFullDataModeReal

// Equals "TEST"
const OnorbitthrusterstatusFullDataModeTest = shared.OnorbitthrusterstatusFullDataModeTest

// Equals "SIMULATED"
const OnorbitthrusterstatusFullDataModeSimulated = shared.OnorbitthrusterstatusFullDataModeSimulated

// Equals "EXERCISE"
const OnorbitthrusterstatusFullDataModeExercise = shared.OnorbitthrusterstatusFullDataModeExercise

// Model representation of additional detailed organization data as collected by a
// particular source.
//
// This is an alias to an internal type.
type OrganizationDetailsFull = shared.OrganizationDetailsFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type OrganizationDetailsFullDataMode = shared.OrganizationDetailsFullDataMode

// Equals "REAL"
const OrganizationDetailsFullDataModeReal = shared.OrganizationDetailsFullDataModeReal

// Equals "TEST"
const OrganizationDetailsFullDataModeTest = shared.OrganizationDetailsFullDataModeTest

// Equals "SIMULATED"
const OrganizationDetailsFullDataModeSimulated = shared.OrganizationDetailsFullDataModeSimulated

// Equals "EXERCISE"
const OrganizationDetailsFullDataModeExercise = shared.OrganizationDetailsFullDataModeExercise

// An organization such as a corporation, manufacturer, consortium, government,
// etc. An organization may have parent and child organizations as well as link to
// a former organization if this org previously existed as another organization.
//
// This is an alias to an internal type.
type OrganizationFull = shared.OrganizationFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type OrganizationFullDataMode = shared.OrganizationFullDataMode

// Equals "REAL"
const OrganizationFullDataModeReal = shared.OrganizationFullDataModeReal

// Equals "TEST"
const OrganizationFullDataModeTest = shared.OrganizationFullDataModeTest

// Equals "SIMULATED"
const OrganizationFullDataModeSimulated = shared.OrganizationFullDataModeSimulated

// Equals "EXERCISE"
const OrganizationFullDataModeExercise = shared.OrganizationFullDataModeExercise

// Model representation of Information on spacecraft SolarArrayDetails. A
// SolarArray may have multiple details records compiled by various sources.
//
// This is an alias to an internal type.
type SolarArrayDetailsFull = shared.SolarArrayDetailsFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type SolarArrayDetailsFullDataMode = shared.SolarArrayDetailsFullDataMode

// Equals "REAL"
const SolarArrayDetailsFullDataModeReal = shared.SolarArrayDetailsFullDataModeReal

// Equals "TEST"
const SolarArrayDetailsFullDataModeTest = shared.SolarArrayDetailsFullDataModeTest

// Equals "SIMULATED"
const SolarArrayDetailsFullDataModeSimulated = shared.SolarArrayDetailsFullDataModeSimulated

// Equals "EXERCISE"
const SolarArrayDetailsFullDataModeExercise = shared.SolarArrayDetailsFullDataModeExercise

// SortiePPR is a regulatory requirement where operators must obtain permissions to
// full operational access to a runway, taxiway, or airport service.
//
// This is an alias to an internal type.
type SortiePprFull = shared.SortiePprFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type SortiePprFullDataMode = shared.SortiePprFullDataMode

// Equals "REAL"
const SortiePprFullDataModeReal = shared.SortiePprFullDataModeReal

// Equals "TEST"
const SortiePprFullDataModeTest = shared.SortiePprFullDataModeTest

// Equals "SIMULATED"
const SortiePprFullDataModeSimulated = shared.SortiePprFullDataModeSimulated

// Equals "EXERCISE"
const SortiePprFullDataModeExercise = shared.SortiePprFullDataModeExercise

// Type of prior permission required (PPR) for a sortie (M - Military or C -
// Civilian). Enum: [M, C].
//
// This is an alias to an internal type.
type SortiePprFullType = shared.SortiePprFullType

// Equals "M"
const SortiePprFullTypeM = shared.SortiePprFullTypeM

// Equals "C"
const SortiePprFullTypeC = shared.SortiePprFullTypeC

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
//
// This is an alias to an internal type.
type StateVectorFull = shared.StateVectorFull

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
//
// This is an alias to an internal type.
type StateVectorFullDataMode = shared.StateVectorFullDataMode

// Equals "REAL"
const StateVectorFullDataModeReal = shared.StateVectorFullDataModeReal

// Equals "TEST"
const StateVectorFullDataModeTest = shared.StateVectorFullDataModeTest

// Equals "SIMULATED"
const StateVectorFullDataModeSimulated = shared.StateVectorFullDataModeSimulated

// Equals "EXERCISE"
const StateVectorFullDataModeExercise = shared.StateVectorFullDataModeExercise

// The reference frame of the covariance matrix elements. If the covReferenceFrame
// is null it is assumed to be J2000.
//
// This is an alias to an internal type.
type StateVectorFullCovReferenceFrame = shared.StateVectorFullCovReferenceFrame

// Equals "J2000"
const StateVectorFullCovReferenceFrameJ2000 = shared.StateVectorFullCovReferenceFrameJ2000

// Equals "UVW"
const StateVectorFullCovReferenceFrameUvw = shared.StateVectorFullCovReferenceFrameUvw

// Equals "EFG/TDR"
const StateVectorFullCovReferenceFrameEfgTdr = shared.StateVectorFullCovReferenceFrameEfgTdr

// Equals "TEME"
const StateVectorFullCovReferenceFrameTeme = shared.StateVectorFullCovReferenceFrameTeme

// Equals "GCRF"
const StateVectorFullCovReferenceFrameGcrf = shared.StateVectorFullCovReferenceFrameGcrf

// The reference frame of the cartesian orbital states. If the referenceFrame is
// null it is assumed to be J2000.
//
// This is an alias to an internal type.
type StateVectorFullReferenceFrame = shared.StateVectorFullReferenceFrame

// Equals "J2000"
const StateVectorFullReferenceFrameJ2000 = shared.StateVectorFullReferenceFrameJ2000

// Equals "EFG/TDR"
const StateVectorFullReferenceFrameEfgTdr = shared.StateVectorFullReferenceFrameEfgTdr

// Equals "ECR/ECEF"
const StateVectorFullReferenceFrameEcrEcef = shared.StateVectorFullReferenceFrameEcrEcef

// Equals "TEME"
const StateVectorFullReferenceFrameTeme = shared.StateVectorFullReferenceFrameTeme

// Equals "ITRF"
const StateVectorFullReferenceFrameItrf = shared.StateVectorFullReferenceFrameItrf

// Equals "GCRF"
const StateVectorFullReferenceFrameGcrf = shared.StateVectorFullReferenceFrameGcrf

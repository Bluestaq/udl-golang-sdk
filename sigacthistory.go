// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apiquery"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/pagination"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/resp"
)

// SigactHistoryService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewSigactHistoryService] method instead.
type SigactHistoryService struct {
	Options []option.RequestOption
}

// NewSigactHistoryService generates a new service that applies the given options
// to each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewSigactHistoryService(opts ...option.RequestOption) (r SigactHistoryService) {
	r = SigactHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *SigactHistoryService) List(ctx context.Context, query SigactHistoryListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[SigactHistoryListResponse], err error) {
	var raw *http.Response
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/sigact/history"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *SigactHistoryService) ListAutoPaging(ctx context.Context, query SigactHistoryListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[SigactHistoryListResponse] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *SigactHistoryService) Count(ctx context.Context, query SigactHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/sigact/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Provides information on the dates, actors, locations, fatalities, and types of
// all reported political violence and protest events across the world.
type SigactHistoryListResponse struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode SigactHistoryListResponseDataMode `json:"dataMode,required"`
	// Date of the report or filing.
	ReportDate time.Time `json:"reportDate,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Estimate of the accuracy that this event occurred as described/reported.
	Accuracy int64 `json:"accuracy"`
	// A list of one or more actors involved in the event.
	Actors []string `json:"actors"`
	// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
	// representation of the geometry/geography, of the image as projected on the
	// ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
	// or PUT request that also specifies a valid 'area' or 'atext' field.
	Agjson string `json:"agjson"`
	// Number of dimensions of the geometry depicted by region.
	Andims int64 `json:"andims"`
	// Optional geographical region or polygon (lat/lon pairs) of the area surrounding
	// the point of interest as projected on the ground.
	Area string `json:"area"`
	// Geographical spatial_ref_sys for region.
	Asrid int64 `json:"asrid"`
	// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
	// Text representation of the geometry/geography, of the image as projected on the
	// ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
	// if included with a POST or PUT request that also specifies a valid 'area' field.
	Atext string `json:"atext"`
	// Type of region as projected on the ground.
	Atype string `json:"atype"`
	// This is the average tone of all documents containing one or more mentions of
	// this event during the 15 minute update in which it was first seen. The score
	// ranges from -100 (extremely negative) to +100 (extremely positive). Common
	// values range between -10 and +10, with 0 indicating neutral.
	AvgTone float64 `json:"avgTone"`
	// CAMEO event codes are defined in a three-level taxonomy. For events at level
	// three in the taxonomy, this yields its level two leaf root node. For example,
	// code 0251 (Appeal for easing of administrative sanctions) would yield an
	// EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate
	// events at various resolutions of specificity. For events at levels two or one,
	// this field will be set to EventCode.
	CameoBaseCode string `json:"cameoBaseCode"`
	// This is the raw CAMEO action code describing the action that Actor1 performed
	// upon Actor2. Additional information about Cameo Codes can be obtained from the
	// GDELT project documentation here:
	// https://www.gdeltproject.org/data.html#documentation.
	CameoCode string `json:"cameoCode"`
	// Similar to EventBaseCode, this defines the root-level category the event code
	// falls under. For example, code 0251 (Appeal for easing of administrative
	// sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate
	// events at various resolutions of specificity. For events at levels two or one,
	// this field will be set to EventCode.
	CameoRootCode string `json:"cameoRootCode"`
	// MD5 value of the file. The ingest/create operation will automatically generate
	// the value.
	ChecksumValue string `json:"checksumValue"`
	// The city in or near which this event occurred.
	City string `json:"city"`
	// Number of civilians abducted in the activity.
	CivAbd int64 `json:"civAbd"`
	// Number of civilians detained in the activity.
	CivDet int64 `json:"civDet"`
	// Number of civilians killed in the activity.
	CivKia int64 `json:"civKIA"`
	// Number of civilians wounded in the activity.
	CivWound int64 `json:"civWound"`
	// 1 (high) for events where the reporting allows the coder to identify the event
	// in full. That is, events where the individual happening is described by the
	// original source in a sufficiently detailed way as to identify individual
	// incidents, i.e. separate activities of fighting in a single location:
	//
	// 2 (lower) for events where an aggregation of information was already made by the
	// source material that is impossible to undo in the coding process. Such events
	// are described by the original source only as aggregates (totals) of multiple
	// separate activities of fighting spanning over a longer period than a single,
	// clearly defined day.
	Clarity int64 `json:"clarity"`
	// Number of coalition members abducted in the activity.
	CoalAbd int64 `json:"coalAbd"`
	// Number of coalition members detained in the activity.
	CoalDet int64 `json:"coalDet"`
	// Number of coalition members killed in the activity.
	CoalKia int64 `json:"coalKIA"`
	// Number of coalition members wounded in the activity.
	CoalWound int64 `json:"coalWound"`
	// Flag indicating that this attack was of a complex or coordinated nature.
	ComplexAttack bool `json:"complexAttack"`
	// Estimate of the confidence that this event occurred.
	Confidence int64 `json:"confidence"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system, example
	// = 2018-01-01T16:00:00.123Z.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The district in which this event occurred.
	District string `json:"district"`
	// The filename of the document or report.
	DocumentFilename string `json:"documentFilename"`
	// The source of the document or report.
	DocumentSource string `json:"documentSource"`
	// Number of enemy combatants abducted in the activity.
	EnemyAbd int64 `json:"enemyAbd"`
	// Number of enemy combatants detained in the activity.
	EnemyDet int64 `json:"enemyDet"`
	// Number of enemy combatants killed in the activity.
	EnemyKia int64 `json:"enemyKIA"`
	// A description of the event.
	EventDescription string `json:"eventDescription"`
	// The approximate end time of the event, in ISO 8601 UTC format.
	EventEnd time.Time `json:"eventEnd" format:"date-time"`
	// The approximate start time of the event, in ISO 8601 UTC format.
	EventStart time.Time `json:"eventStart" format:"date-time"`
	// The type of event (e.g. Military, Natural, Political, Social, etc.).
	EventType string `json:"eventType"`
	// Size of the associated text file. Units in bytes. If filesize is provided
	// without an associated file, it defaults to 0.
	Filesize int64 `json:"filesize"`
	// Number of friendlies abducted in the activity.
	FriendlyAbd int64 `json:"friendlyAbd"`
	// Number of friendlies in the activity.
	FriendlyDet int64 `json:"friendlyDet"`
	// Number of friendlies killed in the activity.
	FriendlyKia int64 `json:"friendlyKIA"`
	// Number of friendlies wounded in the activity.
	FriendlyWound int64 `json:"friendlyWound"`
	// Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the
	// theoretical potential impact that type of event will have on the stability of a
	// country. This is known as the Goldstein Scale. NOTE: this score is based on the
	// type of event, not the specifics of the actual event record being recorded thus
	// two riots, one with 10 people and one with 10,000, will both receive the same
	// Goldstein score. This can be aggregated to various levels of time resolution to
	// yield an approximation of the stability of a location over time.
	Goldstein float64 `json:"goldstein"`
	// Flag indicating this SigAct record has an associated txt file stored in the UDL.
	// Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the
	// same as the SigAct record id. The maximum file size for this service is
	// 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
	HasAttachment bool `json:"hasAttachment"`
	// Number of Host Nation members abducted in the activity.
	HostNatAbd int64 `json:"hostNatAbd"`
	// Number of Host Nation members detained in the activity.
	HostNatDet int64 `json:"hostNatDet"`
	// Number of Host Nation members killed in the activity.
	HostNatKia int64 `json:"hostNatKIA"`
	// Number of Host Nation members wounded in the activity.
	HostNatWound int64 `json:"hostNatWound"`
	// Unique identifier assigned to each event record that uniquely identifies it in
	// the master dataset. This ID is provided for convenience of mapping to external
	// systems.
	IDNumber string `json:"idNumber"`
	// WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees
	// (negative values south of equator).
	Lat float64 `json:"lat"`
	// WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// The Military Grid Reference System is the geocoordinate standard used by NATO
	// militaries for locating points on Earth. The MGRS is derived from the Universal
	// Transverse Mercator (UTM) grid system and the Universal Polar Stereographic
	// (UPS) grid system, but uses a different labeling convention. The MGRS is used as
	// geocode for the entire Earth. Example of an milgrid coordinate, or grid
	// reference, would be 4QFJ12345678, which consists of three parts:
	//
	// &nbsp;&nbsp;4Q (grid zone designator, GZD)
	//
	// &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
	//
	// &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678,
	// in this case specifying a location with 10 m resolution).
	Milgrid string `json:"milgrid"`
	// Notes related to the documents or event.
	Notes string `json:"notes"`
	// This is the total number of source documents containing one or more mentions of
	// this event during the 15 minute update in which it was first seen. This can be
	// used as a method of assessing the importance of an event: the more discussion of
	// that event, the more likely it is to be significant.
	NumArticles int64 `json:"numArticles"`
	// This is the total number of mentions of this event across all source documents
	// during the 15 minute update in which it was first seen. Multiple references to
	// an event within a single document also contribute to this count. This can be
	// used as a method of assessing the importance of an event: the more discussion of
	// that event, the more likely it is to be significant.
	NumMentions int64 `json:"numMentions"`
	// This is the total number of information sources containing one or more mentions
	// of this event during the 15 minute update in which it was first seen. This can
	// be used as a method of assessing the importance of an event: the more discussion
	// of that event, the more likely it is to be significant.
	NumSources int64 `json:"numSources"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The province in which this event occurred.
	Province string `json:"province"`
	// Related document ids.
	RelatedDocs []SigactHistoryListResponseRelatedDoc `json:"relatedDocs"`
	// The reporting unit.
	RepUnit string `json:"repUnit"`
	// The activity the unit was engaged in.
	RepUnitActivity string `json:"repUnitActivity"`
	// The reporting unit type.
	RepUnitType string `json:"repUnitType"`
	// Number of side A members abducted in the activity.
	SideAAbd int64 `json:"sideAAbd"`
	// Number of side A members detained in the activity.
	SideADet int64 `json:"sideADet"`
	// Number of side A members killed in the activity.
	SideAkia int64 `json:"sideAKIA"`
	// Number of side A members wounded in the activity.
	SideAWound int64 `json:"sideAWound"`
	// Number of side B members abducted in the activity.
	SideBAbd int64 `json:"sideBAbd"`
	// Number of side B members detained in the activity.
	SideBDet int64 `json:"sideBDet"`
	// Number of side B members killed in the activity.
	SideBkia int64 `json:"sideBKIA"`
	// Number of side B members wounded in the activity.
	SideBWound int64 `json:"sideBWound"`
	// The source language of the significant event using the ISO 639-3, 3 character
	// code definition.
	SourceLanguage string `json:"sourceLanguage"`
	// This field records the URL or citation of the first news report it found this
	// event in. In most cases this is the first report it saw the article in, but due
	// to the timing and flow of news reports through the processing pipeline, this may
	// not always be the very first report, but is at least in the first few reports.
	SourceURL string `json:"sourceUrl"`
	// A summary of the event.
	Summary string `json:"summary"`
	// The name of the target. The target may be an individual, an entity, or a
	// country/region.
	Target string `json:"target"`
	// Area in which important military events occur or are progressing. A theater can
	// include the entirety of the airspace, land and sea area that is or that may
	// potentially become involved in war operations.
	Theater string `json:"theater"`
	// The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
	TypeOfAttack string `json:"typeOfAttack"`
	// Metadata for the response, check the presence of optional fields with the
	// [resp.Field.IsPresent] method.
	JSON struct {
		ClassificationMarking resp.Field
		DataMode              resp.Field
		ReportDate            resp.Field
		Source                resp.Field
		ID                    resp.Field
		Accuracy              resp.Field
		Actors                resp.Field
		Agjson                resp.Field
		Andims                resp.Field
		Area                  resp.Field
		Asrid                 resp.Field
		Atext                 resp.Field
		Atype                 resp.Field
		AvgTone               resp.Field
		CameoBaseCode         resp.Field
		CameoCode             resp.Field
		CameoRootCode         resp.Field
		ChecksumValue         resp.Field
		City                  resp.Field
		CivAbd                resp.Field
		CivDet                resp.Field
		CivKia                resp.Field
		CivWound              resp.Field
		Clarity               resp.Field
		CoalAbd               resp.Field
		CoalDet               resp.Field
		CoalKia               resp.Field
		CoalWound             resp.Field
		ComplexAttack         resp.Field
		Confidence            resp.Field
		CountryCode           resp.Field
		CreatedAt             resp.Field
		CreatedBy             resp.Field
		District              resp.Field
		DocumentFilename      resp.Field
		DocumentSource        resp.Field
		EnemyAbd              resp.Field
		EnemyDet              resp.Field
		EnemyKia              resp.Field
		EventDescription      resp.Field
		EventEnd              resp.Field
		EventStart            resp.Field
		EventType             resp.Field
		Filesize              resp.Field
		FriendlyAbd           resp.Field
		FriendlyDet           resp.Field
		FriendlyKia           resp.Field
		FriendlyWound         resp.Field
		Goldstein             resp.Field
		HasAttachment         resp.Field
		HostNatAbd            resp.Field
		HostNatDet            resp.Field
		HostNatKia            resp.Field
		HostNatWound          resp.Field
		IDNumber              resp.Field
		Lat                   resp.Field
		Lon                   resp.Field
		Milgrid               resp.Field
		Notes                 resp.Field
		NumArticles           resp.Field
		NumMentions           resp.Field
		NumSources            resp.Field
		Origin                resp.Field
		OrigNetwork           resp.Field
		Province              resp.Field
		RelatedDocs           resp.Field
		RepUnit               resp.Field
		RepUnitActivity       resp.Field
		RepUnitType           resp.Field
		SideAAbd              resp.Field
		SideADet              resp.Field
		SideAkia              resp.Field
		SideAWound            resp.Field
		SideBAbd              resp.Field
		SideBDet              resp.Field
		SideBkia              resp.Field
		SideBWound            resp.Field
		SourceLanguage        resp.Field
		SourceURL             resp.Field
		Summary               resp.Field
		Target                resp.Field
		Theater               resp.Field
		TypeOfAttack          resp.Field
		ExtraFields           map[string]resp.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SigactHistoryListResponse) RawJSON() string { return r.JSON.raw }
func (r *SigactHistoryListResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type SigactHistoryListResponseDataMode string

const (
	SigactHistoryListResponseDataModeReal      SigactHistoryListResponseDataMode = "REAL"
	SigactHistoryListResponseDataModeTest      SigactHistoryListResponseDataMode = "TEST"
	SigactHistoryListResponseDataModeSimulated SigactHistoryListResponseDataMode = "SIMULATED"
	SigactHistoryListResponseDataModeExercise  SigactHistoryListResponseDataMode = "EXERCISE"
)

type SigactHistoryListResponseRelatedDoc struct {
	// List of data sources related to this document.
	DataSourceRefs []SigactHistoryListResponseRelatedDocDataSourceRef `json:"dataSourceRefs"`
	// The document id of the related document.
	DocumentID string `json:"documentId"`
	// Metadata for the response, check the presence of optional fields with the
	// [resp.Field.IsPresent] method.
	JSON struct {
		DataSourceRefs resp.Field
		DocumentID     resp.Field
		ExtraFields    map[string]resp.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SigactHistoryListResponseRelatedDoc) RawJSON() string { return r.JSON.raw }
func (r *SigactHistoryListResponseRelatedDoc) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type SigactHistoryListResponseRelatedDocDataSourceRef struct {
	// Data source id.
	DataSourceID string `json:"dataSourceId"`
	// end position.
	EndPosition string `json:"endPosition"`
	// paragraph number.
	ParagraphNumber string `json:"paragraphNumber"`
	// sentence number.
	SentenceNumber string `json:"sentenceNumber"`
	// start position.
	StartPosition string `json:"startPosition"`
	// Metadata for the response, check the presence of optional fields with the
	// [resp.Field.IsPresent] method.
	JSON struct {
		DataSourceID    resp.Field
		EndPosition     resp.Field
		ParagraphNumber resp.Field
		SentenceNumber  resp.Field
		StartPosition   resp.Field
		ExtraFields     map[string]resp.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SigactHistoryListResponseRelatedDocDataSourceRef) RawJSON() string { return r.JSON.raw }
func (r *SigactHistoryListResponseRelatedDocDataSourceRef) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type SigactHistoryListParams struct {
	// Date of the report or filing. (YYYY-MM-DDTHH:MM:SS.sssZ)
	ReportDate time.Time `query:"reportDate,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f SigactHistoryListParams) IsPresent() bool { return !param.IsOmitted(f) && !f.IsNull() }

// URLQuery serializes [SigactHistoryListParams]'s query parameters as
// `url.Values`.
func (r SigactHistoryListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type SigactHistoryCountParams struct {
	// Date of the report or filing. (YYYY-MM-DDTHH:MM:SS.sssZ)
	ReportDate  time.Time        `query:"reportDate,required" format:"date-time" json:"-"`
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f SigactHistoryCountParams) IsPresent() bool { return !param.IsOmitted(f) && !f.IsNull() }

// URLQuery serializes [SigactHistoryCountParams]'s query parameters as
// `url.Values`.
func (r SigactHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

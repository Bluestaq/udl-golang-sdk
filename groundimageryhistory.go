// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apiquery"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/resp"
)

// GroundImageryHistoryService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewGroundImageryHistoryService] method instead.
type GroundImageryHistoryService struct {
	Options []option.RequestOption
}

// NewGroundImageryHistoryService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewGroundImageryHistoryService(opts ...option.RequestOption) (r GroundImageryHistoryService) {
	r = GroundImageryHistoryService{}
	r.Options = opts
	return
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *GroundImageryHistoryService) Count(ctx context.Context, query GroundImageryHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/groundimagery/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *GroundImageryHistoryService) Query(ctx context.Context, query GroundImageryHistoryQueryParams, opts ...option.RequestOption) (res *[]GroundImageryHistoryQueryResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "udl/groundimagery/history"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Imagery of terrestrial regions from on-orbit, air, and other sensors.
type GroundImageryHistoryQueryResponse struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode GroundImageryHistoryQueryResponseDataMode `json:"dataMode,required"`
	// Name of the image file.
	Filename string `json:"filename,required"`
	// Timestamp the image was captured/produced.
	ImageTime time.Time `json:"imageTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// MD5 value of the file. The ingest/create operation will automatically generate
	// the value.
	ChecksumValue string `json:"checksumValue"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Size of the image file. Units in bytes. If filesize is provided without an
	// associated file, it defaults to 0.
	Filesize int64 `json:"filesize"`
	// Optional, field indicating type of image, NITF, PNG, etc.
	Format string `json:"format"`
	// Optional ID of the sensor that produced this ground image.
	IDSensor string `json:"idSensor"`
	// Optional array of keywords for this image.
	Keywords []string `json:"keywords"`
	// Optional name/description associated with this image.
	Name string `json:"name"`
	// Description and notes of the image.
	Notes string `json:"notes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by source to indicate the sensor identifier used to
	// detect this event. This may be an internal identifier and not necessarily a
	// valid sensor ID.
	OrigSensorID string `json:"origSensorId"`
	// Geographical region or polygon (lon/lat pairs) of the image as projected on the
	// ground in geoJSON or geoText format. This is an optional convenience field only
	// used for create operations. The system will auto-detect the format (Well Known
	// Text or GeoJSON) and populate both regionText and regionGeoJSON fields
	// appropriately. When omitted, regionText or regionGeoJSON is expected.
	Region string `json:"region"`
	// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
	// representation of the geometry/geography, of the image as projected on the
	// ground. Reference: https://geojson.org/. Ignored if included with a create
	// operation that also specifies a valid region or regionText.
	RegionGeoJson string `json:"regionGeoJSON"`
	// Number of dimensions of the geometry depicted by region.
	RegionNDims int64 `json:"regionNDims"`
	// Geographical spatial_ref_sys for region.
	RegionSRid int64 `json:"regionSRid"`
	// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
	// Text representation of the geometry/geography, of the image as projected on the
	// ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
	// if included with a create operation that also specifies a valid region.
	RegionText string `json:"regionText"`
	// Type of region as projected on the ground.
	RegionType string `json:"regionType"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Optional identifier of the subject/target of the image, useful for correlating
	// multiple images of the same subject.
	SubjectID string `json:"subjectId"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Read-only time the row was updated in the database, set automatically by the
	// system on update.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who last updated the row in the database, set by the system
	// automatically and ignored on create/edit operations.
	UpdatedBy string `json:"updatedBy"`
	// Metadata for the response, check the presence of optional fields with the
	// [resp.Field.IsPresent] method.
	JSON struct {
		ClassificationMarking resp.Field
		DataMode              resp.Field
		Filename              resp.Field
		ImageTime             resp.Field
		Source                resp.Field
		ID                    resp.Field
		ChecksumValue         resp.Field
		CreatedAt             resp.Field
		CreatedBy             resp.Field
		Filesize              resp.Field
		Format                resp.Field
		IDSensor              resp.Field
		Keywords              resp.Field
		Name                  resp.Field
		Notes                 resp.Field
		Origin                resp.Field
		OrigNetwork           resp.Field
		OrigSensorID          resp.Field
		Region                resp.Field
		RegionGeoJson         resp.Field
		RegionNDims           resp.Field
		RegionSRid            resp.Field
		RegionText            resp.Field
		RegionType            resp.Field
		SourceDl              resp.Field
		SubjectID             resp.Field
		Tags                  resp.Field
		TransactionID         resp.Field
		UpdatedAt             resp.Field
		UpdatedBy             resp.Field
		ExtraFields           map[string]resp.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r GroundImageryHistoryQueryResponse) RawJSON() string { return r.JSON.raw }
func (r *GroundImageryHistoryQueryResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type GroundImageryHistoryQueryResponseDataMode string

const (
	GroundImageryHistoryQueryResponseDataModeReal      GroundImageryHistoryQueryResponseDataMode = "REAL"
	GroundImageryHistoryQueryResponseDataModeTest      GroundImageryHistoryQueryResponseDataMode = "TEST"
	GroundImageryHistoryQueryResponseDataModeSimulated GroundImageryHistoryQueryResponseDataMode = "SIMULATED"
	GroundImageryHistoryQueryResponseDataModeExercise  GroundImageryHistoryQueryResponseDataMode = "EXERCISE"
)

type GroundImageryHistoryCountParams struct {
	// Timestamp the image was captured/produced. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	ImageTime   time.Time        `query:"imageTime,required" format:"date-time" json:"-"`
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f GroundImageryHistoryCountParams) IsPresent() bool { return !param.IsOmitted(f) && !f.IsNull() }

// URLQuery serializes [GroundImageryHistoryCountParams]'s query parameters as
// `url.Values`.
func (r GroundImageryHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type GroundImageryHistoryQueryParams struct {
	// Timestamp the image was captured/produced. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	ImageTime time.Time `query:"imageTime,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f GroundImageryHistoryQueryParams) IsPresent() bool { return !param.IsOmitted(f) && !f.IsNull() }

// URLQuery serializes [GroundImageryHistoryQueryParams]'s query parameters as
// `url.Values`.
func (r GroundImageryHistoryQueryParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

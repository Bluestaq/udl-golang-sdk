// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package shared

import (
	"encoding/json"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/packages/respjson"
)

// aliased to make [param.APIUnion] private when embedding
type paramUnion = param.APIUnion

// aliased to make [param.APIObject] private when embedding
type paramObj = param.APIObject

// Beta Version Air Tasking Order: The ATO is used to task air missions, assign
// cross force tasking as well as intraservice tasking.
type AirTaskingOrderFull struct {
	// The effective begin time for this ATO in ISO 8601 UTC format with millisecond
	// precision.
	BeginTs time.Time `json:"beginTs,required" format:"date-time"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirTaskingOrderFullDataMode `json:"dataMode,required"`
	// Specifies the unique operation or exercise name, nickname, or codeword assigned
	// to a joint exercise or operation plan.
	OpExerName string `json:"opExerName,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The indicator specifying an affirmative or a negatice condition for this
	// message.
	AckReqInd string `json:"ackReqInd"`
	// Specifies textual data amplifying the data contained in the acknowledgement
	// requirement indicator (ackRedInd) field or the unit required to acknowledge.
	AckUnitInstructions string `json:"ackUnitInstructions"`
	// A collection that specifies the tasked country, tasked service, unit and mission
	// level tasking for this ATO.
	AcMsnTasking []AirTaskingOrderFullAcMsnTasking `json:"acMsnTasking"`
	// Time the row was created in the database.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database.
	CreatedBy string `json:"createdBy"`
	// The effective end time for this ATO in ISO 8601 UTC format with millisecond
	// precision.
	EndTs time.Time `json:"endTs" format:"date-time"`
	// A collection that details special instructions, important information, guidance,
	// and amplifying information regarding this ATO.
	GenText []AirTaskingOrderFullGenText `json:"genText"`
	// The month in which the message originated.
	MsgMonth string `json:"msgMonth"`
	// The identifier of the originator of the message.
	MsgOriginator string `json:"msgOriginator"`
	// The qualifier which caveats the message status.
	MsgQualifier string `json:"msgQualifier"`
	// The unique message identifier sequentially assigned by the originator.
	MsgSn string `json:"msgSN"`
	// A collection that specifies the naval flight operations for this ATO.
	NavalFltOps []AirTaskingOrderFullNavalFltOp `json:"navalFltOps"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BeginTs               respjson.Field
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		OpExerName            respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AckReqInd             respjson.Field
		AckUnitInstructions   respjson.Field
		AcMsnTasking          respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EndTs                 respjson.Field
		GenText               respjson.Field
		MsgMonth              respjson.Field
		MsgOriginator         respjson.Field
		MsgQualifier          respjson.Field
		MsgSn                 respjson.Field
		NavalFltOps           respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		RawFileUri            respjson.Field
		SourceDl              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTaskingOrderFull) RawJSON() string { return r.JSON.raw }
func (r *AirTaskingOrderFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirTaskingOrderFullDataMode string

const (
	AirTaskingOrderFullDataModeReal      AirTaskingOrderFullDataMode = "REAL"
	AirTaskingOrderFullDataModeTest      AirTaskingOrderFullDataMode = "TEST"
	AirTaskingOrderFullDataModeSimulated AirTaskingOrderFullDataMode = "SIMULATED"
	AirTaskingOrderFullDataModeExercise  AirTaskingOrderFullDataMode = "EXERCISE"
)

// Collection that specifies the tasked country, tasked service, unit and mission
// level tasking for this ATO.
type AirTaskingOrderFullAcMsnTasking struct {
	// The country code responsible for conducting this aircraft mission tasking for
	// the exercise or operation.
	CountryCode string `json:"countryCode,required"`
	// The service tasked with conducting this aircraft mission tasking for the
	// exercise or operation.
	TaskedService string `json:"taskedService,required"`
	// The designator of the unit that is tasked to perform this aircraft mission
	// tasking.
	UnitDesignator string `json:"unitDesignator,required"`
	// A collection of aircraft mission location information for this aircraft mission
	// tasking.
	AcMsnLocSeg []AirTaskingOrderFullAcMsnTaskingAcMsnLocSeg `json:"acMsnLocSeg"`
	// The readiness status expressed in time (minutes) for an aircraft to be airborne
	// after the launch order is received or the time required for a missile unit to
	// assume battle stations.
	AlertStatus int64 `json:"alertStatus"`
	// The AMC number assigned to identify one aircraft from another.
	AmcMsnNum string `json:"amcMsnNum"`
	// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees
	// (negative values south of equator) for this tasked air mission.
	DepLocLat float64 `json:"depLocLat"`
	// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian) for this tasked air mission.
	DepLocLon float64 `json:"depLocLon"`
	// The location or name specified for the departure of the tasked air mission.
	DepLocName string `json:"depLocName"`
	// The departure location specified in UTM (100 meter) coordinates for the tasked
	// air mission.
	DepLocUtm string `json:"depLocUTM"`
	// The time of departure for the tasked air mission in ISO8601 UTC format with
	// millisecond precision.
	DepTime time.Time `json:"depTime" format:"date-time"`
	// A collection of the individual aircraft assigned to this aircraft mission
	// tasking.
	IndAcTasking []AirTaskingOrderFullAcMsnTaskingIndAcTasking `json:"indACTasking"`
	// The commander responsible for the planning and execution of the forces necessary
	// to achieve desired objectives.
	MsnCommander string `json:"msnCommander"`
	// The mission number assigned to this mission.
	MsnNum string `json:"msnNum"`
	// The identifier for the composite set of missions for this operation/exercise.
	PkgID string `json:"pkgId"`
	// The code for the preferred type or designator for a tasked air mission.
	PriMsnType string `json:"priMsnType"`
	// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90
	// degrees (negative values south of equator) for this tasked air mission.
	RcvyLocLat []float64 `json:"rcvyLocLat"`
	// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180
	// degrees (negative values west of Prime Meridian) for this tasked air mission.
	RcvyLocLon []float64 `json:"rcvyLocLon"`
	// An array of locations specified for the recovery of the tasked air mission
	// represented by varying formats.
	RcvyLocName []string `json:"rcvyLocName"`
	// An array of recovery locations specified in UTM (100 meter) coordinates for the
	// tasked air mission.
	RcvyLocUtm []string `json:"rcvyLocUTM"`
	// An array of recovery times for the tasked air mission in ISO8601 UTC format with
	// millisecond precision.
	RcvyTime []time.Time `json:"rcvyTime" format:"date-time"`
	// An indicator of whether a mission is or will be a residual mission.
	ResMsnInd string `json:"resMsnInd" format:"char"`
	// The code for the alternative type of a tasked air mission.
	SecMsnType string `json:"secMsnType"`
	// The tasked units location expressed as an ICAO or a place name.
	UnitLocName string `json:"unitLocName"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		CountryCode    respjson.Field
		TaskedService  respjson.Field
		UnitDesignator respjson.Field
		AcMsnLocSeg    respjson.Field
		AlertStatus    respjson.Field
		AmcMsnNum      respjson.Field
		DepLocLat      respjson.Field
		DepLocLon      respjson.Field
		DepLocName     respjson.Field
		DepLocUtm      respjson.Field
		DepTime        respjson.Field
		IndAcTasking   respjson.Field
		MsnCommander   respjson.Field
		MsnNum         respjson.Field
		PkgID          respjson.Field
		PriMsnType     respjson.Field
		RcvyLocLat     respjson.Field
		RcvyLocLon     respjson.Field
		RcvyLocName    respjson.Field
		RcvyLocUtm     respjson.Field
		RcvyTime       respjson.Field
		ResMsnInd      respjson.Field
		SecMsnType     respjson.Field
		UnitLocName    respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTaskingOrderFullAcMsnTasking) RawJSON() string { return r.JSON.raw }
func (r *AirTaskingOrderFullAcMsnTasking) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of aircraft mission location information for this aircraft mission
// tasking.
type AirTaskingOrderFullAcMsnTaskingAcMsnLocSeg struct {
	// The start time of this mission in ISO 8601 UTC format with millisecond
	// precision.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// The code for the priority assigned to this mission.
	AirMsnPri string `json:"airMsnPri"`
	// The altitude for this mission represented as hundreds of feet above MSL.
	Alt int64 `json:"alt"`
	// The radius of the circle around the location being reported in feet.
	AreaGeoRad int64 `json:"areaGeoRad"`
	// The end time of this mission in ISO 8601 UTC format with millisecond precision.
	EndTime time.Time `json:"endTime" format:"date-time"`
	// The name that identifies the location at which this mission is to be performed.
	// This can be the name of a general target area, orbit, cap point, station, etc.
	MsnLocName string `json:"msnLocName"`
	// The alpha-numeric specified location for this mission specified as a bearing
	// angle in degrees relative to true north and a range in nautical miles (NM).
	MsnLocPtBarT string `json:"msnLocPtBarT"`
	// WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative
	// values south of equator) for this tasked air mission.
	MsnLocPtLat float64 `json:"msnLocPtLat"`
	// WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian) for this tasked air mission.
	MsnLocPtLon float64 `json:"msnLocPtLon"`
	// The location name for this mission.
	MsnLocPtName string `json:"msnLocPtName"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		StartTime    respjson.Field
		AirMsnPri    respjson.Field
		Alt          respjson.Field
		AreaGeoRad   respjson.Field
		EndTime      respjson.Field
		MsnLocName   respjson.Field
		MsnLocPtBarT respjson.Field
		MsnLocPtLat  respjson.Field
		MsnLocPtLon  respjson.Field
		MsnLocPtName respjson.Field
		ExtraFields  map[string]respjson.Field
		raw          string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTaskingOrderFullAcMsnTaskingAcMsnLocSeg) RawJSON() string { return r.JSON.raw }
func (r *AirTaskingOrderFullAcMsnTaskingAcMsnLocSeg) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection that specifies the naval flight operations for this ATO.
type AirTaskingOrderFullAcMsnTaskingIndAcTasking struct {
	// The type and model number for the aircraft. The field may specify a value of an
	// aircraft not yet assigned an aircraft code contained in the aircraft codes list.
	AcftType string `json:"acftType,required"`
	// The call sign assigned to this mission aircraft.
	CallSign string `json:"callSign"`
	// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective
	// Identification Feature (SIF).
	IffSifMode1Code string `json:"iffSifMode1Code"`
	// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective
	// Identification Feature (SIF).
	IffSifMode2Code string `json:"iffSifMode2Code"`
	// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective
	// Identification Feature (SIF).
	IffSifMode3Code string `json:"iffSifMode3Code"`
	// An optional array of link 16 octal track numbers assigned as the primary JTIDS
	// Unit (JU) address for the mission aircraft.
	JuAddress []int64 `json:"juAddress"`
	// The Link 16 abbreviated call sign assigned to the ACA. This is normally the
	// first and last letter and the last two numbers of the call sign.
	Link16CallSign string `json:"link16CallSign"`
	// The number of aircraft participating in this mission.
	NumAcft int64 `json:"numAcft"`
	// The code that indicates the ordinance mix carried on this mission aircraft.
	PriConfigCode string `json:"priConfigCode"`
	// The code for the secondary ordinance mix carried on this mission aircraft.
	SecConfigCode string `json:"secConfigCode"`
	// The TACAN channel assigned to this mission aircraft.
	TacanChan int64 `json:"tacanChan"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AcftType        respjson.Field
		CallSign        respjson.Field
		IffSifMode1Code respjson.Field
		IffSifMode2Code respjson.Field
		IffSifMode3Code respjson.Field
		JuAddress       respjson.Field
		Link16CallSign  respjson.Field
		NumAcft         respjson.Field
		PriConfigCode   respjson.Field
		SecConfigCode   respjson.Field
		TacanChan       respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTaskingOrderFullAcMsnTaskingIndAcTasking) RawJSON() string { return r.JSON.raw }
func (r *AirTaskingOrderFullAcMsnTaskingIndAcTasking) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection that details special instructions, important information, guidance,
// and amplifying information regarding this ATO.
type AirTaskingOrderFullGenText struct {
	// The free text that describes the information specific to the text indicator.
	Text string `json:"text"`
	// The indicator for the general text block. Examples include "OPENING REMARKS" and
	// "GENERAL SPINS INFORMATION".
	TextInd string `json:"textInd"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Text        respjson.Field
		TextInd     respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTaskingOrderFullGenText) RawJSON() string { return r.JSON.raw }
func (r *AirTaskingOrderFullGenText) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection that specifies the naval flight operations for this ATO.
type AirTaskingOrderFullNavalFltOp struct {
	// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
	ShipName string `json:"shipName,required"`
	// The time when flight operations begin in ISO8601 UTC format with millisecond
	// precision.
	FltOpStart time.Time `json:"fltOpStart" format:"date-time"`
	// The time when flight operations end in ISO8601 UTC format with millisecond
	// precision.
	FltOpStop time.Time `json:"fltOpStop" format:"date-time"`
	// An array of times at which an aircraft will be launched and/or recovered in
	// ISO8601 UTC format with millisecond precision.
	SchdLaunchRcvyTime []time.Time `json:"schdLaunchRcvyTime" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ShipName           respjson.Field
		FltOpStart         respjson.Field
		FltOpStop          respjson.Field
		SchdLaunchRcvyTime respjson.Field
		ExtraFields        map[string]respjson.Field
		raw                string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTaskingOrderFullNavalFltOp) RawJSON() string { return r.JSON.raw }
func (r *AirTaskingOrderFullNavalFltOp) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// The information in an Air Transport Mission contains unique identification,
// description of the mission objective, aircraft and crew assignments, mission
// alias, embarkation/debarkation cargo locations, priority, and other mission
// characteristics.
type AirTransportMissionFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirTransportMissionFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The Air Battle Plan used to coordinate and integrate air assets for this
	// mission.
	Abp string `json:"abp"`
	// The Aircraft Sortie Records linked to this mission. Do not set this field to
	// send data to the UDL. This field is set by the UDL when returning full Air
	// Transport Mission records.
	AircraftSorties []AircraftsortieFull `json:"aircraftSorties"`
	// Mission alias.
	Alias string `json:"alias"`
	// The unit the mission is allocated to.
	AllocatedUnit string `json:"allocatedUnit"`
	// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces
	// (MAF) Encode/Decode procedures.
	AmcMissionID string `json:"amcMissionId"`
	// The Aircraft and Personnel Automated Clearance System (APACS) system identifier
	// used to process and approve clearance requests.
	ApacsID string `json:"apacsId"`
	// The call sign assigned to this mission according to the Air Tasking Order (ATO).
	AtoCallSign string `json:"atoCallSign"`
	// The mission number according to the Air Tasking Order (ATO).
	AtoMissionID string `json:"atoMissionId"`
	// The call sign for this mission.
	CallSign string `json:"callSign"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Flag indicating this is a close watch mission.
	Cw bool `json:"cw"`
	// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft
	// clearance requests.
	DipWorksheetName string `json:"dipWorksheetName"`
	// The International Civil Aviation Organization (ICAO) site code of first cargo
	// pick up.
	FirstPickUp string `json:"firstPickUp"`
	// Global Decision Support System (GDSS) mission unique identifier.
	GdssMissionID string `json:"gdssMissionId"`
	// Collection of Hazardous Material information planned to be associated with this
	// Air Transport Mission.
	HazMat []AirTransportMissionFullHazMat `json:"hazMat"`
	// Highest Joint Chiefs of Staff priority of this mission.
	JcsPriority string `json:"jcsPriority"`
	// The International Civil Aviation Organization (ICAO) site code of last cargo
	// drop off.
	LastDropOff string `json:"lastDropOff"`
	// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
	LoadCategoryType string `json:"loadCategoryType"`
	// Mode-1 interrogation response (mission code), indicating mission or aircraft
	// type.
	M1 string `json:"m1"`
	// Mode-2 interrogation response (military identification code).
	M2 string `json:"m2"`
	// Mode-3/A interrogation response (aircraft identification), provides a 4-digit
	// octal identification code for the aircraft, assigned by the air traffic
	// controller. Mode-3/A is shared military/civilian use.
	M3a string `json:"m3a"`
	// Numbered Air Force (NAF) organization that owns the mission.
	Naf string `json:"naf"`
	// Air Mobility Command (AMC) mission identifier of the next air transport mission.
	// Provides a method for AMC to link air transport missions together
	// chronologically for tasking and planning purposes.
	NextAmcMissionID string `json:"nextAMCMissionId"`
	// Unique identifier of the next mission provided by the originating source.
	// Provides a method for the data provider to link air transport missions together
	// chronologically for tasking and planning purposes.
	NextMissionID string `json:"nextMissionId"`
	// Designates the location responsible for mission transportation, logistics, or
	// distribution activities for an Area of Responsibility (AOR) within USTRANSCOM.
	Node string `json:"node"`
	// A description of this mission's objective.
	Objective string `json:"objective"`
	// The name of the operation that this mission supports.
	Operation string `json:"operation"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The mission identifier provided by the originating source.
	OrigMissionID string `json:"origMissionId"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Air Mobility Command (AMC) mission identifier of the previous air transport
	// mission. Provides a method for AMC to link air transport missions together
	// chronologically for tasking and planning purposes.
	PrevAmcMissionID string `json:"prevAMCMissionId"`
	// Unique identifier of the previous air transport mission provided by the
	// originating source. Provides a method for the data provider to link air
	// transport missions together chronologically for tasking and planning purposes.
	PrevMissionID string `json:"prevMissionId"`
	// A description of this mission's purpose (e.g. why this mission needs to happen,
	// what is the mission supporting, etc.).
	Purpose string `json:"purpose"`
	// Information related to the planning, load, status, and deployment or dispatch of
	// one aircraft to carry out a mission.
	Remarks []AirTransportMissionFullRemark `json:"remarks"`
	// Collection of Requirements planned to be associated with this Air Transport
	// Mission.
	Requirements []AirTransportMissionFullRequirement `json:"requirements"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The number of minutes a mission is off schedule based on the source system's
	// business rules. Positive numbers are early, negative numbers are late.
	SourceSysDeviation float64 `json:"sourceSysDeviation"`
	// Current state of the mission.
	State string `json:"state"`
	// The type of mission (e.g. SAAM, CHNL, etc.).
	Type string `json:"type"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Abp                   respjson.Field
		AircraftSorties       respjson.Field
		Alias                 respjson.Field
		AllocatedUnit         respjson.Field
		AmcMissionID          respjson.Field
		ApacsID               respjson.Field
		AtoCallSign           respjson.Field
		AtoMissionID          respjson.Field
		CallSign              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Cw                    respjson.Field
		DipWorksheetName      respjson.Field
		FirstPickUp           respjson.Field
		GdssMissionID         respjson.Field
		HazMat                respjson.Field
		JcsPriority           respjson.Field
		LastDropOff           respjson.Field
		LoadCategoryType      respjson.Field
		M1                    respjson.Field
		M2                    respjson.Field
		M3a                   respjson.Field
		Naf                   respjson.Field
		NextAmcMissionID      respjson.Field
		NextMissionID         respjson.Field
		Node                  respjson.Field
		Objective             respjson.Field
		Operation             respjson.Field
		Origin                respjson.Field
		OrigMissionID         respjson.Field
		OrigNetwork           respjson.Field
		PrevAmcMissionID      respjson.Field
		PrevMissionID         respjson.Field
		Purpose               respjson.Field
		Remarks               respjson.Field
		Requirements          respjson.Field
		SourceDl              respjson.Field
		SourceSysDeviation    respjson.Field
		State                 respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTransportMissionFull) RawJSON() string { return r.JSON.raw }
func (r *AirTransportMissionFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirTransportMissionFullDataMode string

const (
	AirTransportMissionFullDataModeReal      AirTransportMissionFullDataMode = "REAL"
	AirTransportMissionFullDataModeTest      AirTransportMissionFullDataMode = "TEST"
	AirTransportMissionFullDataModeSimulated AirTransportMissionFullDataMode = "SIMULATED"
	AirTransportMissionFullDataModeExercise  AirTransportMissionFullDataMode = "EXERCISE"
)

// Collection of Hazardous Material information planned to be associated with this
// Air Transport Mission.
type AirTransportMissionFullHazMat struct {
	// Comma delimited list of Note IDs for Item Class Segregation groups, specific to
	// GDSS systems.
	ApplicableNotes string `json:"applicableNotes"`
	// Compatibility group code used to specify the controls for the transportation and
	// storage of hazardous materials according to the Hazardous Materials Regulations
	// issued by the U.S. Department of Transportation.
	Cgc string `json:"cgc"`
	// Comma delimited list of Note IDs for compatibility groups, specific to GDSS
	// systems.
	Cgn string `json:"cgn"`
	// Class and division of the hazardous material according to the Hazardous
	// Materials Regulations issued by the U.S. Department of Transportation.
	ClassDiv float64 `json:"classDiv"`
	// The hazMat identifier provided by the originating source.
	ExtHazMatID string `json:"extHazMatId"`
	// United Nations proper shipping name of the hazardous material according to the
	// Hazardous Materials Regulations issued by the U.S. Department of Transportation.
	ItemName string `json:"itemName"`
	// Net explosive weight of the hazardous material, in kilograms.
	NetExpWt float64 `json:"netExpWt"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// hazardous material is unloaded.
	OffIcao string `json:"offICAO"`
	// Itinerary number that identifies where the hazardous material is unloaded.
	OffItin int64 `json:"offItin"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// hazardous material is loaded.
	OnIcao string `json:"onICAO"`
	// Itinerary number that identifies where the hazardous material is loaded.
	OnItin int64 `json:"onItin"`
	// Number of pieces of hazardous cargo.
	Pieces int64 `json:"pieces"`
	// Flag indicating if hazardous material is associated with this air transport
	// mission. Possible values are P (planned to be associated with the mission) or A
	// (actually associated with the mission). Enum: [P, A].
	Planned string `json:"planned"`
	// United Nations number or North America number that identifies hazardous
	// materials according to the Hazardous Materials Regulations issued by the U.S.
	// Department of Transportation.
	UnNum string `json:"unNum"`
	// Total weight of hazardous cargo, including non-explosive parts, in kilograms.
	Weight float64 `json:"weight"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ApplicableNotes respjson.Field
		Cgc             respjson.Field
		Cgn             respjson.Field
		ClassDiv        respjson.Field
		ExtHazMatID     respjson.Field
		ItemName        respjson.Field
		NetExpWt        respjson.Field
		OffIcao         respjson.Field
		OffItin         respjson.Field
		OnIcao          respjson.Field
		OnItin          respjson.Field
		Pieces          respjson.Field
		Planned         respjson.Field
		UnNum           respjson.Field
		Weight          respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTransportMissionFullHazMat) RawJSON() string { return r.JSON.raw }
func (r *AirTransportMissionFullHazMat) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of Remarks associated with this Air Transport Mission.
type AirTransportMissionFullRemark struct {
	// Date the remark was published, in ISO 8601 UTC format, with millisecond
	// precision.
	Date time.Time `json:"date" format:"date-time"`
	// Global Decision Support System (GDSS) remark identifier.
	GdssRemarkID string `json:"gdssRemarkId"`
	// If the remark is sortie specific, this is the number of the sortie it applies
	// to.
	ItineraryNum int64 `json:"itineraryNum"`
	// Text of the remark.
	Text string `json:"text"`
	// Remark type.
	Type string `json:"type"`
	// User who published the remark.
	User string `json:"user"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Date         respjson.Field
		GdssRemarkID respjson.Field
		ItineraryNum respjson.Field
		Text         respjson.Field
		Type         respjson.Field
		User         respjson.Field
		ExtraFields  map[string]respjson.Field
		raw          string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTransportMissionFullRemark) RawJSON() string { return r.JSON.raw }
func (r *AirTransportMissionFullRemark) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of Requirements planned to be associated with this Air Transport
// Mission.
type AirTransportMissionFullRequirement struct {
	// Total weight of the bulk cargo, in kilograms.
	BulkWeight float64 `json:"bulkWeight"`
	// Earliest available date the cargo can be picked up, in ISO 8601 UTC format with
	// millisecond precision.
	Ead time.Time `json:"ead" format:"date-time"`
	// Global Decision Support System (GDSS) mission requirement identifier.
	GdssReqID string `json:"gdssReqId"`
	// Latest available date the cargo may be delivered, in ISO 8601 UTC format with
	// millisecond precision.
	Lad time.Time `json:"lad" format:"date-time"`
	// Number of ambulatory patients tasked for the mission.
	NumAmbulatory int64 `json:"numAmbulatory"`
	// Number of attendants tasked for the mission.
	NumAttendant int64 `json:"numAttendant"`
	// Number of litter patients tasked for the mission.
	NumLitter int64 `json:"numLitter"`
	// Number of passengers associated with the mission.
	NumPax int64 `json:"numPax"`
	// Identifier of the offload itinerary location.
	OffloadID int64 `json:"offloadId"`
	// Offload location code.
	OffloadLoCode string `json:"offloadLOCode"`
	// Identifier of the onload itinerary location.
	OnloadID int64 `json:"onloadId"`
	// Onload location code.
	OnloadLoCode string `json:"onloadLOCode"`
	// Identification number of the Operation Plan (OPLAN) associated with this
	// mission.
	Oplan string `json:"oplan"`
	// Total weight of the outsize cargo, in kilograms.
	OutsizeWeight float64 `json:"outsizeWeight"`
	// Total weight of the oversized cargo, in kilograms.
	OversizeWeight float64 `json:"oversizeWeight"`
	// Project name.
	ProjName string `json:"projName"`
	// Transportation requirement number.
	TransReqNum string `json:"transReqNum"`
	// Unit line number.
	Uln string `json:"uln"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BulkWeight     respjson.Field
		Ead            respjson.Field
		GdssReqID      respjson.Field
		Lad            respjson.Field
		NumAmbulatory  respjson.Field
		NumAttendant   respjson.Field
		NumLitter      respjson.Field
		NumPax         respjson.Field
		OffloadID      respjson.Field
		OffloadLoCode  respjson.Field
		OnloadID       respjson.Field
		OnloadLoCode   respjson.Field
		Oplan          respjson.Field
		OutsizeWeight  respjson.Field
		OversizeWeight respjson.Field
		ProjName       respjson.Field
		TransReqNum    respjson.Field
		Uln            respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTransportMissionFullRequirement) RawJSON() string { return r.JSON.raw }
func (r *AirTransportMissionFullRequirement) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// General aircraft designation, characteristics, and capabilities. The aircraft
// schema contains static data of specific aircraft, including tail number, cruise
// speed, max speed, and minimum required runway length, etc.
type AircraftFull struct {
	// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15
	// EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained
	// to, MIL-STD-6016 environment dependent specific type designations.
	AircraftMds string `json:"aircraftMDS,required"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AircraftFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The category of aircraft (e.g. M = Military, C = Commercial).
	Category string `json:"category"`
	// The Air Force major command (MAJCOM) overseeing the aircraft.
	Command string `json:"command"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The cruise speed of the aircraft, in kilometers/hour.
	CruiseSpeed float64 `json:"cruiseSpeed"`
	// Military data network data transfer device ID for this aircraft.
	Dtd string `json:"dtd"`
	// An entity is a generic representation of any object within a space/SSA system
	// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
	// entity can have an operating unit, a location (if terrestrial), and statuses.
	Entity EntityFull `json:"entity"`
	// ID of the parent entity for this aircraft.
	IDEntity string `json:"idEntity"`
	// The maximum air speed of the aircraft, in kilometers/hour.
	MaxSpeed float64 `json:"maxSpeed"`
	// The minimum length of runway required to land this aircraft, in feet. Note: The
	// corresponding equivalent field is not converted by the UDL and may or may not be
	// supplied by the provider. The provider/consumer is responsible for all unit
	// conversions.
	MinReqRunwayFt int64 `json:"minReqRunwayFt"`
	// The minimum length of runway required to land this aircraft, in meters. Note:
	// The corresponding equivalent field is not converted by the UDL and may or may
	// not be supplied by the provider. The provider/consumer is responsible for all
	// unit conversions.
	MinReqRunwayM int64 `json:"minReqRunwayM"`
	// The nominal turnaround time for this aircraft, in minutes.
	NominalTaTime int64 `json:"nominalTATime"`
	// Optional notes/comments for this aircraft.
	Notes string `json:"notes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The wing or unit that owns the aircraft.
	Owner string `json:"owner"`
	// Full serial number of the aircraft.
	SerialNumber string `json:"serialNumber"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The tail number of this aircraft.
	TailNumber string `json:"tailNumber"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AircraftMds           respjson.Field
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Category              respjson.Field
		Command               respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CruiseSpeed           respjson.Field
		Dtd                   respjson.Field
		Entity                respjson.Field
		IDEntity              respjson.Field
		MaxSpeed              respjson.Field
		MinReqRunwayFt        respjson.Field
		MinReqRunwayM         respjson.Field
		NominalTaTime         respjson.Field
		Notes                 respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Owner                 respjson.Field
		SerialNumber          respjson.Field
		SourceDl              respjson.Field
		TailNumber            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AircraftFull) RawJSON() string { return r.JSON.raw }
func (r *AircraftFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AircraftFullDataMode string

const (
	AircraftFullDataModeReal      AircraftFullDataMode = "REAL"
	AircraftFullDataModeTest      AircraftFullDataMode = "TEST"
	AircraftFullDataModeSimulated AircraftFullDataMode = "SIMULATED"
	AircraftFullDataModeExercise  AircraftFullDataMode = "EXERCISE"
)

// Information related to the planning, load, status, and deployment or dispatch of
// one aircraft to carry out a mission.
type AircraftsortieFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AircraftsortieFullDataMode `json:"dataMode,required"`
	// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601
	// UTC format with millisecond precision.
	PlannedDepTime time.Time `json:"plannedDepTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
	ActualArrTime time.Time `json:"actualArrTime" format:"date-time"`
	// The actual time the Aircraft comes to a complete stop in its parking position,
	// in ISO 8601 UTC format with millisecond precision.
	ActualBlockInTime time.Time `json:"actualBlockInTime" format:"date-time"`
	// The actual time the Aircraft begins to taxi from its parking position, in ISO
	// 8601 UTC format with millisecond precision.
	ActualBlockOutTime time.Time `json:"actualBlockOutTime" format:"date-time"`
	// The actual departure time, in ISO 8601 UTC format.
	ActualDepTime time.Time `json:"actualDepTime" format:"date-time"`
	// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
	AircraftAdsb string `json:"aircraftADSB"`
	// Alternate Aircraft Identifier provided by source.
	AircraftAltID string `json:"aircraftAltId"`
	// Aircraft event text.
	AircraftEvent string `json:"aircraftEvent"`
	// The aircraft Model Design Series designation assigned to this sortie.
	AircraftMds string `json:"aircraftMDS"`
	// Remarks concerning the aircraft.
	AircraftRemarks string `json:"aircraftRemarks"`
	// The amount of time allowed between launch order and takeoff, in seconds.
	AlertStatus int64 `json:"alertStatus"`
	// The Alert Status code.
	AlertStatusCode string `json:"alertStatusCode"`
	// The Air Mobility Command (AMC) mission number of the sortie.
	AmcMsnNum string `json:"amcMsnNum"`
	// The type of mission (e.g. SAAM, CHNL, etc.).
	AmcMsnType string `json:"amcMsnType"`
	// The arrival Federal Aviation Administration (FAA) code of this sortie.
	ArrFaa string `json:"arrFAA"`
	// The arrival International Aviation Transport Association (IATA) code of this
	// sortie.
	ArrIata string `json:"arrIATA"`
	// The arrival International Civil Aviation Organization (ICAO) of this sortie.
	ArrIcao string `json:"arrICAO"`
	// The itinerary identifier of the arrival location.
	ArrItinerary int64 `json:"arrItinerary"`
	// Purpose code at the arrival location of this sortie.
	ArrPurposeCode string `json:"arrPurposeCode"`
	// The call sign assigned to the aircraft on this sortie.
	CallSign string `json:"callSign"`
	// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1,
	// etc.) currently on board the aircraft. Configuration meanings are determined by
	// the data source.
	CargoConfig string `json:"cargoConfig"`
	// The last name of the aircraft commander.
	CommanderName string `json:"commanderName"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Crew Services.
	Crew CrewFull `json:"crew"`
	// The current state of this sortie.
	CurrentState string `json:"currentState"`
	// The primary delay code.
	DelayCode string `json:"delayCode"`
	// The departure Federal Aviation Administration (FAA) code of this sortie.
	DepFaa string `json:"depFAA"`
	// The departure International Aviation Transport Association (IATA) code of this
	// sortie.
	DepIata string `json:"depIATA"`
	// The departure International Civil Aviation Organization (ICAO) of this sortie.
	DepIcao string `json:"depICAO"`
	// The itinerary identifier of the departure location.
	DepItinerary int64 `json:"depItinerary"`
	// Purpose code at the departure location of this sortie.
	DepPurposeCode string `json:"depPurposeCode"`
	// Due home date by which the aircraft must return to its home station, in ISO 8601
	// UTC format with millisecond precision.
	Dhd time.Time `json:"dhd" format:"date-time"`
	// Reason the aircraft must return to home station by its due home date.
	DhdReason string `json:"dhdReason"`
	// The current estimated time that the Aircraft is planned to arrive, in ISO 8601
	// UTC format with millisecond precision.
	EstArrTime time.Time `json:"estArrTime" format:"date-time"`
	// The estimated time the Aircraft will come to a complete stop in its parking
	// position, in ISO 8601 UTC format with millisecond precision.
	EstBlockInTime time.Time `json:"estBlockInTime" format:"date-time"`
	// The estimated time the Aircraft will begin to taxi from its parking position, in
	// ISO 8601 UTC format with millisecond precision.
	EstBlockOutTime time.Time `json:"estBlockOutTime" format:"date-time"`
	// The current estimated time that the Aircraft is planned to depart, in ISO 8601
	// UTC format with millisecond precision.
	EstDepTime time.Time `json:"estDepTime" format:"date-time"`
	// Name of the uploaded PDF.
	Filename string `json:"filename"`
	// Size of the supporting PDF, in bytes.
	Filesize int64 `json:"filesize"`
	// The planned flight time for this sortie, in minutes.
	FlightTime float64 `json:"flightTime"`
	// Desk phone number of the flight manager assigned to the sortie. Null when no
	// flight manager is assigned.
	FmDeskNum string `json:"fmDeskNum"`
	// Last name of the flight manager assigned to the sortie. Null when no flight
	// manager is assigned.
	FmName string `json:"fmName"`
	// Mass of fuel required for this leg of the sortie, in kilograms.
	FuelReq float64 `json:"fuelReq"`
	// Scheduled ground time, in minutes.
	GndTime float64 `json:"gndTime"`
	// Unique identifier of the aircraft.
	IDAircraft string `json:"idAircraft"`
	// The unique identifier of the mission to which this sortie is assigned.
	IDMission string `json:"idMission"`
	// Joint Chiefs of Staff priority of this sortie.
	JcsPriority string `json:"jcsPriority"`
	// The leg number of this sortie.
	LegNum int64 `json:"legNum"`
	// The external system line number of this sortie.
	LineNumber int64 `json:"lineNumber"`
	// The mission ID according to the source system.
	MissionID string `json:"missionId"`
	// Time the associated mission data was last updated in relation to the aircraft
	// assignment, in ISO 8601 UTC format with millisecond precision. If this time is
	// coming from an external system, it may not sync with the latest mission time
	// associated to this record.
	MissionUpdate time.Time `json:"missionUpdate" format:"date-time"`
	// Remarks concerning the sortie objective.
	ObjectiveRemarks string `json:"objectiveRemarks"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The sortie identifier provided by the originating source.
	OrigSortieID string `json:"origSortieId"`
	// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
	OxyOnCrew float64 `json:"oxyOnCrew"`
	// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
	OxyOnPax float64 `json:"oxyOnPax"`
	// Liquid oxygen required on the aircraft for the crew compartment, in liters.
	OxyReqCrew float64 `json:"oxyReqCrew"`
	// Liquid oxygen required on the aircraft for the troop compartment, in liters.
	OxyReqPax float64 `json:"oxyReqPax"`
	// The status of the supporting document.
	//
	// Any of "PUBLISHED", "DELETED", "UPDATED", "READ".
	PaperStatus AircraftsortieFullPaperStatus `json:"paperStatus"`
	// The version number of the crew paper.
	PapersVersion string `json:"papersVersion"`
	// The POI parking location.
	ParkingLoc string `json:"parkingLoc"`
	// The number of passengers tasked for this sortie.
	Passengers int64 `json:"passengers"`
	// The scheduled time that the Aircraft sortie is planned to arrive, in ISO 8601
	// UTC format with millisecond precision.
	PlannedArrTime time.Time `json:"plannedArrTime" format:"date-time"`
	// The prior permission required (PPR) status.
	//
	// Any of "NOT REQUIRED", "REQUIRED NOT REQUESTED", "GRANTED", "PENDING".
	PprStatus AircraftsortieFullPprStatus `json:"pprStatus"`
	// The planned primary Standard Conventional Load of the aircraft for this sortie.
	PrimaryScl string `json:"primarySCL"`
	// When crew papers are associated to this sortie, the system updates this value.
	// This field is the URI location in the document repository of that raw file. To
	// download the raw file, prepend https://udl-hostname/scs/download?id= to this
	// field's value.
	RawFileUri string `json:"rawFileURI"`
	// Aircraft configuration required for the mission.
	ReqConfig string `json:"reqConfig"`
	// Remarks concerning the results of this sortie.
	ResultRemarks string `json:"resultRemarks"`
	// Type of Ravens required for this sortie (N - None, R - Raven (Security Team)
	// required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required
	// (Ground time over 6 hours)).
	//
	// Any of "N", "R", "C6", "R6".
	RvnReq AircraftsortieFullRvnReq `json:"rvnReq"`
	// Remarks concerning the schedule.
	ScheduleRemarks string `json:"scheduleRemarks"`
	// The planned secondary Standard Conventional Load of the aircraft for this
	// sortie.
	SecondaryScl string `json:"secondarySCL"`
	// Indicates the group responsible for recording the completion time of the next
	// event in the sequence of events assigned to this sortie (e.g. OPS - Operations,
	// MX - Maintenance, TR - Transportation, etc.).
	Soe string `json:"soe"`
	// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex.
	// YYYY-MM-DD).
	SortieDate time.Time       `json:"sortieDate" format:"date"`
	SortiePpr  []SortiePprFull `json:"sortiePPR"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The tail number of the aircraft assigned to this sortie.
	TailNumber string `json:"tailNumber"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		PlannedDepTime        respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		ActualArrTime         respjson.Field
		ActualBlockInTime     respjson.Field
		ActualBlockOutTime    respjson.Field
		ActualDepTime         respjson.Field
		AircraftAdsb          respjson.Field
		AircraftAltID         respjson.Field
		AircraftEvent         respjson.Field
		AircraftMds           respjson.Field
		AircraftRemarks       respjson.Field
		AlertStatus           respjson.Field
		AlertStatusCode       respjson.Field
		AmcMsnNum             respjson.Field
		AmcMsnType            respjson.Field
		ArrFaa                respjson.Field
		ArrIata               respjson.Field
		ArrIcao               respjson.Field
		ArrItinerary          respjson.Field
		ArrPurposeCode        respjson.Field
		CallSign              respjson.Field
		CargoConfig           respjson.Field
		CommanderName         respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Crew                  respjson.Field
		CurrentState          respjson.Field
		DelayCode             respjson.Field
		DepFaa                respjson.Field
		DepIata               respjson.Field
		DepIcao               respjson.Field
		DepItinerary          respjson.Field
		DepPurposeCode        respjson.Field
		Dhd                   respjson.Field
		DhdReason             respjson.Field
		EstArrTime            respjson.Field
		EstBlockInTime        respjson.Field
		EstBlockOutTime       respjson.Field
		EstDepTime            respjson.Field
		Filename              respjson.Field
		Filesize              respjson.Field
		FlightTime            respjson.Field
		FmDeskNum             respjson.Field
		FmName                respjson.Field
		FuelReq               respjson.Field
		GndTime               respjson.Field
		IDAircraft            respjson.Field
		IDMission             respjson.Field
		JcsPriority           respjson.Field
		LegNum                respjson.Field
		LineNumber            respjson.Field
		MissionID             respjson.Field
		MissionUpdate         respjson.Field
		ObjectiveRemarks      respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigSortieID          respjson.Field
		OxyOnCrew             respjson.Field
		OxyOnPax              respjson.Field
		OxyReqCrew            respjson.Field
		OxyReqPax             respjson.Field
		PaperStatus           respjson.Field
		PapersVersion         respjson.Field
		ParkingLoc            respjson.Field
		Passengers            respjson.Field
		PlannedArrTime        respjson.Field
		PprStatus             respjson.Field
		PrimaryScl            respjson.Field
		RawFileUri            respjson.Field
		ReqConfig             respjson.Field
		ResultRemarks         respjson.Field
		RvnReq                respjson.Field
		ScheduleRemarks       respjson.Field
		SecondaryScl          respjson.Field
		Soe                   respjson.Field
		SortieDate            respjson.Field
		SortiePpr             respjson.Field
		SourceDl              respjson.Field
		TailNumber            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AircraftsortieFull) RawJSON() string { return r.JSON.raw }
func (r *AircraftsortieFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AircraftsortieFullDataMode string

const (
	AircraftsortieFullDataModeReal      AircraftsortieFullDataMode = "REAL"
	AircraftsortieFullDataModeTest      AircraftsortieFullDataMode = "TEST"
	AircraftsortieFullDataModeSimulated AircraftsortieFullDataMode = "SIMULATED"
	AircraftsortieFullDataModeExercise  AircraftsortieFullDataMode = "EXERCISE"
)

// The status of the supporting document.
type AircraftsortieFullPaperStatus string

const (
	AircraftsortieFullPaperStatusPublished AircraftsortieFullPaperStatus = "PUBLISHED"
	AircraftsortieFullPaperStatusDeleted   AircraftsortieFullPaperStatus = "DELETED"
	AircraftsortieFullPaperStatusUpdated   AircraftsortieFullPaperStatus = "UPDATED"
	AircraftsortieFullPaperStatusRead      AircraftsortieFullPaperStatus = "READ"
)

// The prior permission required (PPR) status.
type AircraftsortieFullPprStatus string

const (
	AircraftsortieFullPprStatusNotRequired          AircraftsortieFullPprStatus = "NOT REQUIRED"
	AircraftsortieFullPprStatusRequiredNotRequested AircraftsortieFullPprStatus = "REQUIRED NOT REQUESTED"
	AircraftsortieFullPprStatusGranted              AircraftsortieFullPprStatus = "GRANTED"
	AircraftsortieFullPprStatusPending              AircraftsortieFullPprStatus = "PENDING"
)

// Type of Ravens required for this sortie (N - None, R - Raven (Security Team)
// required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required
// (Ground time over 6 hours)).
type AircraftsortieFullRvnReq string

const (
	AircraftsortieFullRvnReqN  AircraftsortieFullRvnReq = "N"
	AircraftsortieFullRvnReqR  AircraftsortieFullRvnReq = "R"
	AircraftsortieFullRvnReqC6 AircraftsortieFullRvnReq = "C6"
	AircraftsortieFullRvnReqR6 AircraftsortieFullRvnReq = "R6"
)

// Aircraft readiness and status data. Contains the dynamic data associated with
// the specific aircraft status, either in-flight or on-ground, including remaining
// fuel, mission readiness, and inventory, etc.
type AircraftstatusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AircraftstatusFullDataMode `json:"dataMode,required"`
	// Unique identifier of the aircraft.
	IDAircraft string `json:"idAircraft,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// List of additional operational systems on this aircraft beyond what is normally
	// available.
	AdditionalSys []string `json:"additionalSys"`
	// The status of the air-to-air weapon release system (OPERATIONAL,
	// NON-OPERATIONAL, OFF).
	//
	// Any of "OPERATIONAL", "NON-OPERATIONAL", "OFF".
	AirToAirStatus AircraftstatusFullAirToAirStatus `json:"airToAirStatus"`
	// The status of the air-to-ground weapon release system (OPERATIONAL,
	// NON-OPERATIONAL, OFF).
	//
	// Any of "OPERATIONAL", "NON-OPERATIONAL", "OFF".
	AirToGroundStatus AircraftstatusFullAirToGroundStatus `json:"airToGroundStatus"`
	// Aircraft alpha status code that indicates the aircraft maintenance status
	// estimated by the pilot.
	AlphaStatusCode string `json:"alphaStatusCode"`
	// Alternate Aircraft Identifier provided by source.
	AltAircraftID string `json:"altAircraftId"`
	// The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED,
	// DECONTAMINATED, UNKNOWN, etc.).
	ContaminationStatus string `json:"contaminationStatus"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The International Civil Aviation Organization (ICAO) code at which this aircraft
	// is currently located or has most recently departed, if airborne.
	CurrentIcao string `json:"currentICAO"`
	// The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED,
	// AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
	CurrentState string `json:"currentState"`
	// The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC
	// format with millisecond precision.
	EarliestTaEndTime time.Time `json:"earliestTAEndTime" format:"date-time"`
	// The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format
	// with millisecond precision. This is the estimated time when the issue will be
	// resolved.
	Etic time.Time `json:"etic" format:"date-time"`
	// Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the
	// aircraft.
	FlightPhase string `json:"flightPhase"`
	// The mass of fuel remaining on the aircraft, in kilograms.
	Fuel int64 `json:"fuel"`
	// Used in conjunction with the fuel field to indicate either burnable or offload
	// fuel.
	FuelFunction string `json:"fuelFunction"`
	// The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL,
	// OTHER, REQUESTED, etc.).
	FuelStatus string `json:"fuelStatus"`
	// US Air Force geographic location code of the airfield where the aircraft is
	// located.
	GeoLoc string `json:"geoLoc"`
	// The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR,
	// etc.).
	GroundStatus string `json:"groundStatus"`
	// Flag indicating that the aircraft is capable of making at least one gun pass.
	GunCapable bool `json:"gunCapable"`
	// The upper bound of the estimated number of gun rounds available.
	GunRdsMax int64 `json:"gunRdsMax"`
	// The lower bound of the estimated number of gun rounds available.
	GunRdsMin int64 `json:"gunRdsMin"`
	// The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
	GunRdsType string `json:"gunRdsType"`
	// If not airborne, the unique identifier of the installation currently hosting the
	// aircraft.
	IDAirfield string `json:"idAirfield"`
	// Unique identifier of the Point of Interest (POI) record related to this aircraft
	// status. This will generally represent the location of an aircraft on the ground.
	IDPoi string `json:"idPOI"`
	// Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9
	// SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).
	// Intended as, but not constrained to, MIL-STD-6016 environment dependent
	// specific/store type designations. This array must be the same length as
	// inventoryMin and inventoryMax.
	Inventory []string `json:"inventory"`
	// Array of the upper bound quantity for each of the inventory items. The values in
	// this array must correspond to position index in the inventory array. This array
	// must be the same length as inventory and inventoryMin.
	InventoryMax []int64 `json:"inventoryMax"`
	// Array of the lower bound quantity for each of the inventory items. The values in
	// this array must correspond to position index in the inventory array. This array
	// must be the same length as inventory and inventoryMax.
	InventoryMin []int64 `json:"inventoryMin"`
	// Date when the military aircraft inspection was last performed, in ISO 8601 UTC
	// format with millisecond precision.
	LastInspectionDate time.Time `json:"lastInspectionDate" format:"date-time"`
	// The name or ID of the external user that updated this status.
	LastUpdatedBy string `json:"lastUpdatedBy"`
	// Military aircraft maintenance point of contact for this aircraft.
	MaintPoc string `json:"maintPoc"`
	// Indicates the priority of the maintenance effort.
	MaintPriority string `json:"maintPriority"`
	// The maintenance status of the aircraft.
	MaintStatus string `json:"maintStatus"`
	// Indicates the maintenance discrepancy that drives the current maintenance
	// status.
	MaintStatusDriver string `json:"maintStatusDriver"`
	// The time of the last maintenance status update, in ISO 8601 UTC format with
	// millisecond precision.
	MaintStatusUpdate time.Time `json:"maintStatusUpdate" format:"date-time"`
	// The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
	MissionReadiness string `json:"missionReadiness"`
	// Maintenance pacing remarks assocociated with this aircraft.
	MxRemark string `json:"mxRemark"`
	// The International Civil Aviation Organization (ICAO) code of the next
	// destination of this aircraft.
	NextIcao string `json:"nextICAO"`
	// Optional notes/comments concerning this aircraft status.
	Notes string `json:"notes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The parking location of this aircraft.
	ParkLocation string `json:"parkLocation"`
	// The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
	ParkLocationSystem string `json:"parkLocationSystem"`
	// The International Civil Aviation Organization (ICAO) code at which this aircraft
	// was previously located.
	PreviousIcao string `json:"previousICAO"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The turnaround start time, in ISO 8601 UTC format with millisecond precision.
	TaStartTime time.Time `json:"taStartTime" format:"date-time"`
	// Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC
	// format with millisecond precision. This is the estimated time when the course of
	// action to resolve the issue will be determined.
	TroubleshootEtic time.Time `json:"troubleshootEtic" format:"date-time"`
	// List of unavailable systems that would normally be on this aircraft.
	UnavailableSys []string `json:"unavailableSys"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDAircraft            respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AdditionalSys         respjson.Field
		AirToAirStatus        respjson.Field
		AirToGroundStatus     respjson.Field
		AlphaStatusCode       respjson.Field
		AltAircraftID         respjson.Field
		ContaminationStatus   respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CurrentIcao           respjson.Field
		CurrentState          respjson.Field
		EarliestTaEndTime     respjson.Field
		Etic                  respjson.Field
		FlightPhase           respjson.Field
		Fuel                  respjson.Field
		FuelFunction          respjson.Field
		FuelStatus            respjson.Field
		GeoLoc                respjson.Field
		GroundStatus          respjson.Field
		GunCapable            respjson.Field
		GunRdsMax             respjson.Field
		GunRdsMin             respjson.Field
		GunRdsType            respjson.Field
		IDAirfield            respjson.Field
		IDPoi                 respjson.Field
		Inventory             respjson.Field
		InventoryMax          respjson.Field
		InventoryMin          respjson.Field
		LastInspectionDate    respjson.Field
		LastUpdatedBy         respjson.Field
		MaintPoc              respjson.Field
		MaintPriority         respjson.Field
		MaintStatus           respjson.Field
		MaintStatusDriver     respjson.Field
		MaintStatusUpdate     respjson.Field
		MissionReadiness      respjson.Field
		MxRemark              respjson.Field
		NextIcao              respjson.Field
		Notes                 respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		ParkLocation          respjson.Field
		ParkLocationSystem    respjson.Field
		PreviousIcao          respjson.Field
		SourceDl              respjson.Field
		TaStartTime           respjson.Field
		TroubleshootEtic      respjson.Field
		UnavailableSys        respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AircraftstatusFull) RawJSON() string { return r.JSON.raw }
func (r *AircraftstatusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AircraftstatusFullDataMode string

const (
	AircraftstatusFullDataModeReal      AircraftstatusFullDataMode = "REAL"
	AircraftstatusFullDataModeTest      AircraftstatusFullDataMode = "TEST"
	AircraftstatusFullDataModeSimulated AircraftstatusFullDataMode = "SIMULATED"
	AircraftstatusFullDataModeExercise  AircraftstatusFullDataMode = "EXERCISE"
)

// The status of the air-to-air weapon release system (OPERATIONAL,
// NON-OPERATIONAL, OFF).
type AircraftstatusFullAirToAirStatus string

const (
	AircraftstatusFullAirToAirStatusOperational    AircraftstatusFullAirToAirStatus = "OPERATIONAL"
	AircraftstatusFullAirToAirStatusNonOperational AircraftstatusFullAirToAirStatus = "NON-OPERATIONAL"
	AircraftstatusFullAirToAirStatusOff            AircraftstatusFullAirToAirStatus = "OFF"
)

// The status of the air-to-ground weapon release system (OPERATIONAL,
// NON-OPERATIONAL, OFF).
type AircraftstatusFullAirToGroundStatus string

const (
	AircraftstatusFullAirToGroundStatusOperational    AircraftstatusFullAirToGroundStatus = "OPERATIONAL"
	AircraftstatusFullAirToGroundStatusNonOperational AircraftstatusFullAirToGroundStatus = "NON-OPERATIONAL"
	AircraftstatusFullAirToGroundStatusOff            AircraftstatusFullAirToGroundStatus = "OFF"
)

// Properties and characteristics of a remark that is associated with an aircraft
// status.
type AircraftstatusremarkFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AircraftstatusremarkFullDataMode `json:"dataMode,required"`
	// The ID of the Aircraft Status to which this remark applies.
	IDAircraftStatus string `json:"idAircraftStatus,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The text of the remark.
	Text string `json:"text,required"`
	// Unique identifier of the record, auto-generated by the system if not provided on
	// create operations.
	ID string `json:"id"`
	// Unique identifier of the Aircraft Status Remark record from the originating
	// system.
	AltRmkID string `json:"altRmkId"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Time the remark was last updated in the originating system in ISO 8601 UTC
	// format with millisecond precision.
	LastUpdatedAt time.Time `json:"lastUpdatedAt" format:"date-time"`
	// The name or ID of the external user that updated this remark in the originating
	// system.
	LastUpdatedBy string `json:"lastUpdatedBy"`
	// The name of the remark.
	Name string `json:"name"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Time the remark was created in the originating system in ISO 8601 UTC format
	// with millisecond precision.
	Timestamp time.Time `json:"timestamp" format:"date-time"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDAircraftStatus      respjson.Field
		Source                respjson.Field
		Text                  respjson.Field
		ID                    respjson.Field
		AltRmkID              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		LastUpdatedAt         respjson.Field
		LastUpdatedBy         respjson.Field
		Name                  respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		SourceDl              respjson.Field
		Timestamp             respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AircraftstatusremarkFull) RawJSON() string { return r.JSON.raw }
func (r *AircraftstatusremarkFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AircraftstatusremarkFullDataMode string

const (
	AircraftstatusremarkFullDataModeReal      AircraftstatusremarkFullDataMode = "REAL"
	AircraftstatusremarkFullDataModeTest      AircraftstatusremarkFullDataMode = "TEST"
	AircraftstatusremarkFullDataModeSimulated AircraftstatusremarkFullDataMode = "SIMULATED"
	AircraftstatusremarkFullDataModeExercise  AircraftstatusremarkFullDataMode = "EXERCISE"
)

// Properties and characteristics of an airfield, which includes location, airfield
// codes, suitability codes, and remarks.
type AirfieldFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirfieldFullDataMode `json:"dataMode,required"`
	// The name of the airfield.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport,
	// etc.).
	Type string `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Alternate Airfield identifier provided by source.
	AltAirfieldID string `json:"altAirfieldId"`
	// Alternative names for this airfield.
	AlternativeNames []string `json:"alternativeNames"`
	// The closest city to the location of this airfield.
	City string `json:"city"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// The country name where this airfield is located.
	CountryName string `json:"countryName"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Information regarding daylight saving time as is relevant to the location and
	// operation of this airfield.
	DstInfo string `json:"dstInfo"`
	// Elevation of the airfield above mean sea level, in feet. Note: The corresponding
	// equivalent field is not converted by the UDL and may or may not be supplied by
	// the provider. The provider/consumer is responsible for all unit conversions.
	ElevFt float64 `json:"elevFt"`
	// Elevation of the airfield above mean sea level, in meters. Note: The
	// corresponding equivalent field is not converted by the UDL and may or may not be
	// supplied by the provider. The provider/consumer is responsible for all unit
	// conversions.
	ElevM float64 `json:"elevM"`
	// The Federal Aviation Administration (FAA) location identifier of this airfield.
	Faa string `json:"faa"`
	// Air Force geographic location code of the airfield.
	Geoloc string `json:"geoloc"`
	// Time difference between the location of the airfield and the Greenwich Mean Time
	// (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets
	// and time zones west of Greenwich are negative.
	GmtOffset string `json:"gmtOffset"`
	// The host nation code of this airfield, used for non-DoD/FAA locations.
	HostNatCode string `json:"hostNatCode"`
	// The International Aviation Transport Association (IATA) code of the airfield.
	Iata string `json:"iata"`
	// The International Civil Aviation Organization (ICAO) code of the airfield.
	Icao string `json:"icao"`
	// The ID of the parent site.
	IDSite string `json:"idSite"`
	// The URL link to information about airfield.
	InfoURL string `json:"infoURL"`
	// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
	// south of equator).
	Lat float64 `json:"lat"`
	// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// The magnetic declination/variation of the airfield's location from true north,
	// in degrees. Positive values east of true north and negative values west of true
	// north.
	MagDec float64 `json:"magDec"`
	// The length of the longest runway at this airfield in feet.
	MaxRunwayLength int64 `json:"maxRunwayLength"`
	// Applicable miscellaneous codes according to the Airfield Suitability and
	// Restrictions Report (ASRR) for this airfield.
	MiscCodes string `json:"miscCodes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The regional authority of the airfield.
	RegionalAuthority string `json:"regionalAuthority"`
	// Region where the airfield resides.
	RegionName string `json:"regionName"`
	// The number of runways at the site.
	Runways int64 `json:"runways"`
	// The secondary ICAO code for this airfield. Some airfields have two associated
	// ICAO codes, this can occur in cases when a single airfield supports both
	// military and civilian operations.
	SecondaryIcao string `json:"secondaryICAO"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// State or province of the airfield's location.
	State string `json:"state"`
	// The code for the state or province in which this airfield is located. Intended
	// as, but not constrained to, FIPS 10-4 region code designations.
	StateProvinceCode string `json:"stateProvinceCode"`
	// Array of descriptions for given suitability codes. The index of the description
	// corresponds to the position of the letter code in the string provided in the
	// suitabilityCodes field.
	SuitabilityCodeDescs []string `json:"suitabilityCodeDescs"`
	// Associated suitability codes according to the Airfield Suitability and
	// Restrictions Report (ASRR) for this airfield.
	SuitabilityCodes string `json:"suitabilityCodes"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// The airfield's World Area Code installation number (WAC-INNR).
	WacInnr string `json:"wacINNR"`
	// Air Mobility Command (AMC) Zone availability Report identifier.
	ZarID string `json:"zarId"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		AltAirfieldID         respjson.Field
		AlternativeNames      respjson.Field
		City                  respjson.Field
		CountryCode           respjson.Field
		CountryName           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DstInfo               respjson.Field
		ElevFt                respjson.Field
		ElevM                 respjson.Field
		Faa                   respjson.Field
		Geoloc                respjson.Field
		GmtOffset             respjson.Field
		HostNatCode           respjson.Field
		Iata                  respjson.Field
		Icao                  respjson.Field
		IDSite                respjson.Field
		InfoURL               respjson.Field
		Lat                   respjson.Field
		Lon                   respjson.Field
		MagDec                respjson.Field
		MaxRunwayLength       respjson.Field
		MiscCodes             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		RegionalAuthority     respjson.Field
		RegionName            respjson.Field
		Runways               respjson.Field
		SecondaryIcao         respjson.Field
		SourceDl              respjson.Field
		State                 respjson.Field
		StateProvinceCode     respjson.Field
		SuitabilityCodeDescs  respjson.Field
		SuitabilityCodes      respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		WacInnr               respjson.Field
		ZarID                 respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirfieldFull) RawJSON() string { return r.JSON.raw }
func (r *AirfieldFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirfieldFullDataMode string

const (
	AirfieldFullDataModeReal      AirfieldFullDataMode = "REAL"
	AirfieldFullDataModeTest      AirfieldFullDataMode = "TEST"
	AirfieldFullDataModeSimulated AirfieldFullDataMode = "SIMULATED"
	AirfieldFullDataModeExercise  AirfieldFullDataMode = "EXERCISE"
)

// Airfield capacity data. Contains data associated with the airfieldslots
// available for parking, working, takeoff, and landing at the airfield, as well as
// the types of aircraft that can be accommodated.
type AirfieldslotFull struct {
	// The name of the airfield where this slot is located.
	AirfieldName string `json:"airfieldName,required"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirfieldslotFullDataMode `json:"dataMode,required"`
	// Name of this slot.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL,
	// OTHER).
	//
	// Any of "WIDE", "NARROW", "HELO", "ALL", "OTHER".
	AcSlotCat AirfieldslotFullAcSlotCat `json:"acSlotCat"`
	// Alternate airfield identifier provided by the source.
	AltAirfieldID string `json:"altAirfieldId"`
	// Number of aircraft that can fit in this slot at the same time.
	Capacity int64 `json:"capacity"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Latest zulu time this slot is available based on daily standard hours. Not
	// applicable to slots with type PARKING. Abnormal hours, such as holidays, should
	// be marked via the AirfieldSlotConsumption schema.
	EndTime string `json:"endTime"`
	// The International Civil Aviation Organization (ICAO) code of the airfield.
	Icao string `json:"icao"`
	// Unique identifier of the Airfield for which this slot information applies.
	IDAirfield string `json:"idAirfield"`
	// Minimum time that must elapse between different aircraft leaving and entering
	// this slot, in minutes.
	MinSeparation int64 `json:"minSeparation"`
	// Optional notes/comments for this airfield slot.
	Notes string `json:"notes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Zulu time this slot is first available based on daily standard hours. Not
	// applicable to slots with type PARKING. Abnormal hours, such as holidays, should
	// be marked via the AirfieldSlotConsumption schema.
	StartTime string `json:"startTime"`
	// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING,
	// OTHER).
	//
	// Any of "WORKING", "PARKING", "TAKEOFF", "LANDING", "OTHER".
	Type AirfieldslotFullType `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AirfieldName          respjson.Field
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AcSlotCat             respjson.Field
		AltAirfieldID         respjson.Field
		Capacity              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EndTime               respjson.Field
		Icao                  respjson.Field
		IDAirfield            respjson.Field
		MinSeparation         respjson.Field
		Notes                 respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		SourceDl              respjson.Field
		StartTime             respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirfieldslotFull) RawJSON() string { return r.JSON.raw }
func (r *AirfieldslotFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirfieldslotFullDataMode string

const (
	AirfieldslotFullDataModeReal      AirfieldslotFullDataMode = "REAL"
	AirfieldslotFullDataModeTest      AirfieldslotFullDataMode = "TEST"
	AirfieldslotFullDataModeSimulated AirfieldslotFullDataMode = "SIMULATED"
	AirfieldslotFullDataModeExercise  AirfieldslotFullDataMode = "EXERCISE"
)

// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL,
// OTHER).
type AirfieldslotFullAcSlotCat string

const (
	AirfieldslotFullAcSlotCatWide   AirfieldslotFullAcSlotCat = "WIDE"
	AirfieldslotFullAcSlotCatNarrow AirfieldslotFullAcSlotCat = "NARROW"
	AirfieldslotFullAcSlotCatHelo   AirfieldslotFullAcSlotCat = "HELO"
	AirfieldslotFullAcSlotCatAll    AirfieldslotFullAcSlotCat = "ALL"
	AirfieldslotFullAcSlotCatOther  AirfieldslotFullAcSlotCat = "OTHER"
)

// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING,
// OTHER).
type AirfieldslotFullType string

const (
	AirfieldslotFullTypeWorking AirfieldslotFullType = "WORKING"
	AirfieldslotFullTypeParking AirfieldslotFullType = "PARKING"
	AirfieldslotFullTypeTakeoff AirfieldslotFullType = "TAKEOFF"
	AirfieldslotFullTypeLanding AirfieldslotFullType = "LANDING"
	AirfieldslotFullTypeOther   AirfieldslotFullType = "OTHER"
)

// Airfield slot use data. Contains the dynamic data associated with the status and
// use of specific airfield slots.
type AirfieldslotconsumptionFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirfieldslotconsumptionFullDataMode `json:"dataMode,required"`
	// Unique identifier of the airfield slot for which this slot consumption record is
	// referencing.
	IDAirfieldSlot string `json:"idAirfieldSlot,required"`
	// Number of aircraft using this slot for this time.
	NumAircraft int64 `json:"numAircraft,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The start of the slot window, in ISO 8601 UTC format.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Alternate identifier of the sortie arriving at the slot start time provided by
	// the source.
	AltArrSortieID string `json:"altArrSortieId"`
	// Alternate identifier of the sortie departing at the slot end time provided by
	// the source.
	AltDepSortieID string `json:"altDepSortieId"`
	// Comments from the approver.
	AppComment string `json:"appComment"`
	// Initials of the person approving the use of this slot. Use SYSTEM if
	// auto-approved without human involvement.
	AppInitials string `json:"appInitials"`
	// Short name of the organization approving the use of this slot.
	AppOrg string `json:"appOrg"`
	// Array of call signs of the aircraft using this slot.
	CallSigns []string `json:"callSigns"`
	// Identifying name of the aircraft using this slot. Names are often Prior
	// Permission Required (PPR) numbers or other similar human-readable identifiers.
	Consumer string `json:"consumer"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The end of the slot window, in ISO 8601 UTC format.
	EndTime time.Time `json:"endTime" format:"date-time"`
	// Unique identifier of the sortie arriving at the slot start time.
	IDArrSortie string `json:"idArrSortie"`
	// Unique identifier of the sortie departing at the slot end time.
	IDDepSortie string `json:"idDepSortie"`
	// Mission identifier using this slot according to Mobility Air Forces (MAF)
	// Encode/Decode procedures.
	MissionID string `json:"missionId"`
	// The aircraft Model Design Series designation of the aircraft occupying this
	// slot.
	OccAircraftMds string `json:"occAircraftMDS"`
	// Time the aircraft began occupying this slot, in ISO 8601 UTC format with
	// millisecond precision.
	OccStartTime time.Time `json:"occStartTime" format:"date-time"`
	// The tail number of the aircraft occupying this slot.
	OccTailNumber string `json:"occTailNumber"`
	// Flag indicating if the slot is occupied.
	Occupied bool `json:"occupied"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Comments from the requester.
	ReqComment string `json:"reqComment"`
	// Initials of the person requesting the use of this slot. Use SYSTEM if this
	// request is auto-generated by an auto-planning system.
	ReqInitials string `json:"reqInitials"`
	// Short name of the organization requesting use of this slot.
	ReqOrg string `json:"reqOrg"`
	// The aircraft Model Design Series designation of the aircraft this slot is
	// reserved for.
	ResAircraftMds string `json:"resAircraftMDS"`
	// Mission identifier reserving this slot according to Mobility Air Forces (MAF)
	// Encode/Decode procedures.
	ResMissionID string `json:"resMissionId"`
	// The reason the slot reservation was made.
	ResReason string `json:"resReason"`
	// The tail number of the aircraft this slot is reserved for.
	ResTailNumber string `json:"resTailNumber"`
	// Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for
	// Other).
	ResType string `json:"resType"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
	//
	// Any of "REQUESTED", "APPROVED", "DENIED", "BLOCKED", "OTHER".
	Status AirfieldslotconsumptionFullStatus `json:"status"`
	// The desired time for aircraft action such as landing, take off, parking, etc.,
	// in ISO 8601 UTC format.
	TargetTime time.Time `json:"targetTime" format:"date-time"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDAirfieldSlot        respjson.Field
		NumAircraft           respjson.Field
		Source                respjson.Field
		StartTime             respjson.Field
		ID                    respjson.Field
		AltArrSortieID        respjson.Field
		AltDepSortieID        respjson.Field
		AppComment            respjson.Field
		AppInitials           respjson.Field
		AppOrg                respjson.Field
		CallSigns             respjson.Field
		Consumer              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EndTime               respjson.Field
		IDArrSortie           respjson.Field
		IDDepSortie           respjson.Field
		MissionID             respjson.Field
		OccAircraftMds        respjson.Field
		OccStartTime          respjson.Field
		OccTailNumber         respjson.Field
		Occupied              respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		ReqComment            respjson.Field
		ReqInitials           respjson.Field
		ReqOrg                respjson.Field
		ResAircraftMds        respjson.Field
		ResMissionID          respjson.Field
		ResReason             respjson.Field
		ResTailNumber         respjson.Field
		ResType               respjson.Field
		SourceDl              respjson.Field
		Status                respjson.Field
		TargetTime            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirfieldslotconsumptionFull) RawJSON() string { return r.JSON.raw }
func (r *AirfieldslotconsumptionFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirfieldslotconsumptionFullDataMode string

const (
	AirfieldslotconsumptionFullDataModeReal      AirfieldslotconsumptionFullDataMode = "REAL"
	AirfieldslotconsumptionFullDataModeTest      AirfieldslotconsumptionFullDataMode = "TEST"
	AirfieldslotconsumptionFullDataModeSimulated AirfieldslotconsumptionFullDataMode = "SIMULATED"
	AirfieldslotconsumptionFullDataModeExercise  AirfieldslotconsumptionFullDataMode = "EXERCISE"
)

// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
type AirfieldslotconsumptionFullStatus string

const (
	AirfieldslotconsumptionFullStatusRequested AirfieldslotconsumptionFullStatus = "REQUESTED"
	AirfieldslotconsumptionFullStatusApproved  AirfieldslotconsumptionFullStatus = "APPROVED"
	AirfieldslotconsumptionFullStatusDenied    AirfieldslotconsumptionFullStatus = "DENIED"
	AirfieldslotconsumptionFullStatusBlocked   AirfieldslotconsumptionFullStatus = "BLOCKED"
	AirfieldslotconsumptionFullStatusOther     AirfieldslotconsumptionFullStatus = "OTHER"
)

// The airfield status contains dynamic data of an airfield's capabilities.
type AirfieldstatusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirfieldstatusFullDataMode `json:"dataMode,required"`
	// Unique identifier of the Airfield for which this status is referencing.
	IDAirfield string `json:"idAirfield,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Alternate airfield identifier provided by the source.
	AltAirfieldID string `json:"altAirfieldId"`
	// The name of the person who approved the airfield survey review.
	ApprovedBy string `json:"approvedBy"`
	// The date that survey review changes were approved for this airfield, in ISO 8601
	// UTC format with millisecond precision.
	ApprovedDate time.Time `json:"approvedDate" format:"date-time"`
	// The category of aircraft rescue and fire fighting (ARFF) services that are
	// currently available at the airfield. Entries should include the code (FAA or
	// ICAO) and the category.
	ArffCat string `json:"arffCat"`
	// Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can
	// be serviced simultaneously based on spacing and manpower at the time of status.
	CargoMog int64 `json:"cargoMOG"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Maximum on ground (MOG) number of fleet aircraft that can be serviced
	// simultaneously based on spacing and manpower at the time of status.
	FleetServiceMog int64 `json:"fleetServiceMOG"`
	// Maximum on ground (MOG) number of aircraft that can be simultaneously refueled
	// based on spacing and manpower at the time of status.
	FuelMog int64 `json:"fuelMOG"`
	// Array of quantities for each fuel type at the airfield, in kilograms. The values
	// in this array must correspond to the position index in fuelTypes. This array
	// must be the same length as fuelTypes.
	FuelQtys []float64 `json:"fuelQtys"`
	// Array of fuel types available at the airfield. This array must be the same
	// length as fuelQtys.
	FuelTypes []string `json:"fuelTypes"`
	// The expected time to receive ground support equipment (e.g. power units, air
	// units, cables, hoses, etc.), in minutes.
	GseTime int64 `json:"gseTime"`
	// The level of medical support and capabilities available at the airfield.
	MedCap string `json:"medCap"`
	// Description of the current status of the airfield.
	Message string `json:"message"`
	// Array of quantities for each material handling equipment types at the airfield.
	// The values in this array must correspond to the position index in mheTypes. This
	// array must be the same length as mheTypes.
	MheQtys []int64 `json:"mheQtys"`
	// Array of material handling equipment types at the airfield. This array must be
	// the same length as mheQtys.
	MheTypes []string `json:"mheTypes"`
	// Maximum on ground (MOG) number of aircraft that can be simultaneously ground
	// handled for standard maintenance based on spacing and manpower at the time of
	// status.
	MxMog int64 `json:"mxMOG"`
	// Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing
	// and manpower at the time of status.
	NarrowParkingMog int64 `json:"narrowParkingMOG"`
	// Maximum on ground (MOG) number of working narrow-body aircraft based on spacing
	// and manpower at the time of status.
	NarrowWorkingMog int64 `json:"narrowWorkingMOG"`
	// The number of aircraft that are currently on ground (COG) at the airfield.
	NumCog int64 `json:"numCOG"`
	// Maximum on ground (MOG) number of aircraft due to items not directly related to
	// the airfield infrastructure or aircraft servicing capability based on spacing
	// and manpower at the time of status.
	OperatingMog int64 `json:"operatingMOG"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that
	// can be serviced simultaneously based on spacing and manpower at the time of
	// status.
	PassengerServiceMog int64 `json:"passengerServiceMOG"`
	// The primary frequency which the airfield is currently operating, in megahertz.
	PriFreq float64 `json:"priFreq"`
	// The number or ID of primary runway at the airfield.
	PriRwyNum string `json:"priRwyNum"`
	// The name of the person who reviewed the airfield survey.
	ReviewedBy string `json:"reviewedBy"`
	// The date the airfield survey was reviewed, in ISO 8601 UTC format with
	// millisecond precision.
	ReviewedDate time.Time `json:"reviewedDate" format:"date-time"`
	// The primary runway condition reading value used for determining runway braking
	// action, from 0 to 26. A value of 0 indicates braking action is poor or
	// non-existent, where a value of 26 indicates braking action is good.
	RwyCondReading int64 `json:"rwyCondReading"`
	// The primary runway friction factor which is dependent on the surface friction
	// between the tires of the aircraft and the runway surface, from 0 to 100. A lower
	// number indicates less friction and less braking response.
	RwyFrictionFactor int64 `json:"rwyFrictionFactor"`
	// Array of markings currently on the primary runway.
	RwyMarkings []string `json:"rwyMarkings"`
	// Array of slot types that an airfield requires a particular aircraft provide in
	// order to consume a slot at this location.
	SlotTypesReq []string `json:"slotTypesReq"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The date the airfield survey was performed, in ISO 8601 UTC format with
	// millisecond precision.
	SurveyDate time.Time `json:"surveyDate" format:"date-time"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Maximum on ground (MOG) number of parking wide-body aircraft based on spacing
	// and manpower at the time of status. Additional information about this field as
	// it pertains to specific aircraft type may be available in an associated
	// SiteOperations record.
	WideParkingMog int64 `json:"wideParkingMOG"`
	// Maximum on ground (MOG) number of working wide-body aircraft based on spacing
	// and manpower at the time of status. Additional information about this field as
	// it pertains to specific aircraft type may be available in an associated
	// SiteOperations record.
	WideWorkingMog int64 `json:"wideWorkingMOG"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDAirfield            respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AltAirfieldID         respjson.Field
		ApprovedBy            respjson.Field
		ApprovedDate          respjson.Field
		ArffCat               respjson.Field
		CargoMog              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		FleetServiceMog       respjson.Field
		FuelMog               respjson.Field
		FuelQtys              respjson.Field
		FuelTypes             respjson.Field
		GseTime               respjson.Field
		MedCap                respjson.Field
		Message               respjson.Field
		MheQtys               respjson.Field
		MheTypes              respjson.Field
		MxMog                 respjson.Field
		NarrowParkingMog      respjson.Field
		NarrowWorkingMog      respjson.Field
		NumCog                respjson.Field
		OperatingMog          respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PassengerServiceMog   respjson.Field
		PriFreq               respjson.Field
		PriRwyNum             respjson.Field
		ReviewedBy            respjson.Field
		ReviewedDate          respjson.Field
		RwyCondReading        respjson.Field
		RwyFrictionFactor     respjson.Field
		RwyMarkings           respjson.Field
		SlotTypesReq          respjson.Field
		SourceDl              respjson.Field
		SurveyDate            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		WideParkingMog        respjson.Field
		WideWorkingMog        respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirfieldstatusFull) RawJSON() string { return r.JSON.raw }
func (r *AirfieldstatusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirfieldstatusFullDataMode string

const (
	AirfieldstatusFullDataModeReal      AirfieldstatusFullDataMode = "REAL"
	AirfieldstatusFullDataModeTest      AirfieldstatusFullDataMode = "TEST"
	AirfieldstatusFullDataModeSimulated AirfieldstatusFullDataMode = "SIMULATED"
	AirfieldstatusFullDataModeExercise  AirfieldstatusFullDataMode = "EXERCISE"
)

// Information related to how an aircraft is loaded with cargo, equipment, and
// passengers.
type AirloadplanFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirloadplanFullDataMode `json:"dataMode,required"`
	// The current estimated time that the aircraft is planned to depart, in ISO 8601
	// UTC format with millisecond precision.
	EstDepTime time.Time `json:"estDepTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Allowable Cabin Load (ACL) onboard the aircraft. The maximum weight of
	// passengers, baggage, and cargo that can be safely transported in the aircraft
	// cabin, in kilograms.
	ACLOnboard float64 `json:"aclOnboard"`
	// Allowable Cabin Load (ACL) released this leg. The weight of passengers, baggage,
	// and cargo released from the aircraft cabin, in kilograms.
	ACLReleased float64 `json:"aclReleased"`
	// The Model Design Series designation of the aircraft supporting this load plan.
	AircraftMds string `json:"aircraftMDS"`
	// Collection of hazmat actuals associated with this load plan.
	AirLoadPlanHazmatActuals []AirloadplanFullAirLoadPlanHazmatActual `json:"airLoadPlanHazmatActuals"`
	// Collection of human remains transport information associated with this load
	// plan.
	AirLoadPlanHr []AirloadplanFullAirLoadPlanHr `json:"airLoadPlanHR"`
	// Collection of cargo information located at the pallet positions associated with
	// this load plan.
	AirLoadPlanPalletDetails []AirloadplanFullAirLoadPlanPalletDetail `json:"airLoadPlanPalletDetails"`
	// Collection of passenger and cargo details associated with this load plan for
	// this leg of the mission.
	AirLoadPlanPaxCargo []AirloadplanFullAirLoadPlanPaxCargo `json:"airLoadPlanPaxCargo"`
	// Collection of unit line number actuals associated with this load plan.
	AirLoadPlanUlnActuals []AirloadplanFullAirLoadPlanUlnActual `json:"airLoadPlanULNActuals"`
	// Optional identifier of arrival airfield with no International Civil Organization
	// (ICAO) code.
	ArrAirfield string `json:"arrAirfield"`
	// The arrival International Civil Organization (ICAO) code of the landing
	// airfield.
	ArrIcao string `json:"arrICAO"`
	// Time the loadmaster or boom operator is available for cargo loading/unloading,
	// in ISO 8601 UTC format with millisecond precision.
	AvailableTime time.Time `json:"availableTime" format:"date-time"`
	// The basic weight of the aircraft multiplied by the distance between the
	// reference datum and the aircraft's center of gravity, in Newton-meters.
	BasicMoment float64 `json:"basicMoment"`
	// The weight of the aircraft without passengers, cargo, equipment, or usable fuel,
	// in kilograms.
	BasicWeight float64 `json:"basicWeight"`
	// Time the cargo briefing was given to the loadmaster or boom operator, in ISO
	// 8601 UTC format with millisecond precision.
	BriefTime time.Time `json:"briefTime" format:"date-time"`
	// The call sign of the mission supporting this load plan.
	CallSign string `json:"callSign"`
	// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from
	// the reference datum, in meters.
	CargoBayFsMax float64 `json:"cargoBayFSMax"`
	// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from
	// the reference datum, in meters.
	CargoBayFsMin float64 `json:"cargoBayFSMin"`
	// Width of the cargo bay, in meters.
	CargoBayWidth float64 `json:"cargoBayWidth"`
	// The cargo configuration required for this leg (e.g. C-1, C-2, C-3, DV-1, DV-2,
	// AE-1, etc.). Configuration meanings are determined by the data source.
	CargoConfig string `json:"cargoConfig"`
	// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters.
	// Each individual cargo moment is the weight of the cargo multiplied by the
	// distance between the reference datum and the cargo's center of gravity.
	CargoMoment float64 `json:"cargoMoment"`
	// Volume of cargo space in the aircraft, in cubic meters.
	CargoVolume float64 `json:"cargoVolume"`
	// The weight of the cargo on board the aircraft, in kilograms.
	CargoWeight float64 `json:"cargoWeight"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The number of crew members on the aircraft.
	CrewSize int64 `json:"crewSize"`
	// Optional identifier of departure airfield with no International Civil
	// Organization (ICAO) code.
	DepAirfield string `json:"depAirfield"`
	// The departure International Civil Organization (ICAO) code of the departure
	// airfield.
	DepIcao string `json:"depICAO"`
	// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS,
	// Combat, etc.). Configuration meanings are determined by the data source.
	EquipConfig string `json:"equipConfig"`
	// The current estimated time that the aircraft is planned to arrive, in ISO 8601
	// UTC format with millisecond precision.
	EstArrTime time.Time `json:"estArrTime" format:"date-time"`
	// The estimated weight of usable fuel upon landing multiplied by the distance
	// between the reference datum and the fuel's center of gravity, in Newton-meters.
	EstLandingFuelMoment float64 `json:"estLandingFuelMoment"`
	// The estimated weight of usable fuel upon landing, in kilograms.
	EstLandingFuelWeight float64 `json:"estLandingFuelWeight"`
	// Optional ID from external systems. This field has no meaning within UDL and is
	// provided as a convenience for systems that require tracking of an internal
	// system generated ID.
	ExternalID string `json:"externalId"`
	// The fuel weight on board the aircraft multiplied by the distance between the
	// reference datum and the fuel's center of gravity, in Newton-meters.
	FuelMoment float64 `json:"fuelMoment"`
	// The weight of usable fuel on board the aircraft, in kilograms.
	FuelWeight float64 `json:"fuelWeight"`
	// The center of gravity of the aircraft using the gross weight and gross moment,
	// as a percentage of the mean aerodynamic chord (%MAC).
	GrossCg float64 `json:"grossCG"`
	// The sum of moments of all items making up the gross weight of the aircraft, in
	// Newton-meters.
	GrossMoment float64 `json:"grossMoment"`
	// The total weight of the aircraft at takeoff including passengers, cargo,
	// equipment, and usable fuel, in kilograms.
	GrossWeight float64 `json:"grossWeight"`
	// The UDL ID of the mission this record is associated with.
	IDMission string `json:"idMission"`
	// The UDL ID of the aircraft sortie this record is associated with.
	IDSortie string `json:"idSortie"`
	// The center of gravity of the aircraft using the landing weight and landing
	// moment, as a percentage of the mean aerodynamic chord (%MAC).
	LandingCg float64 `json:"landingCG"`
	// The sum of moments of all items making up the gross weight of the aircraft upon
	// landing, in Newton-meters.
	LandingMoment float64 `json:"landingMoment"`
	// The gross weight of the aircraft upon landing, in kilograms.
	LandingWeight float64 `json:"landingWeight"`
	// The leg number of the mission supporting this load plan.
	LegNum int64 `json:"legNum"`
	// Name of the loadmaster or boom operator who received the cargo briefing.
	LoadmasterName string `json:"loadmasterName"`
	// Rank of the loadmaster or boom operator overseeing cargo loading/unloading.
	LoadmasterRank string `json:"loadmasterRank"`
	// Remarks concerning this load plan.
	LoadRemarks string `json:"loadRemarks"`
	// The mission number of the mission supporting this load plan.
	MissionNumber string `json:"missionNumber"`
	// The operating weight of the aircraft multiplied by the distance between the
	// reference datum and the aircraft's center of gravity, in Newton-meters.
	OperatingMoment float64 `json:"operatingMoment"`
	// The basic weight of the aircraft including passengers and equipment, in
	// kilograms.
	OperatingWeight float64 `json:"operatingWeight"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Number of pallet positions on the aircraft.
	PpOnboard int64 `json:"ppOnboard"`
	// Number of pallet positions released this leg.
	PpReleased int64 `json:"ppReleased"`
	// Time the loadmaster or boom operator is scheduled to begin overseeing cargo
	// loading/unloading, in ISO 8601 UTC format with millisecond precision.
	SchedTime time.Time `json:"schedTime" format:"date-time"`
	// Number of passenger seats on the aircraft.
	SeatsOnboard int64 `json:"seatsOnboard"`
	// Number of passenger seats released this leg.
	SeatsReleased int64 `json:"seatsReleased"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The tail number of the aircraft supporting this load plan.
	TailNumber string `json:"tailNumber"`
	// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.).
	// Configuration meanings are determined by the data source.
	TankConfig string `json:"tankConfig"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Alphanumeric code that describes general cargo-related utilization and
	// characteristics for an itinerary point.
	UtilCode string `json:"utilCode"`
	// The center of gravity of the aircraft using the zero fuel weight and zero fuel
	// total moment, as a percentage of the mean aerodynamic chord (%MAC).
	ZeroFuelCg float64 `json:"zeroFuelCG"`
	// The zero fuel weight of the aircraft multiplied by the distance between the
	// reference datum and the aircraft's center of gravity, in Newton-meters.
	ZeroFuelMoment float64 `json:"zeroFuelMoment"`
	// The operating weight of the aircraft including cargo, mail, baggage, and
	// passengers, but without usable fuel, in kilograms.
	ZeroFuelWeight float64 `json:"zeroFuelWeight"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking    respjson.Field
		DataMode                 respjson.Field
		EstDepTime               respjson.Field
		Source                   respjson.Field
		ID                       respjson.Field
		ACLOnboard               respjson.Field
		ACLReleased              respjson.Field
		AircraftMds              respjson.Field
		AirLoadPlanHazmatActuals respjson.Field
		AirLoadPlanHr            respjson.Field
		AirLoadPlanPalletDetails respjson.Field
		AirLoadPlanPaxCargo      respjson.Field
		AirLoadPlanUlnActuals    respjson.Field
		ArrAirfield              respjson.Field
		ArrIcao                  respjson.Field
		AvailableTime            respjson.Field
		BasicMoment              respjson.Field
		BasicWeight              respjson.Field
		BriefTime                respjson.Field
		CallSign                 respjson.Field
		CargoBayFsMax            respjson.Field
		CargoBayFsMin            respjson.Field
		CargoBayWidth            respjson.Field
		CargoConfig              respjson.Field
		CargoMoment              respjson.Field
		CargoVolume              respjson.Field
		CargoWeight              respjson.Field
		CreatedAt                respjson.Field
		CreatedBy                respjson.Field
		CrewSize                 respjson.Field
		DepAirfield              respjson.Field
		DepIcao                  respjson.Field
		EquipConfig              respjson.Field
		EstArrTime               respjson.Field
		EstLandingFuelMoment     respjson.Field
		EstLandingFuelWeight     respjson.Field
		ExternalID               respjson.Field
		FuelMoment               respjson.Field
		FuelWeight               respjson.Field
		GrossCg                  respjson.Field
		GrossMoment              respjson.Field
		GrossWeight              respjson.Field
		IDMission                respjson.Field
		IDSortie                 respjson.Field
		LandingCg                respjson.Field
		LandingMoment            respjson.Field
		LandingWeight            respjson.Field
		LegNum                   respjson.Field
		LoadmasterName           respjson.Field
		LoadmasterRank           respjson.Field
		LoadRemarks              respjson.Field
		MissionNumber            respjson.Field
		OperatingMoment          respjson.Field
		OperatingWeight          respjson.Field
		Origin                   respjson.Field
		OrigNetwork              respjson.Field
		PpOnboard                respjson.Field
		PpReleased               respjson.Field
		SchedTime                respjson.Field
		SeatsOnboard             respjson.Field
		SeatsReleased            respjson.Field
		SourceDl                 respjson.Field
		TailNumber               respjson.Field
		TankConfig               respjson.Field
		UpdatedAt                respjson.Field
		UpdatedBy                respjson.Field
		UtilCode                 respjson.Field
		ZeroFuelCg               respjson.Field
		ZeroFuelMoment           respjson.Field
		ZeroFuelWeight           respjson.Field
		ExtraFields              map[string]respjson.Field
		raw                      string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirloadplanFull) RawJSON() string { return r.JSON.raw }
func (r *AirloadplanFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirloadplanFullDataMode string

const (
	AirloadplanFullDataModeReal      AirloadplanFullDataMode = "REAL"
	AirloadplanFullDataModeTest      AirloadplanFullDataMode = "TEST"
	AirloadplanFullDataModeSimulated AirloadplanFullDataMode = "SIMULATED"
	AirloadplanFullDataModeExercise  AirloadplanFullDataMode = "EXERCISE"
)

// Collection of hazmat actuals associated with this load plan.
type AirloadplanFullAirLoadPlanHazmatActual struct {
	// The Air Special Handling Code (ASHC) indicates the type of special handling
	// required for hazardous cargo.
	Ashc string `json:"ashc"`
	// Compatibility group code used to specify the controls for the transportation and
	// storage of hazardous materials according to the Hazardous Materials Regulations
	// issued by the U.S. Department of Transportation.
	Cgc string `json:"cgc"`
	// Class and division of the hazardous material according to the Hazardous
	// Materials Regulations issued by the U.S. Department of Transportation.
	ClassDiv string `json:"classDiv"`
	// Description of the hazardous item.
	HazDescription string `json:"hazDescription"`
	// Remarks concerning this hazardous material.
	HazmatRemarks string `json:"hazmatRemarks"`
	// United Nations number or North American number that identifies hazardous
	// materials according to the Hazardous Materials Regulations issued by the U.S.
	// Department of Transportation.
	HazNum string `json:"hazNum"`
	// Designates the type of hazmat number for the item (UN for United Nations or NA
	// for North American).
	HazNumType string `json:"hazNumType"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// hazardous material is unloaded.
	HazOffIcao string `json:"hazOffICAO"`
	// Itinerary number that identifies where the hazardous material is unloaded.
	HazOffItin int64 `json:"hazOffItin"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// hazardous material is loaded.
	HazOnIcao string `json:"hazOnICAO"`
	// Itinerary number that identifies where the hazardous material is loaded.
	HazOnItin int64 `json:"hazOnItin"`
	// Number of pieces of hazardous cargo.
	HazPieces int64 `json:"hazPieces"`
	// Transportation Control Number (TCN) of the hazardous item.
	HazTcn string `json:"hazTcn"`
	// Total weight of hazardous cargo, including non-explosive parts, in kilograms.
	HazWeight float64 `json:"hazWeight"`
	// United Nations proper shipping name of the hazardous material according to the
	// Hazardous Materials Regulations issued by the U.S. Department of Transportation.
	ItemName string `json:"itemName"`
	// Manufacturer's lot number for identification of the hazardous material.
	LotNum string `json:"lotNum"`
	// Net explosive weight of the hazardous material, in kilograms.
	NetExpWt float64 `json:"netExpWt"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Ashc           respjson.Field
		Cgc            respjson.Field
		ClassDiv       respjson.Field
		HazDescription respjson.Field
		HazmatRemarks  respjson.Field
		HazNum         respjson.Field
		HazNumType     respjson.Field
		HazOffIcao     respjson.Field
		HazOffItin     respjson.Field
		HazOnIcao      respjson.Field
		HazOnItin      respjson.Field
		HazPieces      respjson.Field
		HazTcn         respjson.Field
		HazWeight      respjson.Field
		ItemName       respjson.Field
		LotNum         respjson.Field
		NetExpWt       respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirloadplanFullAirLoadPlanHazmatActual) RawJSON() string { return r.JSON.raw }
func (r *AirloadplanFullAirLoadPlanHazmatActual) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of human remains transport information associated with this load
// plan.
type AirloadplanFullAirLoadPlanHr struct {
	// Type of transfer case used.
	Container string `json:"container"`
	// Name of the escort for the remains.
	Escort string `json:"escort"`
	// The current estimated time of arrival for the remains in ISO 8601 UTC format
	// with millisecond precision.
	HrEstArrTime time.Time `json:"hrEstArrTime" format:"date-time"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// remains are unloaded.
	HrOffIcao string `json:"hrOffICAO"`
	// Itinerary number that identifies where the remains are unloaded.
	HrOffItin int64 `json:"hrOffItin"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// remains are loaded.
	HrOnIcao string `json:"hrOnICAO"`
	// Itinerary number that identifies where the remains are loaded.
	HrOnItin int64 `json:"hrOnItin"`
	// Remarks concerning the remains.
	HrRemarks string `json:"hrRemarks"`
	// Name of the deceased.
	Name string `json:"name"`
	// Rank of the deceased.
	Rank string `json:"rank"`
	// Name of the receiving agency or funeral home to which the remains are being
	// delivered.
	RecAgency string `json:"recAgency"`
	// Branch of service of the deceased.
	Service string `json:"service"`
	// Flag indicating if the remains are viewable.
	Viewable bool `json:"viewable"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Container    respjson.Field
		Escort       respjson.Field
		HrEstArrTime respjson.Field
		HrOffIcao    respjson.Field
		HrOffItin    respjson.Field
		HrOnIcao     respjson.Field
		HrOnItin     respjson.Field
		HrRemarks    respjson.Field
		Name         respjson.Field
		Rank         respjson.Field
		RecAgency    respjson.Field
		Service      respjson.Field
		Viewable     respjson.Field
		ExtraFields  map[string]respjson.Field
		raw          string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirloadplanFullAirLoadPlanHr) RawJSON() string { return r.JSON.raw }
func (r *AirloadplanFullAirLoadPlanHr) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of cargo information located at the pallet positions associated with
// this load plan.
type AirloadplanFullAirLoadPlanPalletDetail struct {
	// Category of special interest cargo.
	Category string `json:"category"`
	// Pallet position of the cargo.
	Pp string `json:"pp"`
	// Description of the cargo.
	PpDescription string `json:"ppDescription"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// cargo is unloaded.
	PpOffIcao string `json:"ppOffICAO"`
	// Number of pieces included in the Transportation Control Number (TCN).
	PpPieces int64 `json:"ppPieces"`
	// Remarks concerning the cargo at this pallet position.
	PpRemarks string `json:"ppRemarks"`
	// Transportation Control Number (TCN) of the cargo.
	PpTcn string `json:"ppTcn"`
	// Total weight of the cargo at this pallet position in kilograms.
	PpWeight float64 `json:"ppWeight"`
	// Flag indicating if this cargo is considered special interest.
	SpecialInterest bool `json:"specialInterest"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Category        respjson.Field
		Pp              respjson.Field
		PpDescription   respjson.Field
		PpOffIcao       respjson.Field
		PpPieces        respjson.Field
		PpRemarks       respjson.Field
		PpTcn           respjson.Field
		PpWeight        respjson.Field
		SpecialInterest respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirloadplanFullAirLoadPlanPalletDetail) RawJSON() string { return r.JSON.raw }
func (r *AirloadplanFullAirLoadPlanPalletDetail) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of passenger and cargo details associated with this load plan for
// this leg of the mission.
type AirloadplanFullAirLoadPlanPaxCargo struct {
	// Number of ambulatory medical passengers in this group.
	AmbPax int64 `json:"ambPax"`
	// Number of patient attendant passengers in this group.
	AttPax int64 `json:"attPax"`
	// Number of space available passengers in this group.
	AvailablePax int64 `json:"availablePax"`
	// Weight of baggage in this group in kilograms.
	BagWeight float64 `json:"bagWeight"`
	// Number of civilian passengers in this group.
	CivPax int64 `json:"civPax"`
	// Number of distinguished visitor passengers in this group.
	DvPax int64 `json:"dvPax"`
	// Number of foreign national passengers in this group.
	FnPax int64 `json:"fnPax"`
	// Weight of cargo in this group in kilograms.
	GroupCargoWeight float64 `json:"groupCargoWeight"`
	// Describes the status or action needed for this group of passenger and cargo data
	// (e.g. ARRONBD, OFFTHIS, THROUGH, ONTHIS, DEPONBD, OFFNEXT).
	GroupType string `json:"groupType"`
	// Number of litter-bound passengers in this group.
	LitPax int64 `json:"litPax"`
	// Weight of mail in this group in kilograms.
	MailWeight float64 `json:"mailWeight"`
	// Number of cargo pallets in this group.
	NumPallet int64 `json:"numPallet"`
	// Weight of pallets, chains, and devices in this group in kilograms.
	PalletWeight float64 `json:"palletWeight"`
	// Weight of passengers in this group in kilograms.
	PaxWeight float64 `json:"paxWeight"`
	// Number of space required passengers in this group.
	RequiredPax int64 `json:"requiredPax"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AmbPax           respjson.Field
		AttPax           respjson.Field
		AvailablePax     respjson.Field
		BagWeight        respjson.Field
		CivPax           respjson.Field
		DvPax            respjson.Field
		FnPax            respjson.Field
		GroupCargoWeight respjson.Field
		GroupType        respjson.Field
		LitPax           respjson.Field
		MailWeight       respjson.Field
		NumPallet        respjson.Field
		PalletWeight     respjson.Field
		PaxWeight        respjson.Field
		RequiredPax      respjson.Field
		ExtraFields      map[string]respjson.Field
		raw              string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirloadplanFullAirLoadPlanPaxCargo) RawJSON() string { return r.JSON.raw }
func (r *AirloadplanFullAirLoadPlanPaxCargo) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of unit line number actuals associated with this load plan.
type AirloadplanFullAirLoadPlanUlnActual struct {
	// Number of ambulatory patients associated with this load plan.
	NumAmbulatory int64 `json:"numAmbulatory"`
	// Number of attendants associated with this load plan.
	NumAttendant int64 `json:"numAttendant"`
	// Number of litter patients associated with this load plan.
	NumLitter int64 `json:"numLitter"`
	// Number of passengers associated with this load plan.
	NumPax int64 `json:"numPax"`
	// Identifier of the offload itinerary location.
	OffloadID int64 `json:"offloadId"`
	// Offload location code.
	OffloadLoCode string `json:"offloadLOCode"`
	// Identifier of the onload itinerary location.
	OnloadID int64 `json:"onloadId"`
	// Onload location code.
	OnloadLoCode string `json:"onloadLOCode"`
	// Identification number of the Operation Plan (OPLAN) associated with this load
	// plan.
	Oplan string `json:"oplan"`
	// Project name.
	ProjName string `json:"projName"`
	// Unit line number.
	Uln string `json:"uln"`
	// Total weight of all cargo items for this unit line number in kilograms.
	UlnCargoWeight float64 `json:"ulnCargoWeight"`
	// Remarks concerning these unit line number actuals.
	UlnRemarks string `json:"ulnRemarks"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		NumAmbulatory  respjson.Field
		NumAttendant   respjson.Field
		NumLitter      respjson.Field
		NumPax         respjson.Field
		OffloadID      respjson.Field
		OffloadLoCode  respjson.Field
		OnloadID       respjson.Field
		OnloadLoCode   respjson.Field
		Oplan          respjson.Field
		ProjName       respjson.Field
		Uln            respjson.Field
		UlnCargoWeight respjson.Field
		UlnRemarks     respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirloadplanFullAirLoadPlanUlnActual) RawJSON() string { return r.JSON.raw }
func (r *AirloadplanFullAirLoadPlanUlnActual) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Beta Version Airspace Control Order: Contains airspace coordination information
// and instructions that have been issued by an airspace control authority.
type AirspacecontrolorderFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirspacecontrolorderFullDataMode `json:"dataMode,required"`
	// Specifies the unique operation or exercise name, nickname, or codeword assigned
	// to a joint exercise or operation plan.
	OpExName string `json:"opExName,required"`
	// The identifier of the originator of this message.
	Originator string `json:"originator,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The start of the effective time period of this airspace control order, in ISO
	// 8601 UTC format with millisecond precision.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Free text information expressed in natural language.
	AcoComments string `json:"acoComments"`
	// The serial number of this airspace control order.
	AcoSerialNum string `json:"acoSerialNum"`
	// Mandatory nested segment to report multiple airspace control means statuses
	// within an ACOID.
	AirspaceControlMeansStatus []AirspacecontrolorderFullAirspaceControlMeansStatus `json:"airspaceControlMeansStatus"`
	// The airspaceControlReferences set provides both USMTF and non-USMTF references
	// for this airspace control order.
	AirspaceControlOrderReferences []AirspacecontrolorderFullAirspaceControlOrderReference `json:"airspaceControlOrderReferences"`
	// Name of the area of the command for which the ACO is valid.
	AreaOfValidity string `json:"areaOfValidity"`
	// Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR
	// CLASSIFICATION code.
	ClassReasons []string `json:"classReasons"`
	// Markings defining the source material or the original classification authority
	// for the ACO message.
	ClassSource string `json:"classSource"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Coded entries that provide justification for exemption from automatic
	// downgrading or declassification of the airspace control order.
	DeclassExemptionCodes []string `json:"declassExemptionCodes"`
	// Markings providing the literal guidance or date for downgrading or declassifying
	// the airspace control order.
	DowngradeInsDates []string `json:"downgradeInsDates"`
	// Specifies the geodetic datum by which the spatial coordinates of the controlled
	// airspace are calculated.
	GeoDatum string `json:"geoDatum"`
	// The month in which the message originated.
	Month string `json:"month"`
	// Supplementary name that can be used to further identify exercise nicknames, or
	// to provide the primary nickname of the option or the alternative of an
	// operational plan.
	OpExInfo string `json:"opExInfo"`
	// The secondary supplementary nickname of the option or the alternative of the
	// operational plan or order.
	OpExInfoAlt string `json:"opExInfoAlt"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The official identifier of the military establishment responsible for the
	// operation plan and the identification number assigned to this plan.
	PlanOrigNum string `json:"planOrigNum"`
	// The qualifier which caveats the message status.
	Qualifier string `json:"qualifier"`
	// The serial number associated with the message qualifier.
	QualSn int64 `json:"qualSN"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The unique message identifier sequentially assigned by the originator.
	SerialNum string `json:"serialNum"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// A qualifier for the end of the effective time period of this airspace control
	// order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a
	// relative time.
	StopQualifier string `json:"stopQualifier"`
	// The end of the effective time period of this airspace control order, in ISO 8601
	// UTC format with millisecond precision.
	StopTime time.Time `json:"stopTime" format:"date-time"`
	// Array of unique link 16 identifiers that will be assigned to a future airspace
	// control means.
	UndLnkTrks []string `json:"undLnkTrks"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking          respjson.Field
		DataMode                       respjson.Field
		OpExName                       respjson.Field
		Originator                     respjson.Field
		Source                         respjson.Field
		StartTime                      respjson.Field
		ID                             respjson.Field
		AcoComments                    respjson.Field
		AcoSerialNum                   respjson.Field
		AirspaceControlMeansStatus     respjson.Field
		AirspaceControlOrderReferences respjson.Field
		AreaOfValidity                 respjson.Field
		ClassReasons                   respjson.Field
		ClassSource                    respjson.Field
		CreatedAt                      respjson.Field
		CreatedBy                      respjson.Field
		DeclassExemptionCodes          respjson.Field
		DowngradeInsDates              respjson.Field
		GeoDatum                       respjson.Field
		Month                          respjson.Field
		OpExInfo                       respjson.Field
		OpExInfoAlt                    respjson.Field
		Origin                         respjson.Field
		OrigNetwork                    respjson.Field
		PlanOrigNum                    respjson.Field
		Qualifier                      respjson.Field
		QualSn                         respjson.Field
		RawFileUri                     respjson.Field
		SerialNum                      respjson.Field
		SourceDl                       respjson.Field
		StopQualifier                  respjson.Field
		StopTime                       respjson.Field
		UndLnkTrks                     respjson.Field
		ExtraFields                    map[string]respjson.Field
		raw                            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirspacecontrolorderFull) RawJSON() string { return r.JSON.raw }
func (r *AirspacecontrolorderFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirspacecontrolorderFullDataMode string

const (
	AirspacecontrolorderFullDataModeReal      AirspacecontrolorderFullDataMode = "REAL"
	AirspacecontrolorderFullDataModeTest      AirspacecontrolorderFullDataMode = "TEST"
	AirspacecontrolorderFullDataModeSimulated AirspacecontrolorderFullDataMode = "SIMULATED"
	AirspacecontrolorderFullDataModeExercise  AirspacecontrolorderFullDataMode = "EXERCISE"
)

// Mandatory nested segment to report multiple airspace control means statuses
// within an ACOID.
type AirspacecontrolorderFullAirspaceControlMeansStatus struct {
	// A conditional nested segment to report multiple airspace control means within a
	// particular airspace control means status.
	AirspaceControlMeans []AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMean `json:"airspaceControlMeans"`
	// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
	CmStat string `json:"cmStat"`
	// Airspace control means name or designator. Mandatory if acmStat equals "DELETE,"
	// otherwise this field is prohibited.
	CmStatID []string `json:"cmStatId"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AirspaceControlMeans respjson.Field
		CmStat               respjson.Field
		CmStatID             respjson.Field
		ExtraFields          map[string]respjson.Field
		raw                  string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirspacecontrolorderFullAirspaceControlMeansStatus) RawJSON() string { return r.JSON.raw }
func (r *AirspacecontrolorderFullAirspaceControlMeansStatus) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// A conditional nested segment to report multiple airspace control means within a
// particular airspace control means status.
type AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMean struct {
	// The controlPoint set describes any reference/controlling/rendezvous point for a
	// given airspace control means.
	AirspaceControlPoint []AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint `json:"airspaceControlPoint"`
	// The timePeriods set describes the effective datetime for a given airspace
	// control means.
	AirspaceTimePeriod []AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod `json:"airspaceTimePeriod"`
	// A bearing measured from true North, in angular degrees. If cmShape is set to
	// "POLYARC" or "RADARC", this field is required and is mapped to the "beginning"
	// radial bearing parameter.
	Bearing0 float64 `json:"bearing0"`
	// A bearing measured from true North, in angular degrees. If cmShape is set to
	// "POLYARC" or "RADARC", this field is required and is mapped to the "ending"
	// radial bearing parameter.
	Bearing1 float64 `json:"bearing1"`
	// Airspace control means name or designator.
	CmID string `json:"cmId"`
	// Designates the geometric type that defines the airspace shape. One of CIRCLE,
	// CORRIDOR, LINE, ORBIT, etc.
	//
	// Any of "POLYARC", "1TRACK", "POLYGON", "CIRCLE", "CORRIDOR", "APOINT", "AORBIT",
	// "GEOLINE".
	CmShape string `json:"cmShape"`
	// The code for the type of airspace control means.
	CmType string `json:"cmType"`
	// The commander responsible within a specified geographical area for the airspace
	// control operation assigned to him.
	CntrlAuth string `json:"cntrlAuth"`
	// The frequency for the airspace control authority. Can specify HZ, KHZ, MHZ, GHZ
	// or a DESIG frequency designator code.
	CntrlAuthFreqs []string `json:"cntrlAuthFreqs"`
	// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
	// format. The fields coord0 and coord1 should be used in the specification of any
	// airspace control shape that requires exactly one (1) or two (2) reference points
	// for construction. For shapes requiring one reference point, for instance, when
	// cmShape is set to "APOINT", this field is required and singularly defines the
	// shape. Similarly, this field is required to define the center point of a
	// "CIRCLE" shape, or the "origin of bearing" for arcs.
	Coord0 string `json:"coord0"`
	// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
	// format. The fields coord0 and coord1 should be used in the specification of any
	// airspace control shape that requires exactly one (1) or two (2) reference points
	// for construction. For shapes requiring one reference point, for instance, when
	// cmShape is set to "APOINT", this field is required and singularly defines the
	// shape. Similarly, this field is required to define the center point of a
	// "CIRCLE" shape, or the "origin of bearing" for arcs.
	Coord1 string `json:"coord1"`
	// An array of at least two alphanumeric symbols used to serially identify the
	// corridor waypoints. If cmShape is set to "CORRIDOR", one of either corrWayPoints
	// or polyCoord is required to specify the centerline of the corridor path.
	CorrWayPoints []string `json:"corrWayPoints"`
	// Description of the airspace vertical dimension.
	EffVDim string `json:"effVDim"`
	// General informat detailing the transit instruction for the airspace control
	// means.
	FreeText string `json:"freeText"`
	// Used to provide transit instructions for the airspace control means.
	GenTextInd string `json:"genTextInd"`
	// Specifies the geodetic datum by which the spatial coordinates of the controlled
	// airspace are calculated, if different from the top level ACO datum.
	GeoDatumAlt string `json:"geoDatumAlt"`
	// Unique Link 16 identifier assigned to the airspace control means.
	Link16ID string `json:"link16Id"`
	// Orbit alignment look-up code. Can be C=Center, L=Left, R=Right.
	OrbitAlignment string `json:"orbitAlignment"`
	// A set of geospatial coordinates specified in DMS (Degrees, Minutes, Seconds)
	// format which determine the vertices of a one or two dimensional geospatial
	// shape. When cmShape is set to "POLYARC" or "POLYGON", this field is required as
	// applied in the construction of the area boundary. If cmShape is set to
	// "CORRIDOR" or "GEOLINE", this field is required and can be interpreted as an
	// ordered set of points along a path in space.
	PolyCoord []string `json:"polyCoord"`
	// A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or
	// "POLYARC", one of either fields radMag0 or radMag1 is required. If cmShape is
	// set to "RADARC", this field is required and maps to the "inner" radial magnitude
	// arc limit. If provided, the field radMagUnit is required.
	RadMag0 float64 `json:"radMag0"`
	// A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or
	// "POLYARC", one of either fields radMag0 or radMag1 is required. If cmShape is
	// set to "RADARC", this field is required and maps to the "outer" radial magnitude
	// arc limit. If provided, the field radMagUnit is required.
	RadMag1 float64 `json:"radMag1"`
	// Specifies the unit of length in which radial magnitudes are given. Use M for
	// meters, KM for kilometers, or NM for nautical miles.
	RadMagUnit string `json:"radMagUnit"`
	// Index of a segment in an airtrack, which is defined by an ordered set of points.
	TrackLeg int64 `json:"trackLeg"`
	// The altitude at or below which the vertical position of an aircraft is
	// controlled by reference to true altitude.
	TransAltitude string `json:"transAltitude"`
	// Designates the means by which a defined airspace control means is to be used.
	Usage string `json:"usage"`
	// Used to describe the "side to side" distance of a target, object or area. If
	// cmShape is set to "CORRIDOR" or "AORBIT", this field is required and is mapped
	// to the width parameter. If provided, the field widthUnit is required.
	Width float64 `json:"width"`
	// Given an ordered pair of spatial coordinates (p0, p1), defines a distance
	// extending into the LEFT half-plane relative to the direction of the vector that
	// maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define
	// the width of the airspace track as measured from the left of the track segment
	// line. If provided, the field widthUnit is required.
	WidthLeft float64 `json:"widthLeft"`
	// Given an ordered pair of spatial coordinates (p0, p1), defines a distance
	// extending into the RIGHT half-plane relative to the direction of the vector that
	// maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define
	// the width of the airspace track as measured from the right of the track segment
	// line. If provided, the field widthUnit is required.
	WidthRight float64 `json:"widthRight"`
	// Specifies the unit of length for which widths are given. Use M for meters, KM
	// for kilometers, or NM for nautical miles.
	WidthUnit string `json:"widthUnit"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AirspaceControlPoint respjson.Field
		AirspaceTimePeriod   respjson.Field
		Bearing0             respjson.Field
		Bearing1             respjson.Field
		CmID                 respjson.Field
		CmShape              respjson.Field
		CmType               respjson.Field
		CntrlAuth            respjson.Field
		CntrlAuthFreqs       respjson.Field
		Coord0               respjson.Field
		Coord1               respjson.Field
		CorrWayPoints        respjson.Field
		EffVDim              respjson.Field
		FreeText             respjson.Field
		GenTextInd           respjson.Field
		GeoDatumAlt          respjson.Field
		Link16ID             respjson.Field
		OrbitAlignment       respjson.Field
		PolyCoord            respjson.Field
		RadMag0              respjson.Field
		RadMag1              respjson.Field
		RadMagUnit           respjson.Field
		TrackLeg             respjson.Field
		TransAltitude        respjson.Field
		Usage                respjson.Field
		Width                respjson.Field
		WidthLeft            respjson.Field
		WidthRight           respjson.Field
		WidthUnit            respjson.Field
		ExtraFields          map[string]respjson.Field
		raw                  string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMean) RawJSON() string {
	return r.JSON.raw
}
func (r *AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMean) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// The controlPoint set describes any reference/controlling/rendezvous point for a
// given airspace control means.
type AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint struct {
	// The altitude of the control point.
	CtrlPtAltitude string `json:"ctrlPtAltitude"`
	// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
	// format that represents the location of the control point.
	CtrlPtLocation string `json:"ctrlPtLocation"`
	// The name applied to the control point, used as a reference.
	CtrlPtName string `json:"ctrlPtName"`
	// One of possible control point type codes, such as CP, ER, OT, etc.
	CtrlPtType string `json:"ctrlPtType"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		CtrlPtAltitude respjson.Field
		CtrlPtLocation respjson.Field
		CtrlPtName     respjson.Field
		CtrlPtType     respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint) RawJSON() string {
	return r.JSON.raw
}
func (r *AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// The timePeriods set describes the effective datetime for a given airspace
// control means.
type AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod struct {
	// Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval
	// frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a
	// datetime like string.
	IntDur []string `json:"intDur"`
	// Mandatory if timeMode is INTERVAL. Can be one of the interval frequency codes,
	// such as BIWEEKLY, DAILY, YEARLY, etc.
	IntFreq []string `json:"intFreq"`
	// The end time designating that the airspace control order is no longer active.
	// Can contain datetime information or a stop time qualifier code, such as AFTER,
	// NET, UFN, etc.
	TimeEnd string `json:"timeEnd"`
	// The airspace time code associated with the ACO. Can be DISCRETE, a fixed time
	// block, or INTERVAL, a repeating time block.
	TimeMode string `json:"timeMode"`
	// The start time designating that the airspace control order is active.
	TimeStart string `json:"timeStart"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		IntDur      respjson.Field
		IntFreq     respjson.Field
		TimeEnd     respjson.Field
		TimeMode    respjson.Field
		TimeStart   respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod) RawJSON() string {
	return r.JSON.raw
}
func (r *AirspacecontrolorderFullAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// The airspaceControlReferences set provides both USMTF and non-USMTF references
// for this airspace control order.
type AirspacecontrolorderFullAirspaceControlOrderReference struct {
	// The originator of this reference.
	RefOriginator string `json:"refOriginator"`
	// The reference serial number.
	RefSerialNum string `json:"refSerialNum"`
	// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document
	// being referenced.
	RefSiCs []string `json:"refSICs"`
	// Specifies an alphabetic serial number identifying a reference pertaining to this
	// message.
	RefSID string `json:"refSId"`
	// Indicates any special actions, restrictions, guidance, or information relating
	// to this reference.
	RefSpecialNotation string `json:"refSpecialNotation"`
	// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond
	// precision.
	RefTs time.Time `json:"refTs" format:"date-time"`
	// Specifies the type for this reference.
	RefType string `json:"refType"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		RefOriginator      respjson.Field
		RefSerialNum       respjson.Field
		RefSiCs            respjson.Field
		RefSID             respjson.Field
		RefSpecialNotation respjson.Field
		RefTs              respjson.Field
		RefType            respjson.Field
		ExtraFields        map[string]respjson.Field
		raw                string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirspacecontrolorderFullAirspaceControlOrderReference) RawJSON() string { return r.JSON.raw }
func (r *AirspacecontrolorderFullAirspaceControlOrderReference) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Self-reported information obtained from Automatic Identification System (AIS)
// equipment. This contains information such as unique identification, status,
// position, course, and speed. The AIS is an automatic tracking system that uses
// transceivers on ships and is used by vessel traffic services. Although
// technically and operationally distinct, the AIS system is analogous to ADS-B
// that performs a similar function for aircraft. AIS is intended to assist a
// vessel's watchstanding officers and allow maritime authorities to track and
// monitor vessel movements. AIS integrates a standardized VHF transceiver with a
// positioning system such as Global Positioning System receiver, with other
// electronic navigation sensors, such as gyrocompass or rate of turn indicator.
// Vessels fitted with AIS transceivers can be tracked by AIS base stations located
// along coast lines or, when out of range of terrestrial networks, through a
// growing number of satellites that are fitted with special AIS receivers which
// are capable of deconflicting a large number of signatures.
type AIsFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AIsFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The reference dimensions of the vessel, reported as [A, B, C, D], in meters.
	// Where the array values represent the distance fore (A), aft (B), to port (C),
	// and to starboard (D) of the navigation antenna. Array with values A = C = 0 and
	// B, D > 0 indicate the length (B) and width (D) of the vessel without antenna
	// position reference.
	AntennaRefDimensions []float64 `json:"antennaRefDimensions"`
	// The average speed, in kilometers/hour, calculated for the subject vessel during
	// the latest voyage (port to port).
	AvgSpeed float64 `json:"avgSpeed"`
	// A uniquely designated identifier for the vessel's transmitter station.
	CallSign string `json:"callSign"`
	// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN
	// AIS cargo definitions. Users should refer to USCG Navigation Center
	// documentation for specific definitions associated with ship and cargo types.
	// USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
	CargoType string `json:"cargoType"`
	// The course-over-ground reported by the vessel, in degrees.
	Course float64 `json:"course"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The US Geographic Unique Identifier of the current port hosting the vessel.
	CurrentPortGuid string `json:"currentPortGUID"`
	// The UN Location Code of the current port hosting the vessel.
	CurrentPortLocode string `json:"currentPortLOCODE"`
	// The destination of the vessel according to the AIS transmission.
	Destination string `json:"destination"`
	// The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC
	// format.
	DestinationEta time.Time `json:"destinationETA" format:"date-time"`
	// The remaining distance, in kilometers, for the vessel to reach the reported
	// destination.
	DistanceToGo float64 `json:"distanceToGo"`
	// The distance, in kilometers, that the vessel has travelled since departing the
	// last port.
	DistanceTravelled float64 `json:"distanceTravelled"`
	// The maximum static draught, in meters, of the vessel according to the AIS
	// transmission.
	Draught float64 `json:"draught"`
	// The activity that the vessel is engaged in. This entry applies only when the
	// shipType = Other.
	EngagedIn string `json:"engagedIn"`
	// The Estimated Time of Arrival of the vessel at the destination port, according
	// to MarineTraffic calculations, in ISO 8601 UTC format.
	EtaCalculated time.Time `json:"etaCalculated" format:"date-time"`
	// The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC
	// format.
	EtaUpdated time.Time `json:"etaUpdated" format:"date-time"`
	// Unique identifier of the Track.
	IDTrack string `json:"idTrack"`
	// Unique identifier of the vessel.
	IDVessel string `json:"idVessel"`
	// The International Maritime Organization Number of the vessel. IMON is a
	// seven-digit number that uniquely identifies the vessel.
	Imon int64 `json:"imon"`
	// The US Geographic Unique Identifier of the last port visited by the vessel.
	LastPortGuid string `json:"lastPortGUID"`
	// The UN Location Code of the last port visited by the vessel.
	LastPortLocode string `json:"lastPortLOCODE"`
	// WGS-84 latitude of the vessel position, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	Lat float64 `json:"lat"`
	// The overall length of the vessel, in meters. A value of 511 indicates a vessel
	// length of 511 meters or greater.
	Length float64 `json:"length"`
	// WGS-84 longitude of the vessel position, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// The maximum speed, in kilometers/hour, reported by the subject vessel during the
	// latest voyage (port to port).
	MaxSpeed float64 `json:"maxSpeed"`
	// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number
	// that identifies the transmitter station of the vessel.
	Mmsi int64 `json:"mmsi"`
	// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored,
	// Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation
	// status definitions. Users should refer to USCG Navigation Center documentation
	// for specific definitions associated with navigation status. USCG NAVCEN
	// documentation may be found at https://www.navcen.uscg.gov.
	NavStatus string `json:"navStatus"`
	// The US Geographic Unique Identifier of the next destination port of the vessel.
	NextPortGuid string `json:"nextPortGUID"`
	// The UN Location Code of the next destination port of the vessel.
	NextPortLocode string `json:"nextPortLOCODE"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.).
	// Intended as, but not constrained to, the USCG NAVCEN electronic position fixing
	// device definitions. Users should refer to USCG Navigation Center documentation
	// for specific device type information. USCG NAVCEN documentation may be found at
	// https://www.navcen.uscg.gov.
	PosDeviceType string `json:"posDeviceType"`
	// Flag indicating high reported position accuracy (less than or equal to 10
	// meters). A value of 0/false indicates low accuracy (greater than 10 meters).
	PosHiAccuracy bool `json:"posHiAccuracy"`
	// Flag indicating high reported position latency (greater than 5 seconds). A value
	// of 0/false indicates low latency (less than 5 seconds).
	PosHiLatency bool `json:"posHiLatency"`
	// The Rate-of-Turn for the vessel, in degrees/minute. Positive value indicates
	// that the vessel is turning right.
	RateOfTurn float64 `json:"rateOfTurn"`
	// Further description or explanation of the vessel or type.
	ShipDescription string `json:"shipDescription"`
	// The name of the vessel. Vessel names that exceed the AIS 20 character are
	// shortened (not truncated) to 15 character-spaces, followed by an underscore and
	// the last 4 characters-spaces of the vessel full name.
	ShipName string `json:"shipName"`
	// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.). See the
	// engagedIn and specialCraft entries for additional information on certain types
	// of vessels.
	ShipType string `json:"shipType"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The type of special craft designation of the vessel. This entry applies only
	// when the shipType = Special Craft.
	SpecialCraft string `json:"specialCraft"`
	// Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway
	// Navigation).
	SpecialManeuver bool `json:"specialManeuver"`
	// The speed-over-ground reported by the vessel, in kilometers/hour.
	Speed float64 `json:"speed"`
	// The true heading reported by the vessel, in degrees.
	TrueHeading float64 `json:"trueHeading"`
	// The flag of the subject vessel according to AIS transmission.
	VesselFlag string `json:"vesselFlag"`
	// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth
	// of 63 meters or greater.
	Width float64 `json:"width"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		Ts                    respjson.Field
		ID                    respjson.Field
		AntennaRefDimensions  respjson.Field
		AvgSpeed              respjson.Field
		CallSign              respjson.Field
		CargoType             respjson.Field
		Course                respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CurrentPortGuid       respjson.Field
		CurrentPortLocode     respjson.Field
		Destination           respjson.Field
		DestinationEta        respjson.Field
		DistanceToGo          respjson.Field
		DistanceTravelled     respjson.Field
		Draught               respjson.Field
		EngagedIn             respjson.Field
		EtaCalculated         respjson.Field
		EtaUpdated            respjson.Field
		IDTrack               respjson.Field
		IDVessel              respjson.Field
		Imon                  respjson.Field
		LastPortGuid          respjson.Field
		LastPortLocode        respjson.Field
		Lat                   respjson.Field
		Length                respjson.Field
		Lon                   respjson.Field
		MaxSpeed              respjson.Field
		Mmsi                  respjson.Field
		NavStatus             respjson.Field
		NextPortGuid          respjson.Field
		NextPortLocode        respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PosDeviceType         respjson.Field
		PosHiAccuracy         respjson.Field
		PosHiLatency          respjson.Field
		RateOfTurn            respjson.Field
		ShipDescription       respjson.Field
		ShipName              respjson.Field
		ShipType              respjson.Field
		SourceDl              respjson.Field
		SpecialCraft          respjson.Field
		SpecialManeuver       respjson.Field
		Speed                 respjson.Field
		TrueHeading           respjson.Field
		VesselFlag            respjson.Field
		Width                 respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AIsFull) RawJSON() string { return r.JSON.raw }
func (r *AIsFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AIsFullDataMode string

const (
	AIsFullDataModeReal      AIsFullDataMode = "REAL"
	AIsFullDataModeTest      AIsFullDataMode = "TEST"
	AIsFullDataModeSimulated AIsFullDataMode = "SIMULATED"
	AIsFullDataModeExercise  AIsFullDataMode = "EXERCISE"
)

// The analytic imagery schema supports data plots and graphics of various types.
// The records contain general file information, allows for annotations to
// user-defined areas of interest on the graphics, and supports keyword searching.
type AnalyticImageryFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM,
	// PLOT, SCREENSHOT).
	Content string `json:"content,required"`
	// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AnalyticImageryFullDataMode `json:"dataMode,required"`
	// Description of the image content and utility.
	Description string `json:"description,required"`
	// The image file name.
	Filename string `json:"filename,required"`
	// The image file size, in bytes. The maximum file size for this service is
	// 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.
	Filesize int64 `json:"filesize,required"`
	// The type of image associated with this record (GIF, JPG, PNG, TIF).
	ImageType string `json:"imageType,required"`
	// The message time of this image record, in ISO8601 UTC format with millisecond
	// precision.
	MsgTime time.Time `json:"msgTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
	// representation of the geometry/geography, of the image as projected on the
	// ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
	// or PUT request that also specifies a valid 'area' or 'atext' field.
	Agjson string `json:"agjson"`
	// Number of dimensions of the geometry depicted by region.
	Andims int64 `json:"andims"`
	// Rectangular annotation limits, specified in pixels, as an array of arrays of the
	// coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ],
	// indicating the corners of a rectangle beginning with the Upper Left (UL) and
	// moving clockwise. Allows the image provider to highlight one or more rectangular
	// area(s) of interest. The array must contain Nx4 two-element arrays, where N is
	// the number of rectangles of interest. The associated annotation(s) should be
	// included in the annText array.
	AnnLims [][]int64 `json:"annLims"`
	// Annotation text, a string array of annotation(s) corresponding to the
	// rectangular areas specified in annLims. This array contains the annotation text
	// associated with the areas of interest indicated in annLims, in order. This array
	// should contain one annotation per four values of the area (annLims) array.
	AnnText []string `json:"annText"`
	// Optional geographical region or polygon (lat/lon pairs) of the area surrounding
	// the point of interest as projected on the ground.
	Area string `json:"area"`
	// Geographical spatial_ref_sys for region.
	Asrid int64 `json:"asrid"`
	// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
	// Text representation of the geometry/geography, of the image as projected on the
	// ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
	// if included with a POST or PUT request that also specifies a valid 'area' field.
	Atext string `json:"atext"`
	// Type of region as projected on the ground.
	Atype string `json:"atype"`
	// MD5 checksum value of the file. The ingest/create operation will automatically
	// generate the value.
	ChecksumValue string `json:"checksumValue"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The start time, in ISO8601 UTC format with millisecond precision, of the data
	// used in the analysis or composition of the image content, when applicable.
	DataStart time.Time `json:"dataStart" format:"date-time"`
	// The stop time, in ISO8601 UTC format with millisecond precision, of the data
	// used in the analysis or composition of the image content, when applicable.
	DataStop time.Time `json:"dataStop" format:"date-time"`
	// A collection of feature assessments associated with the analytic imagery record.
	FeatureAssessments []AnalyticImageryFullFeatureAssessment `json:"featureAssessments"`
	// Unique identifier of the reporting sensor.
	IDSensor string `json:"idSensor"`
	// User-defined set ID of a sequence of images. Used to associate related analytic
	// image records.
	ImageSetID string `json:"imageSetId"`
	// The number of images in an image set.
	ImageSetLength int64 `json:"imageSetLength"`
	// The image height (vertical), in pixels.
	ImgHeight int64 `json:"imgHeight"`
	// The image width (horizontal), in pixels.
	ImgWidth int64 `json:"imgWidth"`
	// Array of searchable keywords for this analytic imagery record.
	Keywords []string `json:"keywords"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the source to indicate the sensor for this
	// collection. This may be an internal identifier and not necessarily a valid
	// sensor ID.
	OrigSensorID string `json:"origSensorId"`
	// Assessed satellite ID (NORAD RSO object number). The 'satId' and 'satIdConf'
	// arrays must match in size.
	SatID []string `json:"satId"`
	// Assessed satellite confidence corresponding to an assessment ID. Values are
	// between 0.0 and 1.0. The 'satId' and 'satIdConf' arrays must match in size.
	SatIDConf []float64 `json:"satIdConf"`
	// The sequence number of an image within an image set. If null, then it is assumed
	// that the order of images in an imageSet is not relevant.
	SequenceID int64 `json:"sequenceId"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Array of UUIDs of the UDL data records that are related to this image. See the
	// associated 'srcTyps' array for the specific types of data, positionally
	// corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must
	// match in size. See the corresponding srcTyps array element for the data type of
	// the UUID and use the appropriate API operation to retrieve that object.
	SrcIDs []string `json:"srcIds"`
	// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
	// POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
	// are related to this image. See the associated 'srcIds' array for the record
	// UUIDs, positionally corresponding to the record types in this array. The
	// 'srcTyps' and 'srcIds' arrays must match in size.
	SrcTyps []string `json:"srcTyps"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Optional field indicating the units that apply to the x-axis of the attached
	// image, when applicable.
	XUnits string `json:"xUnits"`
	// Optional field indicating the units that apply to the y-axis of the attached
	// image, when applicable.
	YUnits string `json:"yUnits"`
	// Optional field indicating the units that apply to the z-axis of the attached
	// image, when applicable.
	ZUnits string `json:"zUnits"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		Content               respjson.Field
		DataMode              respjson.Field
		Description           respjson.Field
		Filename              respjson.Field
		Filesize              respjson.Field
		ImageType             respjson.Field
		MsgTime               respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Agjson                respjson.Field
		Andims                respjson.Field
		AnnLims               respjson.Field
		AnnText               respjson.Field
		Area                  respjson.Field
		Asrid                 respjson.Field
		Atext                 respjson.Field
		Atype                 respjson.Field
		ChecksumValue         respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DataStart             respjson.Field
		DataStop              respjson.Field
		FeatureAssessments    respjson.Field
		IDSensor              respjson.Field
		ImageSetID            respjson.Field
		ImageSetLength        respjson.Field
		ImgHeight             respjson.Field
		ImgWidth              respjson.Field
		Keywords              respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigSensorID          respjson.Field
		SatID                 respjson.Field
		SatIDConf             respjson.Field
		SequenceID            respjson.Field
		SourceDl              respjson.Field
		SrcIDs                respjson.Field
		SrcTyps               respjson.Field
		Tags                  respjson.Field
		TransactionID         respjson.Field
		XUnits                respjson.Field
		YUnits                respjson.Field
		ZUnits                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AnalyticImageryFull) RawJSON() string { return r.JSON.raw }
func (r *AnalyticImageryFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
type AnalyticImageryFullDataMode string

const (
	AnalyticImageryFullDataModeReal      AnalyticImageryFullDataMode = "REAL"
	AnalyticImageryFullDataModeTest      AnalyticImageryFullDataMode = "TEST"
	AnalyticImageryFullDataModeSimulated AnalyticImageryFullDataMode = "SIMULATED"
	AnalyticImageryFullDataModeExercise  AnalyticImageryFullDataMode = "EXERCISE"
)

// Feature assessments obtained from imagery analysis or other data analytics.
// Feature assessments are georeferenced terrestrial features such as marine
// vessels, vehicles, buildings, etc., or contain other types of non terrestrial
// assessments such as spacecraft structures. Geospatial queries are supported
// through either the regionText (WKT) or regionGeoJSON fields.
type AnalyticImageryFullFeatureAssessment struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Datetime type value associated with this record, in ISO 8601 UTC format with
	// millisecond precision.
	FeatureTs time.Time `json:"featureTs,required" format:"date-time"`
	// The Unit of Measure associated with this feature. If there are no physical units
	// associated with the feature a value of NONE should be specified.
	FeatureUoM string `json:"featureUoM,required"`
	// Unique identifier of the Analytic Imagery associated with this Feature
	// Assessment record.
	IDAnalyticImagery string `json:"idAnalyticImagery,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
	// representation of the geometry/geography, of the feature assessment as projected
	// on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with
	// a POST or PUT request that also specifies a valid 'area' or 'atext' field.
	Agjson string `json:"agjson"`
	// Number of dimensions of the geometry depicted by region.
	Andims int64 `json:"andims"`
	// Polygonal annotation limits, specified in pixels, as an array of arrays N x M.
	// Allows the image provider to highlight one or more polygonal area(s) of
	// interest. The array must contain NxM two-element arrays, where N is the number
	// of polygons of interest. The associated annotation(s) should be included in the
	// annText array.
	AnnLims [][]int64 `json:"annLims"`
	// Annotation text, a string array of annotation(s) corresponding to the
	// rectangular areas specified in annLims. This array contains the annotation text
	// associated with the areas of interest indicated in annLims, in order. This array
	// should contain one annotation per four values of the area (annLims) array.
	AnnText []string `json:"annText"`
	// Optional geographical region or polygon (lat/lon pairs) of the area surrounding
	// the feature assessment as projected on the ground.
	Area string `json:"area"`
	// Geographical spatial_ref_sys for region.
	Asrid int64 `json:"asrid"`
	// Descriptive or additional information associated with this feature/assessment.
	Assessment string `json:"assessment"`
	// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
	// Text representation of the geometry/geography, of the feature assessment as
	// projected on the ground. WKT reference:
	// https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a
	// POST or PUT request that also specifies a valid 'area' field.
	Atext string `json:"atext"`
	// Type of region as projected on the ground (POLYGON, POINT, LINE).
	Atype string `json:"atype"`
	// Analytic confidence of feature accuracy (0 to 1).
	Confidence float64 `json:"confidence"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Feature Assessment ID from external systems. This field has no meaning within
	// UDL and is provided as a convenience for systems that require tracking of an
	// internal system generated ID.
	ExternalID string `json:"externalId"`
	// An array of numeric feature/assessment values expressed in the specified unit of
	// measure (obUoM). Because of the variability of the Feature Assessment data
	// types, each record may employ a numeric observation value (featureValue), a
	// string observation value (featureString), a Boolean observation value
	// (featureBool), an array of numeric observation values (featureArray), or any
	// combination of these.
	FeatureArray []float64 `json:"featureArray"`
	// A boolean feature/assessment. Because of the variability of the Feature
	// Assessment data types, each record may employ a numeric observation value
	// (featureValue), a string observation value (featureString), a Boolean
	// observation value (featureBool), an array of numeric observation values
	// (featureArray), or any combination of these.
	FeatureBool bool `json:"featureBool"`
	// A single feature/assessment string expressed in the specified unit of measure
	// (obUoM). Because of the variability of the Feature Assessment data types, each
	// record may employ a numeric observation value (featureValue), a string
	// observation value (featureString), a Boolean observation value (featureBool), an
	// array of numeric observation values (featureArray), or any combination of these.
	FeatureString string `json:"featureString"`
	// An array of string feature/assessment expressions. Because of the variability of
	// the Feature Assessment data types, each record may employ a numeric observation
	// value (featureValue), a string observation value (featureString), a Boolean
	// observation value (featureBool), an array of numeric observation values
	// (featureArray), or any combination of these.
	FeatureStringArray []string `json:"featureStringArray"`
	// A single feature/assessment value expressed in the specified unit of measure
	// (obUoM). Because of the variability of the Feature Assessment data types, each
	// record may employ a numeric observation value (featureValue), a string
	// observation value (featureString), a Boolean observation value (featureBool), an
	// array of numeric observation values (featureArray), or any combination of these.
	FeatureValue float64 `json:"featureValue"`
	// The feature object heading, in degrees clockwise from true North at the object
	// location.
	Heading float64 `json:"heading"`
	// Estimated physical height of the feature, in meters.
	Height float64 `json:"height"`
	// Estimated physical length of the feature, in meters.
	Length float64 `json:"length"`
	// Source defined name of the feature associated with this record. If an annotation
	// for this feature element exists on the parent image it can be referenced here.
	Name string `json:"name"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Feature's speed of travel, in meters per second.
	Speed float64 `json:"speed"`
	// Array of UUIDs of the UDL data records that are related to the determination of
	// this activity or event. See the associated 'srcTyps' array for the specific
	// types of data, positionally corresponding to the UUIDs in this array. The
	// 'srcTyps', 'srcIds', and 'srcTs' arrays must contain the same number of
	// elements. See the corresponding srcTyps array element for the data type of the
	// UUID and use the appropriate API operation to retrieve that object.
	SrcIDs []string `json:"srcIds"`
	// Array of the primary timestamps, in ISO 8601 UTC format, with appropriate
	// precision for the datatype of each correspondng srcTyp/srcId record. See the
	// associated 'srcTyps' and 'srcIds' arrays for the record type and UUID,
	// respectively, positionally corresponding to the record types in this array. The
	// 'srcTyps', 'srcIds', and 'srcTs' arrays must contain the same number of
	// elements. These timestamps are included to support services which do not include
	// a GET by {id} operation. If referencing a datatype which does not include a
	// primary timestamp, the corresponding srcTs array element should be included as
	// null.
	SrcTs []time.Time `json:"srcTs" format:"date-time"`
	// Array of UDL record types (AIS, GROUNDIMAGE, MTI, ONORBIT, POI, SAR, SKYIMAGE,
	// SOI, TRACK) related to this feature assessment. See the associated 'srcIds' and
	// 'srcTs' arrays for the record UUIDs and timetsmps. respectively, positionally
	// corresponding to the record types in this array. The 'srcTyps', 'srcIds', and
	// 'srcTs' arrays must contain the same number of elements.
	SrcTyps []string `json:"srcTyps"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// The type of feature (e.g. AIRCRAFT, ANTENNA, SOLAR ARRAY, SITE, STRUCTURE,
	// VESSEL, VEHICLE, UNKNOWN, etc.) detailed in this feature assessment record. This
	// type may be a primary feature within an image, for example a VESSEL, or may be a
	// component or characteristic of a primary feature, for example an ANTENNA mounted
	// on a vessel.
	Type string `json:"type"`
	// Estimated physical width of the feature, in meters.
	Width float64 `json:"width"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		FeatureTs             respjson.Field
		FeatureUoM            respjson.Field
		IDAnalyticImagery     respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Agjson                respjson.Field
		Andims                respjson.Field
		AnnLims               respjson.Field
		AnnText               respjson.Field
		Area                  respjson.Field
		Asrid                 respjson.Field
		Assessment            respjson.Field
		Atext                 respjson.Field
		Atype                 respjson.Field
		Confidence            respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		ExternalID            respjson.Field
		FeatureArray          respjson.Field
		FeatureBool           respjson.Field
		FeatureString         respjson.Field
		FeatureStringArray    respjson.Field
		FeatureValue          respjson.Field
		Heading               respjson.Field
		Height                respjson.Field
		Length                respjson.Field
		Name                  respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		SourceDl              respjson.Field
		Speed                 respjson.Field
		SrcIDs                respjson.Field
		SrcTs                 respjson.Field
		SrcTyps               respjson.Field
		Tags                  respjson.Field
		TransactionID         respjson.Field
		Type                  respjson.Field
		Width                 respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AnalyticImageryFullFeatureAssessment) RawJSON() string { return r.JSON.raw }
func (r *AnalyticImageryFullFeatureAssessment) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Detailed information for a spacecraft communication antenna. One antenna may
// have multiple AntennaDetails records, compiled by various sources.
type AntennaDetailsFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AntennaDetailsFullDataMode `json:"dataMode,required"`
	// Unique identifier of the parent Antenna.
	IDAntenna string `json:"idAntenna,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Boolean indicating if this is a beam forming antenna.
	BeamForming bool `json:"beamForming"`
	// Array of angles between the half-power (-3 dB) points of the main lobe of the
	// antenna, in degrees.
	Beamwidth float64 `json:"beamwidth"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Antenna description.
	Description string `json:"description"`
	// Antenna diameter in meters.
	Diameter float64 `json:"diameter"`
	// Antenna end of frequency range in Mhz.
	EndFrequency float64 `json:"endFrequency"`
	// Antenna maximum gain in dBi.
	Gain float64 `json:"gain"`
	// Antenna gain tolerance in dB.
	GainTolerance float64 `json:"gainTolerance"`
	// An organization such as a corporation, manufacturer, consortium, government,
	// etc. An organization may have parent and child organizations as well as link to
	// a former organization if this org previously existed as another organization.
	ManufacturerOrg OrganizationFull `json:"manufacturerOrg"`
	// ID of the organization that manufactures the antenna.
	ManufacturerOrgID string `json:"manufacturerOrgId"`
	// Antenna mode (e.g. TX,RX).
	//
	// Any of "TX", "RX".
	Mode AntennaDetailsFullMode `json:"mode"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Antenna polarization in degrees.
	Polarization float64 `json:"polarization"`
	// Antenna position (e.g. Top, Nadir, Side).
	Position string `json:"position"`
	// Array with 1-2 values specifying the length and width (for rectangular) and just
	// length for dipole antennas in meters.
	Size []float64 `json:"size"`
	// Antenna start of frequency range in Mhz.
	StartFrequency float64 `json:"startFrequency"`
	// Boolean indicating if this antenna is steerable.
	Steerable bool `json:"steerable"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn,
	// Parabolic, etc.).
	Type string `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDAntenna             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		BeamForming           respjson.Field
		Beamwidth             respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Description           respjson.Field
		Diameter              respjson.Field
		EndFrequency          respjson.Field
		Gain                  respjson.Field
		GainTolerance         respjson.Field
		ManufacturerOrg       respjson.Field
		ManufacturerOrgID     respjson.Field
		Mode                  respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Polarization          respjson.Field
		Position              respjson.Field
		Size                  respjson.Field
		StartFrequency        respjson.Field
		Steerable             respjson.Field
		Tags                  respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AntennaDetailsFull) RawJSON() string { return r.JSON.raw }
func (r *AntennaDetailsFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AntennaDetailsFullDataMode string

const (
	AntennaDetailsFullDataModeReal      AntennaDetailsFullDataMode = "REAL"
	AntennaDetailsFullDataModeTest      AntennaDetailsFullDataMode = "TEST"
	AntennaDetailsFullDataModeSimulated AntennaDetailsFullDataMode = "SIMULATED"
	AntennaDetailsFullDataModeExercise  AntennaDetailsFullDataMode = "EXERCISE"
)

// Antenna mode (e.g. TX,RX).
type AntennaDetailsFullMode string

const (
	AntennaDetailsFullModeTx AntennaDetailsFullMode = "TX"
	AntennaDetailsFullModeRx AntennaDetailsFullMode = "RX"
)

// Model representation of information on on-orbit/spacecraft communication
// antennas. A spacecraft may have multiple antennas and each antenna can have
// multiple 'details' records compiled by different sources.
type AntennaFull struct {
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AntennaFullDataMode `json:"dataMode,required"`
	// Antenna name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Read-only collection of additional AntennaDetails by various sources for this
	// organization, ignored on create/update. These details must be created separately
	// via the /udl/antennadetails operations.
	AntennaDetails []AntennaDetailsFull `json:"antennaDetails"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DataMode       respjson.Field
		Name           respjson.Field
		Source         respjson.Field
		ID             respjson.Field
		AntennaDetails respjson.Field
		CreatedAt      respjson.Field
		CreatedBy      respjson.Field
		Origin         respjson.Field
		OrigNetwork    respjson.Field
		UpdatedAt      respjson.Field
		UpdatedBy      respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AntennaFull) RawJSON() string { return r.JSON.raw }
func (r *AntennaFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AntennaFullDataMode string

const (
	AntennaFullDataModeReal      AntennaFullDataMode = "REAL"
	AntennaFullDataModeTest      AntennaFullDataMode = "TEST"
	AntennaFullDataModeSimulated AntennaFullDataMode = "SIMULATED"
	AntennaFullDataModeExercise  AntennaFullDataMode = "EXERCISE"
)

// These services provide operations for posting and querying attitude of on-orbit
// objects. Attitude describes the orientation of an object, which can be
// represented by quaternions or euler angles. The AttitudeSet ID (asId) identifies
// the 'AttitudeSet' record which contains details of the underlying data as well
// as a collection of attitude points. Points must be retrieved by first
// identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID
// 'asId'.
type AttitudedataFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AttitudedataFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Time associated with this attitude record, in ISO 8601 UTC format, with
	// microsecond precision.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Unique identifier of the parent AttitudeSet associated with this record.
	AsID string `json:"asId"`
	// Coning angle in degrees.
	ConingAngle float64 `json:"coningAngle"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Precession axis declination (ECI J2000 frame) in degrees.
	Declination float64 `json:"declination"`
	// Unique identifier of the on-orbit satellite to which this attitude record
	// applies.
	IDOnOrbit string `json:"idOnOrbit"`
	// Label specifying type of rotational motion of target.
	MotionType string `json:"motionType"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the record source to indicate the target object
	// of this attitude record. This may be an internal identifier and not necessarily
	// map to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Precession period in seconds.
	PrecPeriod float64 `json:"precPeriod"`
	// Quaternion vector component 1.
	Q1 float64 `json:"q1"`
	// Derivative of quaternion vector component 1.
	Q1Dot float64 `json:"q1Dot"`
	// Quaternion vector component 2.
	Q2 float64 `json:"q2"`
	// Derivative of quaternion vector component 2.
	Q2Dot float64 `json:"q2Dot"`
	// Quaternion vector component 3.
	Q3 float64 `json:"q3"`
	// Derivative of quaternion vector component 3.
	Q3Dot float64 `json:"q3Dot"`
	// Quaternion scalar component.
	Qc float64 `json:"qc"`
	// Derivative of quaternion scalar component.
	QcDot float64 `json:"qcDot"`
	// Precession axis right ascension (ECI J2000 frame) in degrees.
	Ra float64 `json:"ra"`
	// Satellite/catalog number of the on-orbit object to which this attitude record
	// applies.
	SatNo int64 `json:"satNo"`
	// Spin period in seconds.
	SpinPeriod float64 `json:"spinPeriod"`
	// Array of X body rotation Euler angle(s), in degrees (-180 to 180). For repeated
	// axis rotations, the array elements should be placed in the order that the angles
	// apply in the sequence.
	XAngle []float64 `json:"xAngle"`
	// Array of X body rotation rate(s), in degrees per second. For repeated axis
	// rotations, the array elements should be placed in the order that the rates apply
	// in the sequence. Attitude rates are expressed in frame1 with respect to frame2.
	XRate []float64 `json:"xRate"`
	// Array of Y body rotation Euler angle(s), in degrees (-180 to 180). For repeated
	// axis rotations, the array elements should be placed in the order that the angles
	// apply in the sequence.
	YAngle []float64 `json:"yAngle"`
	// Array of Y body rotation rate(s), in degrees per second. For repeated axis
	// rotations, the array elements should be placed in the order that the rates apply
	// in the sequence. Attitude rates are expressed in frame1 with respect to frame2.
	YRate []float64 `json:"yRate"`
	// Array of Z body rotation Euler angle(s), in degrees (-180 to 180). For repeated
	// axis rotations, the array elements should be placed in the order that the angles
	// apply in the sequence.
	ZAngle []float64 `json:"zAngle"`
	// Array of Z body rotation rate(s), in degrees per second. For repeated axis
	// rotations, the array elements should be placed in the order that the rates apply
	// in the sequence Attitude rates are expressed in frame1 with respect to frame2.
	ZRate []float64 `json:"zRate"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		Ts                    respjson.Field
		ID                    respjson.Field
		AsID                  respjson.Field
		ConingAngle           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Declination           respjson.Field
		IDOnOrbit             respjson.Field
		MotionType            respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		PrecPeriod            respjson.Field
		Q1                    respjson.Field
		Q1Dot                 respjson.Field
		Q2                    respjson.Field
		Q2Dot                 respjson.Field
		Q3                    respjson.Field
		Q3Dot                 respjson.Field
		Qc                    respjson.Field
		QcDot                 respjson.Field
		Ra                    respjson.Field
		SatNo                 respjson.Field
		SpinPeriod            respjson.Field
		XAngle                respjson.Field
		XRate                 respjson.Field
		YAngle                respjson.Field
		YRate                 respjson.Field
		ZAngle                respjson.Field
		ZRate                 respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AttitudedataFull) RawJSON() string { return r.JSON.raw }
func (r *AttitudedataFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AttitudedataFullDataMode string

const (
	AttitudedataFullDataModeReal      AttitudedataFullDataMode = "REAL"
	AttitudedataFullDataModeTest      AttitudedataFullDataMode = "TEST"
	AttitudedataFullDataModeSimulated AttitudedataFullDataMode = "SIMULATED"
	AttitudedataFullDataModeExercise  AttitudedataFullDataMode = "EXERCISE"
)

// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and
// meta data indicating the specifics of the orientation of an on-orbit object.
// Attitude is typically distributed in a flat file containing details of the
// attitude generation as well as a large collection of individual points at
// varying time steps. AttitudeSet is analogous to this flat file.
type AttitudesetFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AttitudesetFullDataMode `json:"dataMode,required"`
	// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond
	// precision. If this set is constituted by a single epoch attitude message then
	// endTime should match the startTime.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Reference frame 1 of the quaternion or Euler angle transformation utilized in
	// this attitude parameter or attitude ephemeris. The UDL convention is that
	// transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
	// instrument name may be provided with the assumption the consumer understands the
	// location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
	// THRUSTERx, etc.).
	Frame1 string `json:"frame1,required"`
	// Reference frame 2 of the quaternion or Euler angle transformation utilized in
	// this attitude parameter or attitude ephemeris. The UDL convention is that
	// transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
	// instrument name may be provided with the assumption the consumer understands the
	// location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
	// THRUSTERx, etc.).
	Frame2 string `json:"frame2,required"`
	// Number of attitude records contained in this set.
	NumPoints int64 `json:"numPoints,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO
	// 8601 UTC format, with microsecond precision. If this set is constituted by a
	// single attitude parameter message then startTime is the epoch.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// The type of attitude message or messages associated with this set.
	//
	// AEM = Attitude Ephemeris Message, specifying the attitude state of a single
	// object at multiple epochs.
	//
	// APM = Attitude Parameters Message, specifying the attitude state of a single
	// object at a single epoch.
	Type string `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.
	// For example, a spacecraft Attitude Ephemeris Set might include a reference to an
	// Attitude Parameter Message defining the sensor to body frame transformation for
	// a sensor onboard the spacecraft, which allows for calculation of the sensor
	// orientation in frame2 of the attitude ephemeris.
	AsRef []string `json:"asRef"`
	// Collection of attitude data associated with this Attitude Set.
	AttitudeList []AttitudedataFull `json:"attitudeList"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the parent (positional) Ephemeris Set, if this data is
	// correlated with an Ephemeris.
	EsID string `json:"esId"`
	// The rotation sequence of the Euler angles in which attitude reference frame
	// transformation occurs (from left to right). One, two, or three axis rotations
	// are supported and are represented by one, two, or three characters respectively.
	// Repeated axis rotations are also supported, however, these rotations should not
	// be sequential. The numeric sequence values correspond to the body angles/rates
	// as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate. Valid
	// sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12,
	// 13, 21, 23, 31, 32, 1, 2, and 3.
	//
	// The following represent examples of possible rotation sequences: A single
	// rotation about the Y-axis can be expressed as '2', a double rotation with X-Z
	// sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can
	// be expressed as '312'.
	EulerRotSeq string `json:"eulerRotSeq"`
	// Unique identifier of the on-orbit satellite to which this attitude set applies.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the sensor to which this attitude set applies IF this set
	// is reporting a single sensor orientation.
	IDSensor string `json:"idSensor"`
	// Recommended interpolation method for estimating attitude ephemeris data.
	Interpolator string `json:"interpolator"`
	// Recommended polynomial interpolation degree.
	InterpolatorDegree int64 `json:"interpolatorDegree"`
	// Optional notes/comments for this attitude set.
	Notes string `json:"notes"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the record source to indicate the target object
	// of this attitude set. This may be an internal identifier and not necessarily map
	// to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Optional identifier provided by the record source to indicate the sensor
	// identifier to which this attitude set applies IF this set is reporting a single
	// sensor orientation. This may be an internal identifier and not necessarily a
	// valid sensor ID.
	OrigSensorID string `json:"origSensorId"`
	// Initial precession angle (ECI J2000 frame) in degrees.
	PrecAngleInit float64 `json:"precAngleInit"`
	// Satellite/catalog number of the on-orbit object to which this attitude set
	// applies.
	SatNo int64 `json:"satNo"`
	// Initial spin angle (ECI J2000 frame) in degrees.
	SpinAngleInit float64 `json:"spinAngleInit"`
	// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris
	// Messages (AEM) that employ a fixed step size.
	StepSize int64 `json:"stepSize"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		EndTime               respjson.Field
		Frame1                respjson.Field
		Frame2                respjson.Field
		NumPoints             respjson.Field
		Source                respjson.Field
		StartTime             respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		AsRef                 respjson.Field
		AttitudeList          respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EsID                  respjson.Field
		EulerRotSeq           respjson.Field
		IDOnOrbit             respjson.Field
		IDSensor              respjson.Field
		Interpolator          respjson.Field
		InterpolatorDegree    respjson.Field
		Notes                 respjson.Field
		OnOrbit               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		OrigSensorID          respjson.Field
		PrecAngleInit         respjson.Field
		SatNo                 respjson.Field
		SpinAngleInit         respjson.Field
		StepSize              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AttitudesetFull) RawJSON() string { return r.JSON.raw }
func (r *AttitudesetFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AttitudesetFullDataMode string

const (
	AttitudesetFullDataModeReal      AttitudesetFullDataMode = "REAL"
	AttitudesetFullDataModeTest      AttitudesetFullDataMode = "TEST"
	AttitudesetFullDataModeSimulated AttitudesetFullDataMode = "SIMULATED"
	AttitudesetFullDataModeExercise  AttitudesetFullDataMode = "EXERCISE"
)

// Model representation of specific spacecraft battery types.
type BatteryFull struct {
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode BatteryFullDataMode `json:"dataMode,required"`
	// Battery name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Read-only collection of additional BatteryDetails by various sources for this
	// organization, ignored on create/update. These details must be created separately
	// via the /udl/batterydetails operations.
	BatteryDetails []BatterydetailsFull `json:"batteryDetails"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DataMode       respjson.Field
		Name           respjson.Field
		Source         respjson.Field
		ID             respjson.Field
		BatteryDetails respjson.Field
		CreatedAt      respjson.Field
		CreatedBy      respjson.Field
		Origin         respjson.Field
		OrigNetwork    respjson.Field
		UpdatedAt      respjson.Field
		UpdatedBy      respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r BatteryFull) RawJSON() string { return r.JSON.raw }
func (r *BatteryFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type BatteryFullDataMode string

const (
	BatteryFullDataModeReal      BatteryFullDataMode = "REAL"
	BatteryFullDataModeTest      BatteryFullDataMode = "TEST"
	BatteryFullDataModeSimulated BatteryFullDataMode = "SIMULATED"
	BatteryFullDataModeExercise  BatteryFullDataMode = "EXERCISE"
)

// Detailed information on a spacecraft battery type compiled by a particular
// source. A Battery record may have multiple details records from several sources.
type BatterydetailsFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode BatterydetailsFullDataMode `json:"dataMode,required"`
	// Identifier of the parent battery type record.
	IDBattery string `json:"idBattery,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Battery capacity in Ah.
	Capacity float64 `json:"capacity"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Battery description/notes.
	Description string `json:"description"`
	// Depth of discharge as a percentage/fraction.
	DischargeDepth float64 `json:"dischargeDepth"`
	// An organization such as a corporation, manufacturer, consortium, government,
	// etc. An organization may have parent and child organizations as well as link to
	// a former organization if this org previously existed as another organization.
	ManufacturerOrg OrganizationFull `json:"manufacturerOrg"`
	// ID of the organization that manufactures the battery.
	ManufacturerOrgID string `json:"manufacturerOrgId"`
	// Battery model number or name.
	Model string `json:"model"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
	Technology string `json:"technology"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDBattery             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Capacity              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Description           respjson.Field
		DischargeDepth        respjson.Field
		ManufacturerOrg       respjson.Field
		ManufacturerOrgID     respjson.Field
		Model                 respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Tags                  respjson.Field
		Technology            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r BatterydetailsFull) RawJSON() string { return r.JSON.raw }
func (r *BatterydetailsFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type BatterydetailsFullDataMode string

const (
	BatterydetailsFullDataModeReal      BatterydetailsFullDataMode = "REAL"
	BatterydetailsFullDataModeTest      BatterydetailsFullDataMode = "TEST"
	BatterydetailsFullDataModeSimulated BatterydetailsFullDataMode = "SIMULATED"
	BatterydetailsFullDataModeExercise  BatterydetailsFullDataMode = "EXERCISE"
)

// Describes a satellite antenna beam.
type BeamFull struct {
	// The antenna beam ID of the particular beam for this channel. beamName is not
	// unique across payloads.
	BeamName string `json:"beamName,required"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode BeamFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Read-only collection of beamContours, ignored on create/update. These details
	// must be created separately via the /udl/beamcontour operations.
	BeamContours []BeamcontourFull `json:"beamContours"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional notes/comments on this beam.
	Notes string `json:"notes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BeamName              respjson.Field
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		BeamContours          respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Notes                 respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r BeamFull) RawJSON() string { return r.JSON.raw }
func (r *BeamFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type BeamFullDataMode string

const (
	BeamFullDataModeReal      BeamFullDataMode = "REAL"
	BeamFullDataModeTest      BeamFullDataMode = "TEST"
	BeamFullDataModeSimulated BeamFullDataMode = "SIMULATED"
	BeamFullDataModeExercise  BeamFullDataMode = "EXERCISE"
)

// Describes the beam contour associated with a beam entity. Beam contours are the
// geographic representation of the relative gain levels of beam power off of the
// maximum gain boresight points.
type BeamcontourFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode BeamcontourFullDataMode `json:"dataMode,required"`
	// ID of the beam.
	IDBeam string `json:"idBeam,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).
	// Boresight refers to the point of maximum/peak gain, and should not be confused
	// with the 'aim point' of the related beam. Gain contours are regions of coverage
	// referenced to the relative gain of the related beam. Service Areas are composed
	// of one or more service regions, with each region being either discrete point(s)
	// or a continuous contour.
	//
	// Any of "BORESIGHT", "CONTOUR", "SVC AREA".
	Type BeamcontourFullType `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The index number of this contour. The value is required if type = CONTOUR.
	ContourIdx int64 `json:"contourIdx"`
	// Time the row was created in the database, auto-populated by the system, example
	// = 2018-01-01T16:00:00.123Z.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The relative gain level in dB associated with this boresight or contour. Gain
	// does not apply to service area records. The value is required if type =
	// BORESIGHT or CONTOUR.
	Gain float64 `json:"gain"`
	// GeoJSON or Well Known Text expression of the boresight point, service area point
	// or region, or the gain contour region in geographic longitude, latitude pairs.
	// Boresight and service area point(s) are represented as a 'Point' or
	// 'MultiPoint', service areas and closed gain contours as 'Polygon', and open
	// contours as 'LineString'. This is an optional convenience field only used for
	// create operations. The system will auto-detect the format (Well Known Text or
	// GeoJSON) and populate both geographyText and geographyJson fields appropriately.
	// A create request must contain one of the geography, geographyText, or
	// geographyJson.
	Geography string `json:"geography"`
	// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
	// representation of the geometry/geography, of the image as projected on the
	// ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
	// or PUT request that also specifies a valid 'area' or 'atext' field.
	GeographyJson string `json:"geographyJson"`
	// Number of dimensions of the geometry depicted by region.
	GeographyNdims int64 `json:"geographyNdims"`
	// Geographical spatial_ref_sys for region.
	GeographySrid int64 `json:"geographySrid"`
	// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
	// Text representation of the geometry/geography, of the image as projected on the
	// ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
	// if included with a POST or PUT request that also specifies a valid 'area' field.
	GeographyText string `json:"geographyText"`
	// Type of region as projected.
	GeographyType string `json:"geographyType"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The region name within the service area.
	RegionName string `json:"regionName"`
	// Time the row was updated in the database, auto-populated by the system, example
	// = 2018-01-01T16:00:00.123Z.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDBeam                respjson.Field
		Source                respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		ContourIdx            respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Gain                  respjson.Field
		Geography             respjson.Field
		GeographyJson         respjson.Field
		GeographyNdims        respjson.Field
		GeographySrid         respjson.Field
		GeographyText         respjson.Field
		GeographyType         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		RegionName            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r BeamcontourFull) RawJSON() string { return r.JSON.raw }
func (r *BeamcontourFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type BeamcontourFullDataMode string

const (
	BeamcontourFullDataModeReal      BeamcontourFullDataMode = "REAL"
	BeamcontourFullDataModeTest      BeamcontourFullDataMode = "TEST"
	BeamcontourFullDataModeSimulated BeamcontourFullDataMode = "SIMULATED"
	BeamcontourFullDataModeExercise  BeamcontourFullDataMode = "EXERCISE"
)

// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).
// Boresight refers to the point of maximum/peak gain, and should not be confused
// with the 'aim point' of the related beam. Gain contours are regions of coverage
// referenced to the relative gain of the related beam. Service Areas are composed
// of one or more service regions, with each region being either discrete point(s)
// or a continuous contour.
type BeamcontourFullType string

const (
	BeamcontourFullTypeBoresight BeamcontourFullType = "BORESIGHT"
	BeamcontourFullTypeContour   BeamcontourFullType = "CONTOUR"
	BeamcontourFullTypeSvcArea   BeamcontourFullType = "SVC AREA"
)

// A bus is the physical and software infrastructure backbone to which on-orbit
// satellite payloads are attached for power, control, and other support functions.
type BusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode BusFullDataMode `json:"dataMode,required"`
	// Name of this bus.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Attitude and Orbital Control Notes/description for the bus.
	AocsNotes string `json:"aocsNotes"`
	// Average mass of this bus without payloads or fuel, in kilograms.
	AvgDryMass float64 `json:"avgDryMass"`
	// Average mass available on this bus for payloads, in kilograms.
	AvgPayloadMass float64 `json:"avgPayloadMass"`
	// Average power available on this bus for payloads, in kilowatts.
	AvgPayloadPower float64 `json:"avgPayloadPower"`
	// Average power available on this bus, in kilowatts.
	AvgSpacecraftPower float64 `json:"avgSpacecraftPower"`
	// Average mass of this bus with fuel, but without payloads, in kilograms.
	AvgWetMass float64 `json:"avgWetMass"`
	// Body dimension in X direction pertaining to length, in meters.
	BodyDimensionX float64 `json:"bodyDimensionX"`
	// Body dimension in Y direction pertaining to height, in meters.
	BodyDimensionY float64 `json:"bodyDimensionY"`
	// Body dimension in Z direction pertaining to width, in meters.
	BodyDimensionZ float64 `json:"bodyDimensionZ"`
	// Unique identifier of the organization which designs the bus kit.
	BusKitDesignerOrgID string `json:"busKitDesignerOrgId"`
	// Country where this bus was manufactured. This value is typically the ISO 3166
	// Alpha-2 two-character country code, however it can also represent various
	// consortiums that do not appear in the ISO document. The code must correspond to
	// an existing country in the UDL’s country API. Call udl/country/{code} to get any
	// associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for
	// the specified country code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Notes/description of the bus.
	Description string `json:"description"`
	// An entity is a generic representation of any object within a space/SSA system
	// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
	// entity can have an operating unit, a location (if terrestrial), and statuses.
	Entity EntityFull `json:"entity"`
	// Boolean indicating if this bus is generic.
	Generic bool `json:"generic"`
	// ID of the parent entity for this bus.
	IDEntity string `json:"idEntity"`
	// Launch envelope dimension in X direction, in meters.
	LaunchEnvelopeDimensionX float64 `json:"launchEnvelopeDimensionX"`
	// Launch envelope dimension in Y direction, in meters.
	LaunchEnvelopeDimensionY float64 `json:"launchEnvelopeDimensionY"`
	// Launch envelope dimension in Z direction, in meters.
	LaunchEnvelopeDimensionZ float64 `json:"launchEnvelopeDimensionZ"`
	// Unique identifier of the organization which manufactures the main onboard
	// computer for this bus.
	MainComputerManufacturerOrgID string `json:"mainComputerManufacturerOrgId"`
	// Unique identifier of the organization which manufactures this bus.
	ManufacturerOrgID string `json:"manufacturerOrgId"`
	// Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg:
	// Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite,
	// etc.).
	MassCategory string `json:"massCategory"`
	// Maximum power at beginning of life, lower bounds, in kilowatts.
	MaxBolPowerLower float64 `json:"maxBOLPowerLower"`
	// Maximum power at beginning of life, upper bounds, in kilowatts.
	MaxBolPowerUpper float64 `json:"maxBOLPowerUpper"`
	// Maximum mass on station at beginning of life, in kilograms.
	MaxBolStationMass float64 `json:"maxBOLStationMass"`
	// Maximum mass of this bus without payloads or fuel, in kilograms.
	MaxDryMass float64 `json:"maxDryMass"`
	// Maximum power at end of life, lower bounds, in kilowatts.
	MaxEolPowerLower float64 `json:"maxEOLPowerLower"`
	// Maximum power at end of life, upper bounds, in kilowatts.
	MaxEolPowerUpper float64 `json:"maxEOLPowerUpper"`
	// Maximum mass at launch, lower bounds, in kilograms.
	MaxLaunchMassLower float64 `json:"maxLaunchMassLower"`
	// Maximum mass at launch, upper bounds, in kilograms.
	MaxLaunchMassUpper float64 `json:"maxLaunchMassUpper"`
	// Maximum payload mass available, in kilograms.
	MaxPayloadMass float64 `json:"maxPayloadMass"`
	// Maximum payload power available, in kilowatts.
	MaxPayloadPower float64 `json:"maxPayloadPower"`
	// Maximum power available on this bus, in kilowatts.
	MaxSpacecraftPower float64 `json:"maxSpacecraftPower"`
	// Maximum mass of this bus with fuel, but without payloads, in kilograms.
	MaxWetMass float64 `json:"maxWetMass"`
	// Median mass of this bus without payloads or fuel, in kilograms.
	MedianDryMass float64 `json:"medianDryMass"`
	// Median mass of this bus with fuel, but without payloads, in kilograms.
	MedianWetMass float64 `json:"medianWetMass"`
	// Minimum mass of this bus without payloads or fuel, in kilograms.
	MinDryMass float64 `json:"minDryMass"`
	// Minimum mass of this bus with fuel, but without payloads, in kilograms.
	MinWetMass float64 `json:"minWetMass"`
	// The number of orbit types this bus can support.
	NumOrbitType int64 `json:"numOrbitType"`
	// Orbit averaged power (the power averaged over one orbit) available on this bus
	// for payloads, in kilowatts.
	OapPayloadPower float64 `json:"oapPayloadPower"`
	// Orbit averaged power (the power averaged over one orbit) available on this bus,
	// in kilowatts.
	OapSpacecraftPower float64 `json:"oapSpacecraftPower"`
	// Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain
	// the same number of elements as the value of numOrbitType.
	OrbitTypes []string `json:"orbitTypes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The radial dimension available on this bus for payloads, in meters.
	PayloadDimensionX float64 `json:"payloadDimensionX"`
	// The in-track dimension available on this bus for payloads, in meters.
	PayloadDimensionY float64 `json:"payloadDimensionY"`
	// The cross-track dimension available on this bus for payloads, in meters.
	PayloadDimensionZ float64 `json:"payloadDimensionZ"`
	// The volume available on this bus for payloads, in cubic meters.
	PayloadVolume float64 `json:"payloadVolume"`
	// Power category of this bus (e.g. 0-1kW low power, etc).
	PowerCategory string `json:"powerCategory"`
	// Unique identifier of the organization which manufactures the telemetry tracking
	// and command subsystem for this bus.
	TelemetryTrackingManufacturerOrgID string `json:"telemetryTrackingManufacturerOrgId"`
	// Type of this bus.
	Type string `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking              respjson.Field
		DataMode                           respjson.Field
		Name                               respjson.Field
		Source                             respjson.Field
		ID                                 respjson.Field
		AocsNotes                          respjson.Field
		AvgDryMass                         respjson.Field
		AvgPayloadMass                     respjson.Field
		AvgPayloadPower                    respjson.Field
		AvgSpacecraftPower                 respjson.Field
		AvgWetMass                         respjson.Field
		BodyDimensionX                     respjson.Field
		BodyDimensionY                     respjson.Field
		BodyDimensionZ                     respjson.Field
		BusKitDesignerOrgID                respjson.Field
		CountryCode                        respjson.Field
		CreatedAt                          respjson.Field
		CreatedBy                          respjson.Field
		Description                        respjson.Field
		Entity                             respjson.Field
		Generic                            respjson.Field
		IDEntity                           respjson.Field
		LaunchEnvelopeDimensionX           respjson.Field
		LaunchEnvelopeDimensionY           respjson.Field
		LaunchEnvelopeDimensionZ           respjson.Field
		MainComputerManufacturerOrgID      respjson.Field
		ManufacturerOrgID                  respjson.Field
		MassCategory                       respjson.Field
		MaxBolPowerLower                   respjson.Field
		MaxBolPowerUpper                   respjson.Field
		MaxBolStationMass                  respjson.Field
		MaxDryMass                         respjson.Field
		MaxEolPowerLower                   respjson.Field
		MaxEolPowerUpper                   respjson.Field
		MaxLaunchMassLower                 respjson.Field
		MaxLaunchMassUpper                 respjson.Field
		MaxPayloadMass                     respjson.Field
		MaxPayloadPower                    respjson.Field
		MaxSpacecraftPower                 respjson.Field
		MaxWetMass                         respjson.Field
		MedianDryMass                      respjson.Field
		MedianWetMass                      respjson.Field
		MinDryMass                         respjson.Field
		MinWetMass                         respjson.Field
		NumOrbitType                       respjson.Field
		OapPayloadPower                    respjson.Field
		OapSpacecraftPower                 respjson.Field
		OrbitTypes                         respjson.Field
		Origin                             respjson.Field
		OrigNetwork                        respjson.Field
		PayloadDimensionX                  respjson.Field
		PayloadDimensionY                  respjson.Field
		PayloadDimensionZ                  respjson.Field
		PayloadVolume                      respjson.Field
		PowerCategory                      respjson.Field
		TelemetryTrackingManufacturerOrgID respjson.Field
		Type                               respjson.Field
		UpdatedAt                          respjson.Field
		UpdatedBy                          respjson.Field
		ExtraFields                        map[string]respjson.Field
		raw                                string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r BusFull) RawJSON() string { return r.JSON.raw }
func (r *BusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type BusFullDataMode string

const (
	BusFullDataModeReal      BusFullDataMode = "REAL"
	BusFullDataModeTest      BusFullDataMode = "TEST"
	BusFullDataModeSimulated BusFullDataMode = "SIMULATED"
	BusFullDataModeExercise  BusFullDataMode = "EXERCISE"
)

// Channel information on a particular transponder.
type ChannelFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode ChannelFullDataMode `json:"dataMode,required"`
	// ID of the parent transponder object for this Channel.
	IDTransponder string `json:"idTransponder,required"`
	// Channel name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Channel aPid.
	Apid string `json:"apid"`
	// The antenna beam ID of the particular beam for this channel. beamName is not
	// unique across payloads.
	BeamName string `json:"beamName"`
	// Channel compression.
	Compression string `json:"compression"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Channel encryption.
	Encryption string `json:"encryption"`
	// Identifier of the particular beam for this channel.
	IDBeam string `json:"idBeam"`
	// ID of the RF Band object for this channel.
	IDRfBand string `json:"idRFBand"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Owner.
	Owner string `json:"owner"`
	// Pkg.
	Pkg string `json:"pkg"`
	// Res.
	Res string `json:"res"`
	// SID.
	Sid string `json:"sid"`
	// Channel type.
	Type string `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Channel vPid.
	Vpid string `json:"vpid"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDTransponder         respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Apid                  respjson.Field
		BeamName              respjson.Field
		Compression           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Encryption            respjson.Field
		IDBeam                respjson.Field
		IDRfBand              respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Owner                 respjson.Field
		Pkg                   respjson.Field
		Res                   respjson.Field
		Sid                   respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		Vpid                  respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r ChannelFull) RawJSON() string { return r.JSON.raw }
func (r *ChannelFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type ChannelFullDataMode string

const (
	ChannelFullDataModeReal      ChannelFullDataMode = "REAL"
	ChannelFullDataModeTest      ChannelFullDataMode = "TEST"
	ChannelFullDataModeSimulated ChannelFullDataMode = "SIMULATED"
	ChannelFullDataModeExercise  ChannelFullDataMode = "EXERCISE"
)

// Collect Requests support several types of individual requests, or
// planned/scheduled tasks on sensors and/or orbital objects. Options are provided
// to accomodate most common sensor contact and collection applications, including
// single sensor-object tasking, search operations, and TT&C support. Multiple
// requests originating from a plan or schedule may be associated to a sensor plan
// if desired.
type CollectRequestFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode CollectRequestFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The start time or earliest time of the collect or contact request window, in ISO
	// 8601 UTC format.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT,
	// POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).
	Type string `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Height above WGS-84 ellipsoid (HAE), in kilometers. If an accompanying stopAlt
	// is provided, then alt value can be assumed to be the starting altitude of a
	// volume definition.
	Alt float64 `json:"alt"`
	// The argument of perigee is the angle, in degrees, formed between the perigee and
	// the ascending node.
	ArgOfPerigee float64 `json:"argOfPerigee"`
	// The expected or directed azimuth angle, in degrees, for search or target
	// acquisition.
	Az float64 `json:"az"`
	// CollectResponses associated to request id. Read-only details (only used on
	// detail queries, not to be provided on create/update operations).
	CollectResponse []CollectResponseFull `json:"collectResponse"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The customer for this request.
	Customer string `json:"customer"`
	// The expected or directed declination angle, in degrees, for search or target
	// acquisition.
	Dec float64 `json:"dec"`
	// The duration of the collect request, in seconds. If both duration and endTime
	// are provided, the endTime is assumed to take precedence.
	Duration int64 `json:"duration"`
	// The dwell ID associated with this request. A dwell ID is dwell point specific
	// and a DWELL request consist of many dwell point requests.
	DwellID string `json:"dwellId"`
	// The orbital eccentricity of an astronomical object is a parameter that
	// determines the amount by which its orbit around another body deviates from a
	// perfect circle.
	Eccentricity float64 `json:"eccentricity"`
	// The expected or directed elevation angle, in degrees, for search or target
	// acquisition.
	El float64 `json:"el"`
	// An element set is a collection of Keplerian orbital elements describing an orbit
	// of a particular satellite. The data is used along with an orbit propagator in
	// order to predict the motion of a satellite. The element set, or elset for short,
	// consists of identification data, the classical elements and drag parameters.
	Elset CollectRequestFullElset `json:"elset"`
	// The end time of the collect or contact request window, in ISO 8601 UTC format.
	// If no endTime or duration is provided it is assumed the request is either
	// ongoing or that the request is for a specified number of tracks (numTracks). If
	// both duration and endTime are provided, the endTime is assumed to take
	// precedence.
	EndTime time.Time `json:"endTime" format:"date-time"`
	// Epoch time, in ISO 8601 UTC format, of the orbital elements.
	Epoch time.Time `json:"epoch" format:"date-time"`
	// ID of the UDL Ephemeris Set of the object associated with this request.
	EsID string `json:"esId"`
	// The extent of the azimuth angle, in degrees, from center azimuth to define a
	// spatial volume.
	ExtentAz float64 `json:"extentAz"`
	// The extent of the elevation angle, in degrees, from center elevation to define a
	// spatial volume.
	ExtentEl float64 `json:"extentEl"`
	// The extent of the range, in km, from center range to define a spatial volume.
	ExtentRange float64 `json:"extentRange"`
	// Optional ID from external systems. This field has no meaning within UDL and is
	// provided as a convenience for systems that require tracking of an internal
	// system generated ID.
	ExternalID string `json:"externalId"`
	// For optical sensors, the frame rate of the camera, in Hz.
	FrameRate float64 `json:"frameRate"`
	// The estimated or expected emission frequency of the target, in MHz.
	Freq float64 `json:"freq"`
	// The maximum frequency of interest, in MHz.
	FreqMax float64 `json:"freqMax"`
	// The minimum frequency of interest, in MHz. If only minimum frequency is provided
	// it is assumed to be minimum reportable frequency.
	FreqMin float64 `json:"freqMin"`
	// ID of the UDL Elset of the object associated with this request.
	IDElset string `json:"idElset"`
	// ID of the UDL Manifold Elset of the object associated with this request. A
	// Manifold Elset provides theoretical Keplerian orbital elements belonging to an
	// object of interest's manifold describing a possible/theoretical orbit for an
	// object of interest for tasking purposes.
	IDManifold string `json:"idManifold"`
	// Unique identifier of the target on-orbit object for this request.
	IDOnOrbit string `json:"idOnOrbit"`
	// The unique ID of the collect request record from which this request originated.
	// This may be used for cases of sensor-to-sensor tasking, such as tip/cue
	// operations.
	IDParentReq string `json:"idParentReq"`
	// Unique identifier of the parent plan or schedule associated with this request.
	// If null, this request is assumed not associated with a plan or schedule.
	IDPlan string `json:"idPlan"`
	// Unique identifier of the requested/scheduled/planned sensor associated with this
	// request. If both idSensor and origSensorId are null then the request is assumed
	// to be a general request for observations or contact on an object, if specified,
	// or an area/volume. In this case, the requester may specify a desired obType.
	IDSensor string `json:"idSensor"`
	// ID of the UDL State Vector of the object or central vector associated with this
	// request.
	IDStateVector string `json:"idStateVector"`
	// The angle, in degrees, between the equator and the orbit plane when looking from
	// the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90
	// representing posigrade orbits and 90-180 representing retrograde orbits.
	Inclination float64 `json:"inclination"`
	// For optical sensors, the integration time per camera frame, in milliseconds.
	IntegrationTime float64 `json:"integrationTime"`
	// Inter-Range Operations Number. Four-digit identifier used to schedule and
	// identify AFSCN contact support for booster, launch, and on-orbit operations.
	Iron int64 `json:"iron"`
	// The target object irradiance value.
	Irradiance float64 `json:"irradiance"`
	// WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of
	// equator). If an accompanying stopLat is provided, then the lat value can be
	// assumed to be the starting latitude of a volume definition.
	Lat float64 `json:"lat"`
	// WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime
	// Meridian). If an accompanying stopLon is provided, then lon value can be assumed
	// to be the starting longitude of a volume definition.
	Lon float64 `json:"lon"`
	// The timestamp of the external message from which this request originated, if
	// applicable, in ISO8601 UTC format with millisecond precision.
	MsgCreateDate time.Time `json:"msgCreateDate" format:"date-time"`
	// The type of external message from which this request originated.
	MsgType string `json:"msgType"`
	// Notes or comments associated with this request.
	Notes string `json:"notes"`
	// For optical sensors, the requested number of frames to capture at each sensor
	// step.
	NumFrames int64 `json:"numFrames"`
	// The number of requested observations on the target.
	NumObs int64 `json:"numObs"`
	// The number of requested tracks on the target. If numTracks is not provided it is
	// assumed to indicate all possible observations every pass over the request
	// duration or within the request start/end window.
	NumTracks int64 `json:"numTracks"`
	// Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER)
	// requested. This field may correspond to a request of a specific sensor, or to a
	// general non sensor specific request.
	ObType string `json:"obType"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).
	OrbitRegime string `json:"orbitRegime"`
	// The magnitude of rotation, in degrees, between the xAngle direction and locally
	// defined equinoctial plane. A positive value indicates clockwise rotation about
	// the sensor boresight vector.
	OrientAngle float64 `json:"orientAngle"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the data source to indicate the target object of
	// this request. This may be an internal identifier and not necessarily map to a
	// valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Optional identifier provided by the source to indicate the sensor identifier
	// requested/scheduled/planned for this request. This may be an internal identifier
	// and not necessarily a valid sensor ID. If both idSensor and origSensorId are
	// null then the request is assumed to be a general request for observations or
	// contact on an object, if specified, or an area/volume. In this case, the
	// requester may specify a desired obType.
	OrigSensorID string `json:"origSensorId"`
	// Index number (integer) for records within a collection plan or schedule.
	PlanIndex int64 `json:"planIndex"`
	// The RF polarization (H, LHC, RHC, V).
	Polarization string `json:"polarization"`
	// The priority of the collect request (EMERGENCY, FLASH, IMMEDIATE, PRIORITY,
	// ROUTINE).
	Priority string `json:"priority"`
	// The expected or directed right ascension angle, in degrees, for search or target
	// acquisition.
	Ra float64 `json:"ra"`
	// Right ascension of the ascending node, or RAAN is the angle as measured in
	// degrees eastwards (or, as seen from the north, counterclockwise) from the First
	// Point of Aries to the ascending node.
	Raan float64 `json:"raan"`
	// The expected acquisition range or defined center range, in km.
	Range float64 `json:"range"`
	// The Radar Cross-Section of the target, in m^2.
	Rcs float64 `json:"rcs"`
	// The maximum Radar Cross-Section of the target, in m^2.
	RcsMax float64 `json:"rcsMax"`
	// The minimum Radar Cross-Section of the target, in m^2. If only minimum RCS is
	// provided it is assumed to be minimum reportable RCS.
	RcsMin float64 `json:"rcsMin"`
	// The fraction of solar energy reflected from target.
	Reflectance float64 `json:"reflectance"`
	// Satellite/catalog number of the target on-orbit object for this request.
	SatNo int64 `json:"satNo"`
	// Pre-coordinated code, direction, or configuration to be executed by the sensor
	// or site for this collect or contact.
	Scenario string `json:"scenario"`
	// The average of the periapsis and apoapsis distances, in kilometers. For circular
	// orbits, the semimajor axis is the distance between the centers of the bodies.
	SemiMajorAxis float64 `json:"semiMajorAxis"`
	// The spectral model used for the irradiance calculation.
	SpectralModel string `json:"spectralModel"`
	// The maximum inclination, in degrees, to be used in search operations.
	SrchInc float64 `json:"srchInc"`
	// The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN,
	// etc.).
	SrchPattern string `json:"srchPattern"`
	// This service provides operations for querying and manipulation of state vectors
	// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
	// velocity (v) that, together with their time (epoch) (t), uniquely determine the
	// trajectory of the orbiting body in space. J2000 is the preferred coordinate
	// frame for all state vector positions/velocities in UDL, but in some cases data
	// may be in another frame depending on the provider and/or datatype. Please see
	// the 'Discover' tab in the storefront to confirm coordinate frames by data
	// provider.
	StateVector CollectRequestFullStateVector `json:"stateVector"`
	// The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in
	// kilometers. The stopAlt value is only meaningful if a (starting) alt value is
	// provided.
	StopAlt float64 `json:"stopAlt"`
	// The stopping WGS-84 latitude of a volume definition, in degrees. -90 to 90
	// degrees (negative values south of equator). The stopLat value is only meaningful
	// if a (starting) lat value is provided.
	StopLat float64 `json:"stopLat"`
	// The stopping WGS-84 longitude of a volume definition, in degrees. -180 to 180
	// degrees (negative values west of Prime Meridian). The stopLon value is only
	// meaningful if a (starting) lon value is provided.
	StopLon float64 `json:"stopLon"`
	// The (SSN) tasking suffix (A-Z) associated with this request. The suffix defines
	// the amount of observational data and the frequency of collection. Note that
	// suffix definitions are sensor type specific.
	Suffix string `json:"suffix"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// The minimum object (diameter) size, in meters, to be reported.
	TargetSize float64 `json:"targetSize"`
	// The (SSN) tasking category (1-5) associated with this request. The tasking
	// category defines the priority of gathering and transmitting the requested
	// observational data. Note that category definitions are sensor type specific.
	TaskCategory int64 `json:"taskCategory"`
	// The tasking group to which the target object is assigned.
	TaskGroup string `json:"taskGroup"`
	// Task ID associated with this request. A task ID may be associated with a single
	// collect request or may be used to tie together the sub-requests of a full
	// collect, for example a DWELL consisting of many dwell points.
	TaskID string `json:"taskId"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// The true anomaly defines the angular position, in degrees, of the object on it's
	// orbital path as measured from the orbit focal point at epoch. The true anomaly
	// is referenced from perigee.
	TrueAnomoly float64 `json:"trueAnomoly"`
	// Boolean indicating that this collect request is UCT follow-up.
	UctFollowUp bool `json:"uctFollowUp"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// The estimated or expected visual magnitude of the target, in Magnitudes (M).
	VisMag float64 `json:"visMag"`
	// The maximum estimated or expected visual magnitude of the target, in Magnitudes
	// (M).
	VisMagMax float64 `json:"visMagMax"`
	// The minimum estimated or expected visual magnitude of the target, in Magnitudes
	// (M). If only minimum vismag is provided it is assumed to be minimum reportable
	// vismag.
	VisMagMin float64 `json:"visMagMin"`
	// The angular distance, in degrees, in the sensor-x direction from scan center
	// defined by the central vector. The specification of xAngle and yAngle defines a
	// rectangle of width 2*xAngle and height 2*yAngle centered about the central
	// vector.
	XAngle float64 `json:"xAngle"`
	// The angular distance, in degrees, in the sensor-y direction from scan center
	// defined by the central vector. The specification of xAngle and yAngle defines a
	// rectangle of width 2*xAngle and height 2*yAngle centered about the central
	// vector.
	YAngle float64 `json:"yAngle"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		StartTime             respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		Alt                   respjson.Field
		ArgOfPerigee          respjson.Field
		Az                    respjson.Field
		CollectResponse       respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Customer              respjson.Field
		Dec                   respjson.Field
		Duration              respjson.Field
		DwellID               respjson.Field
		Eccentricity          respjson.Field
		El                    respjson.Field
		Elset                 respjson.Field
		EndTime               respjson.Field
		Epoch                 respjson.Field
		EsID                  respjson.Field
		ExtentAz              respjson.Field
		ExtentEl              respjson.Field
		ExtentRange           respjson.Field
		ExternalID            respjson.Field
		FrameRate             respjson.Field
		Freq                  respjson.Field
		FreqMax               respjson.Field
		FreqMin               respjson.Field
		IDElset               respjson.Field
		IDManifold            respjson.Field
		IDOnOrbit             respjson.Field
		IDParentReq           respjson.Field
		IDPlan                respjson.Field
		IDSensor              respjson.Field
		IDStateVector         respjson.Field
		Inclination           respjson.Field
		IntegrationTime       respjson.Field
		Iron                  respjson.Field
		Irradiance            respjson.Field
		Lat                   respjson.Field
		Lon                   respjson.Field
		MsgCreateDate         respjson.Field
		MsgType               respjson.Field
		Notes                 respjson.Field
		NumFrames             respjson.Field
		NumObs                respjson.Field
		NumTracks             respjson.Field
		ObType                respjson.Field
		OnOrbit               respjson.Field
		OrbitRegime           respjson.Field
		OrientAngle           respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		OrigSensorID          respjson.Field
		PlanIndex             respjson.Field
		Polarization          respjson.Field
		Priority              respjson.Field
		Ra                    respjson.Field
		Raan                  respjson.Field
		Range                 respjson.Field
		Rcs                   respjson.Field
		RcsMax                respjson.Field
		RcsMin                respjson.Field
		Reflectance           respjson.Field
		SatNo                 respjson.Field
		Scenario              respjson.Field
		SemiMajorAxis         respjson.Field
		SpectralModel         respjson.Field
		SrchInc               respjson.Field
		SrchPattern           respjson.Field
		StateVector           respjson.Field
		StopAlt               respjson.Field
		StopLat               respjson.Field
		StopLon               respjson.Field
		Suffix                respjson.Field
		Tags                  respjson.Field
		TargetSize            respjson.Field
		TaskCategory          respjson.Field
		TaskGroup             respjson.Field
		TaskID                respjson.Field
		TransactionID         respjson.Field
		TrueAnomoly           respjson.Field
		UctFollowUp           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		VisMag                respjson.Field
		VisMagMax             respjson.Field
		VisMagMin             respjson.Field
		XAngle                respjson.Field
		YAngle                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CollectRequestFull) RawJSON() string { return r.JSON.raw }
func (r *CollectRequestFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type CollectRequestFullDataMode string

const (
	CollectRequestFullDataModeReal      CollectRequestFullDataMode = "REAL"
	CollectRequestFullDataModeTest      CollectRequestFullDataMode = "TEST"
	CollectRequestFullDataModeSimulated CollectRequestFullDataMode = "SIMULATED"
	CollectRequestFullDataModeExercise  CollectRequestFullDataMode = "EXERCISE"
)

// An element set is a collection of Keplerian orbital elements describing an orbit
// of a particular satellite. The data is used along with an orbit propagator in
// order to predict the motion of a satellite. The element set, or elset for short,
// consists of identification data, the classical elements and drag parameters.
type CollectRequestFullElset struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
	Epoch time.Time `json:"epoch,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the
	// solar radiation pressure coefficient(Gamma) over the object Mass. Applicable
	// only with ephemType4.
	Agom float64 `json:"agom"`
	// Optional algorithm used to produce this record.
	Algorithm string `json:"algorithm"`
	// The orbit point furthest from the center of the earth in kilometers. If not
	// provided, apogee will be computed from the TLE according to the following. Using
	// mu, the standard gravitational parameter for the earth (398600.4418), semi-major
	// axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using semi-major axis A,
	// eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for
	// computing the apogee radius from the center of the earth, to compute apogee
	// altitude the radius of the earth should be subtracted (6378.135 km).
	Apogee float64 `json:"apogee"`
	// The argument of perigee is the angle in degrees formed between the perigee and
	// the ascending node. If the perigee would occur at the ascending node, the
	// argument of perigee would be 0.
	ArgOfPerigee float64 `json:"argOfPerigee"`
	// Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
	BallisticCoeff float64 `json:"ballisticCoeff"`
	// The drag term for SGP4 orbital model, used for calculating decay constants for
	// altitude, eccentricity etc, measured in inverse earth radii.
	BStar float64 `json:"bStar"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// The orbital eccentricity of an astronomical object is a parameter that
	// determines the amount by which its orbit around another body deviates from a
	// perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an
	// elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a
	// hyperbolic escape orbit.
	Eccentricity float64 `json:"eccentricity"`
	// Read-only start time at which this elset was the 'current' elset for its
	// satellite. This field and is set by the system automatically and ignored on
	// create/edit operations.
	EffectiveFrom time.Time `json:"effectiveFrom" format:"date-time"`
	// Read-only end time at which this elset was no longer the 'current' elset for its
	// satellite. This field and is set by the system automatically and ignored on
	// create/edit operations.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// The ephemeris type associated with this TLE:
	//
	// 0:&nbsp;SGP (or SGP4 with Kozai mean motion)
	//
	// 1:&nbsp;SGP (Kozai mean motion)
	//
	// 2:&nbsp;SGP4 (Brouver mean motion)
	//
	// 3:&nbsp;SDP4
	//
	// 4:&nbsp;SGP4-XP
	//
	// 5:&nbsp;SDP8
	//
	// 6:&nbsp;SP (osculating mean motion)
	EphemType int64 `json:"ephemType"`
	// Unique identifier of the record, auto-generated by the system.
	IDElset string `json:"idElset"`
	// Unique identifier of the satellite on-orbit object, if correlated. For the
	// public catalog, the idOnOrbit is typically the satellite number as a string, but
	// may be a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the OD solution record that produced this elset. This ID
	// can be used to obtain additional information on an OrbitDetermination object
	// using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
	// example, the OrbitDetermination with idOrbitDetermination = abc would be queried
	// as /udl/orbitdetermination/abc.
	IDOrbitDetermination string `json:"idOrbitDetermination"`
	// The angle between the equator and the orbit when looking from the center of the
	// Earth. If the orbit went exactly around the equator from left to right, then the
	// inclination would be 0. The inclination ranges from 0 to 180 degrees.
	Inclination float64 `json:"inclination"`
	// Read only derived/generated line1 of a legacy TLE (two line element set) format,
	// ignored on create/edit operations.
	Line1 string `json:"line1"`
	// Read only derived/generated line2 of a legacy TLE (two line element set) format,
	// ignored on create/edit operations.
	Line2 string `json:"line2"`
	// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to
	// 360 degrees. The mean anomaly is referenced to the perigee. If the satellite
	// were at the perigee, the mean anomaly would be 0.
	MeanAnomaly float64 `json:"meanAnomaly"`
	// Mean motion is the angular speed required for a body to complete one orbit,
	// assuming constant speed in a circular orbit which completes in the same time as
	// the variable speed, elliptical orbit of the actual body. Measured in revolutions
	// per day.
	MeanMotion float64 `json:"meanMotion"`
	// 2nd derivative of the mean motion with respect to time. Units are revolutions
	// per day cubed.
	MeanMotionDDot float64 `json:"meanMotionDDot"`
	// 1st derivative of the mean motion with respect to time. Units are revolutions
	// per day squared.
	MeanMotionDot float64 `json:"meanMotionDot"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by elset source to indicate the target onorbit
	// object of this elset. This may be an internal identifier and not necessarily map
	// to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// The orbit point nearest to the center of the earth in kilometers. If not
	// provided, perigee will be computed from the TLE according to the following.
	// Using mu, the standard gravitational parameter for the earth (398600.4418),
	// semi-major axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using semi-major axis A,
	// eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are
	// for computing the perigee radius from the center of the earth, to compute
	// perigee altitude the radius of the earth should be subtracted (6378.135 km).
	Perigee float64 `json:"perigee"`
	// Period of the orbit equal to inverse of mean motion, in minutes.
	Period float64 `json:"period"`
	// Right ascension of the ascending node, or RAAN is the angle as measured in
	// degrees eastwards (or, as seen from the north, counterclockwise) from the First
	// Point of Aries to the ascending node, which is where the orbit crosses the
	// equator when traveling north.
	Raan float64 `json:"raan"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The current revolution number. The value is incremented when a satellite crosses
	// the equator on an ascending pass.
	RevNo int64 `json:"revNo"`
	// Satellite/catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo"`
	// The sum of the periapsis and apoapsis distances divided by two. For circular
	// orbits, the semimajor axis is the distance between the centers of the bodies,
	// not the distance of the bodies from the center of mass. Units are kilometers.
	SemiMajorAxis float64 `json:"semiMajorAxis"`
	// Optional array of UDL data (observation) UUIDs used to build this element set.
	// See the associated sourcedDataTypes array for the specific types of observations
	// for the positionally corresponding UUIDs in this array (the two arrays must
	// match in size).
	SourcedData []string `json:"sourcedData"`
	// Optional array of UDL observation data types used to build this element set
	// (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
	// UUIDs of observations for the positionally corresponding data types in this
	// array (the two arrays must match in size).
	//
	// Any of "EO", "RADAR", "RF", "DOA", "ELSET", "SV".
	SourcedDataTypes []string `json:"sourcedDataTypes"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Boolean indicating this Elset was unable to be correlated to a known object.
	// This flag should only be set to true by data providers after an attempt to
	// correlate to an on-orbit object was made and failed. If unable to correlate, the
	// 'origObjectId' field may be populated with an internal data provider specific
	// identifier.
	Uct bool `json:"uct"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Epoch                 respjson.Field
		Source                respjson.Field
		Agom                  respjson.Field
		Algorithm             respjson.Field
		Apogee                respjson.Field
		ArgOfPerigee          respjson.Field
		BallisticCoeff        respjson.Field
		BStar                 respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Descriptor            respjson.Field
		Eccentricity          respjson.Field
		EffectiveFrom         respjson.Field
		EffectiveUntil        respjson.Field
		EphemType             respjson.Field
		IDElset               respjson.Field
		IDOnOrbit             respjson.Field
		IDOrbitDetermination  respjson.Field
		Inclination           respjson.Field
		Line1                 respjson.Field
		Line2                 respjson.Field
		MeanAnomaly           respjson.Field
		MeanMotion            respjson.Field
		MeanMotionDDot        respjson.Field
		MeanMotionDot         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		Perigee               respjson.Field
		Period                respjson.Field
		Raan                  respjson.Field
		RawFileUri            respjson.Field
		RevNo                 respjson.Field
		SatNo                 respjson.Field
		SemiMajorAxis         respjson.Field
		SourcedData           respjson.Field
		SourcedDataTypes      respjson.Field
		SourceDl              respjson.Field
		Tags                  respjson.Field
		TransactionID         respjson.Field
		Uct                   respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CollectRequestFullElset) RawJSON() string { return r.JSON.raw }
func (r *CollectRequestFullElset) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
type CollectRequestFullStateVector struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Time of validity for state vector in ISO 8601 UTC datetime format, with
	// microsecond precision.
	Epoch time.Time `json:"epoch,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// The actual time span used for the OD of the object, expressed in days.
	ActualOdSpan float64 `json:"actualODSpan"`
	// Optional algorithm used to produce this record.
	Algorithm string `json:"algorithm"`
	// The reference frame of the alternate1 (Alt1) cartesian orbital state.
	Alt1ReferenceFrame string `json:"alt1ReferenceFrame"`
	// The reference frame of the alternate2 (Alt2) cartesian orbital state.
	Alt2ReferenceFrame string `json:"alt2ReferenceFrame"`
	// The actual area of the object at it's largest cross-section, expressed in
	// meters^2.
	Area float64 `json:"area"`
	// First derivative of drag/ballistic coefficient (m2/kg-s).
	BDot float64 `json:"bDot"`
	// Model parameter value for center of mass offset (m).
	CmOffset float64 `json:"cmOffset"`
	// Covariance matrix, in kilometer and second based units, in the specified
	// covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
	// The array values (1-21) represent the lower triangular half of the
	// position-velocity covariance matrix. The size of the covariance matrix is
	// dynamic, depending on whether the covariance for position only or position &
	// velocity. The covariance elements are position dependent within the array with
	// values ordered as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
	//
	// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
	//
	// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
	//
	// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
	//
	// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
	//
	// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
	//
	// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
	//
	// The cov array should contain only the lower left triangle values from top left
	// down to bottom right, in order.
	//
	// If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
	// matrix can be extended with the following order of elements:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
	//
	// DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
	//
	// SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
	//
	// THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
	Cov []float64 `json:"cov"`
	// The method used to generate the covariance during the orbit determination (OD)
	// that produced the state vector, or whether an arbitrary, non-calculated default
	// value was used (CALCULATED, DEFAULT).
	CovMethod string `json:"covMethod"`
	// The reference frame of the covariance matrix elements. If the covReferenceFrame
	// is null it is assumed to be J2000.
	//
	// Any of "J2000", "UVW", "EFG/TDR", "TEME", "GCRF".
	CovReferenceFrame string `json:"covReferenceFrame"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// The effective area of the object exposed to atmospheric drag, expressed in
	// meters^2.
	DragArea float64 `json:"dragArea"`
	// Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
	DragCoeff float64 `json:"dragCoeff"`
	// The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
	// NONE, etc.).
	DragModel string `json:"dragModel"`
	// Model parameter value for energy dissipation rate (EDR) (w/kg).
	Edr float64 `json:"edr"`
	// Start time at which this state vector was the 'current' state vector for its
	// satellite.
	EffectiveFrom time.Time `json:"effectiveFrom" format:"date-time"`
	// End time at which this state vector was no longer the 'current' state vector for
	// its satellite.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// The covariance matrix values represent the lower triangular half of the
	// covariance matrix in terms of equinoctial elements.&nbsp; The size of the
	// covariance matrix is dynamic.&nbsp; The values are outputted in order across
	// each row, i.e.:
	//
	// 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
	//
	// 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// The ordering of values is as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
	// Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
	// B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
	//
	// Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
	//
	// Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
	//
	// L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
	//
	// N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
	//
	// Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
	// 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
	//
	// Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
	// 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
	//
	// B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
	// 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
	//
	// BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
	// 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
	//
	// AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
	// 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
	//
	// T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
	// 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
	// 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
	//
	// C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
	// 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
	// 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
	//
	// C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
	// 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
	// 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
	//
	// :
	//
	// :
	//
	// where C1, C2, etc, are the "consider parameters" that may be added to the
	// covariance matrix.&nbsp; The covariance matrix will be as large as the last
	// element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
	// elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
	// BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
	// will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
	// only the lower left triangle values from top left down to bottom right, in
	// order.
	EqCov []float64 `json:"eqCov"`
	// Integrator error control.
	ErrorControl float64 `json:"errorControl"`
	// Boolean indicating use of fixed step size for this vector.
	FixedStep bool `json:"fixedStep"`
	// Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
	// GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
	// 24Z,24T.
	GeopotentialModel string `json:"geopotentialModel"`
	// Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
	Iau1980Terms int64 `json:"iau1980Terms"`
	// Unique identifier of the satellite on-orbit object, if correlated. For the
	// public catalog, the idOnOrbit is typically the satellite number as a string, but
	// may be a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the OD solution record that produced this state vector.
	// This ID can be used to obtain additional information on an OrbitDetermination
	// object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
	// example, the OrbitDetermination with idOrbitDetermination = abc would be queries
	// as /udl/orbitdetermination/abc.
	IDOrbitDetermination string `json:"idOrbitDetermination"`
	// Unique identifier of the record, auto-generated by the system.
	IDStateVector string `json:"idStateVector"`
	// Integrator Mode.
	IntegratorMode string `json:"integratorMode"`
	// Boolean indicating use of in-track thrust perturbations for this vector.
	InTrackThrust bool `json:"inTrackThrust"`
	// The end of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObEnd time.Time `json:"lastObEnd" format:"date-time"`
	// The start of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObStart time.Time `json:"lastObStart" format:"date-time"`
	// Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
	// second is not known, the time of the previous leap second is used.
	LeapSecondTime time.Time `json:"leapSecondTime" format:"date-time"`
	// Boolean indicating use of lunar/solar perturbations for this vector.
	LunarSolar bool `json:"lunarSolar"`
	// The mass of the object, in kilograms.
	Mass float64 `json:"mass"`
	// The number of observations available for the OD of the object.
	ObsAvailable int64 `json:"obsAvailable"`
	// The number of observations accepted for the OD of the object.
	ObsUsed int64 `json:"obsUsed"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by state vector source to indicate the target
	// onorbit object of this state vector. This may be an internal identifier and not
	// necessarily map to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
	Partials string `json:"partials"`
	// The pedigree of state vector, or methods used for its generation to include
	// state update/orbit determination, propagation from another state, or a state
	// from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
	// CONJUNCTION, FLIGHT_PLAN).
	Pedigree string `json:"pedigree"`
	// Polar Wander Motion X (arc seconds).
	PolarMotionX float64 `json:"polarMotionX"`
	// Polar Wander Motion Y (arc seconds).
	PolarMotionY float64 `json:"polarMotionY"`
	// One sigma position uncertainty, in kilometers.
	PosUnc float64 `json:"posUnc"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The recommended OD time span calculated for the object, expressed in days.
	RecOdSpan float64 `json:"recODSpan"`
	// The reference frame of the cartesian orbital states. If the referenceFrame is
	// null it is assumed to be J2000.
	//
	// Any of "J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF".
	ReferenceFrame string `json:"referenceFrame"`
	// The percentage of residuals accepted in the OD of the object.
	ResidualsAcc float64 `json:"residualsAcc"`
	// Epoch revolution number.
	RevNo int64 `json:"revNo"`
	// The Weighted Root Mean Squared (RMS) of the differential correction on the
	// target object that produced this vector. WRMS is a quality indicator of the
	// state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
	// Least Squares (BLS) processes.
	Rms float64 `json:"rms"`
	// Satellite/Catalog number of the target OnOrbit object.
	SatNo int64 `json:"satNo"`
	// Array containing the standard deviation of error in target object position, U, V
	// and W direction respectively (km).
	SigmaPosUvw []float64 `json:"sigmaPosUVW"`
	// Array containing the standard deviation of error in target object velocity, U, V
	// and W direction respectively (km/sec).
	SigmaVelUvw []float64 `json:"sigmaVelUVW"`
	// Average solar flux geomagnetic index.
	SolarFluxApAvg float64 `json:"solarFluxAPAvg"`
	// F10 (10.7 cm) solar flux value.
	SolarFluxF10 float64 `json:"solarFluxF10"`
	// F10 (10.7 cm) solar flux 81-day average value.
	SolarFluxF10Avg float64 `json:"solarFluxF10Avg"`
	// Boolean indicating use of solar radiation pressure perturbations for this
	// vector.
	SolarRadPress bool `json:"solarRadPress"`
	// Area-to-mass ratio coefficient for solar radiation pressure.
	SolarRadPressCoeff float64 `json:"solarRadPressCoeff"`
	// Boolean indicating use of solid earth tide perturbations for this vector.
	SolidEarthTides bool `json:"solidEarthTides"`
	// Optional array of UDL data (observation) UUIDs used to build this state vector.
	// See the associated sourcedDataTypes array for the specific types of observations
	// for the positionally corresponding UUIDs in this array (the two arrays must
	// match in size).
	SourcedData []string `json:"sourcedData"`
	// Optional array of UDL observation data types used to build this state vector
	// (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
	// UUIDs of observations for the positionally corresponding data types in this
	// array (the two arrays must match in size).
	//
	// Any of "EO", "RADAR", "RF", "DOA", "ELSET", "SV".
	SourcedDataTypes []string `json:"sourcedDataTypes"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The effective area of the object exposed to solar radiation pressure, expressed
	// in meters^2.
	SrpArea float64 `json:"srpArea"`
	// Integrator step mode (AUTO, TIME, or S).
	StepMode string `json:"stepMode"`
	// Initial integration step size (seconds).
	StepSize float64 `json:"stepSize"`
	// Initial step size selection (AUTO or MANUAL).
	StepSizeSelection string `json:"stepSizeSelection"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
	// in seconds.
	TaiUtc float64 `json:"taiUtc"`
	// Model parameter value for thrust acceleration (m/s2).
	ThrustAccel float64 `json:"thrustAccel"`
	// The number of sensor tracks available for the OD of the object.
	TracksAvail int64 `json:"tracksAvail"`
	// The number of sensor tracks accepted for the OD of the object.
	TracksUsed int64 `json:"tracksUsed"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Boolean indicating this state vector was unable to be correlated to a known
	// object. This flag should only be set to true by data providers after an attempt
	// to correlate to an OnOrbit object was made and failed. If unable to correlate,
	// the 'origObjectId' field may be populated with an internal data provider
	// specific identifier.
	Uct bool `json:"uct"`
	// Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
	Ut1Rate float64 `json:"ut1Rate"`
	// Universal Time-1 (UT1) minus UTC offset, in seconds.
	Ut1Utc float64 `json:"ut1Utc"`
	// One sigma velocity uncertainty, in kilometers/second.
	VelUnc float64 `json:"velUnc"`
	// Cartesian X acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xaccel float64 `json:"xaccel"`
	// Cartesian X position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xpos float64 `json:"xpos"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt1 float64 `json:"xposAlt1"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt2 float64 `json:"xposAlt2"`
	// Cartesian X velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xvel float64 `json:"xvel"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt1 float64 `json:"xvelAlt1"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt2 float64 `json:"xvelAlt2"`
	// Cartesian Y acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yaccel float64 `json:"yaccel"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Ypos float64 `json:"ypos"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt1 float64 `json:"yposAlt1"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt2 float64 `json:"yposAlt2"`
	// Cartesian Y velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yvel float64 `json:"yvel"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt1 float64 `json:"yvelAlt1"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt2 float64 `json:"yvelAlt2"`
	// Cartesian Z acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zaccel float64 `json:"zaccel"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zpos float64 `json:"zpos"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt1 float64 `json:"zposAlt1"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt2 float64 `json:"zposAlt2"`
	// Cartesian Z velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zvel float64 `json:"zvel"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt1 float64 `json:"zvelAlt1"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt2 float64 `json:"zvelAlt2"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Epoch                 respjson.Field
		Source                respjson.Field
		ActualOdSpan          respjson.Field
		Algorithm             respjson.Field
		Alt1ReferenceFrame    respjson.Field
		Alt2ReferenceFrame    respjson.Field
		Area                  respjson.Field
		BDot                  respjson.Field
		CmOffset              respjson.Field
		Cov                   respjson.Field
		CovMethod             respjson.Field
		CovReferenceFrame     respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Descriptor            respjson.Field
		DragArea              respjson.Field
		DragCoeff             respjson.Field
		DragModel             respjson.Field
		Edr                   respjson.Field
		EffectiveFrom         respjson.Field
		EffectiveUntil        respjson.Field
		EqCov                 respjson.Field
		ErrorControl          respjson.Field
		FixedStep             respjson.Field
		GeopotentialModel     respjson.Field
		Iau1980Terms          respjson.Field
		IDOnOrbit             respjson.Field
		IDOrbitDetermination  respjson.Field
		IDStateVector         respjson.Field
		IntegratorMode        respjson.Field
		InTrackThrust         respjson.Field
		LastObEnd             respjson.Field
		LastObStart           respjson.Field
		LeapSecondTime        respjson.Field
		LunarSolar            respjson.Field
		Mass                  respjson.Field
		ObsAvailable          respjson.Field
		ObsUsed               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		Partials              respjson.Field
		Pedigree              respjson.Field
		PolarMotionX          respjson.Field
		PolarMotionY          respjson.Field
		PosUnc                respjson.Field
		RawFileUri            respjson.Field
		RecOdSpan             respjson.Field
		ReferenceFrame        respjson.Field
		ResidualsAcc          respjson.Field
		RevNo                 respjson.Field
		Rms                   respjson.Field
		SatNo                 respjson.Field
		SigmaPosUvw           respjson.Field
		SigmaVelUvw           respjson.Field
		SolarFluxApAvg        respjson.Field
		SolarFluxF10          respjson.Field
		SolarFluxF10Avg       respjson.Field
		SolarRadPress         respjson.Field
		SolarRadPressCoeff    respjson.Field
		SolidEarthTides       respjson.Field
		SourcedData           respjson.Field
		SourcedDataTypes      respjson.Field
		SourceDl              respjson.Field
		SrpArea               respjson.Field
		StepMode              respjson.Field
		StepSize              respjson.Field
		StepSizeSelection     respjson.Field
		Tags                  respjson.Field
		TaiUtc                respjson.Field
		ThrustAccel           respjson.Field
		TracksAvail           respjson.Field
		TracksUsed            respjson.Field
		TransactionID         respjson.Field
		Uct                   respjson.Field
		Ut1Rate               respjson.Field
		Ut1Utc                respjson.Field
		VelUnc                respjson.Field
		Xaccel                respjson.Field
		Xpos                  respjson.Field
		XposAlt1              respjson.Field
		XposAlt2              respjson.Field
		Xvel                  respjson.Field
		XvelAlt1              respjson.Field
		XvelAlt2              respjson.Field
		Yaccel                respjson.Field
		Ypos                  respjson.Field
		YposAlt1              respjson.Field
		YposAlt2              respjson.Field
		Yvel                  respjson.Field
		YvelAlt1              respjson.Field
		YvelAlt2              respjson.Field
		Zaccel                respjson.Field
		Zpos                  respjson.Field
		ZposAlt1              respjson.Field
		ZposAlt2              respjson.Field
		Zvel                  respjson.Field
		ZvelAlt1              respjson.Field
		ZvelAlt2              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CollectRequestFullStateVector) RawJSON() string { return r.JSON.raw }
func (r *CollectRequestFullStateVector) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collect response supports the response and status of individual collect
// requests. Each response is referenced by the UUID of the request, and contains
// information including the status of the request, collection times and types, and
// reference(s) to the observations collected. There may be multiple responses
// associated with a request, either from multiple collectors or to relay status
// changes prior to completion and delivery.
type CollectResponseFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode CollectResponseFullDataMode `json:"dataMode,required"`
	// Unique identifier of the request associated with this response.
	IDRequest string `json:"idRequest,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The actual end time of the collect or contact, in ISO 8601 UTC format.
	ActualEndTime time.Time `json:"actualEndTime" format:"date-time"`
	// The actual start time of the collect or contact, in ISO 8601 UTC format.
	ActualStartTime time.Time `json:"actualStartTime" format:"date-time"`
	// Proposed alternative end time, in ISO 8601 UTC format.
	AltEndTime time.Time `json:"altEndTime" format:"date-time"`
	// Proposed alternative start time, in ISO 8601 UTC format.
	AltStartTime time.Time `json:"altStartTime" format:"date-time"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Error code associated with this request/response.
	ErrCode string `json:"errCode"`
	// UUID from external systems. This field has no meaning within UDL and is provided
	// as a convenience for systems that require tracking of internal system generated
	// ID.
	ExternalID string `json:"externalId"`
	// Unique identifier of the target on-orbit object associated with this response.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the parent plan or schedule associated with the
	// request/response.
	IDPlan string `json:"idPlan"`
	// Unique identifier of the reporting sensor.
	IDSensor string `json:"idSensor"`
	// Notes or comments associated with this response.
	Notes string `json:"notes"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by data source to indicate the target object of
	// this response. This may be an internal identifier and not necessarily a valid
	// satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Optional identifier provided by the collection source to indicate the sensor
	// identifier responding to this collect or contact. This may be an internal
	// identifier and not necessarily a valid sensor ID.
	OrigSensorID string `json:"origSensorId"`
	// Satellite/catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo"`
	// Array of UUIDs of the UDL data record(s) collected in response to the associated
	// request. See the associated 'srcTyps' array for the specific types of data,
	// positionally corresponding to the UUIDs in this array. The 'srcTyps' and
	// 'srcIds' arrays must match in size. The appropriate API operation can be used to
	// retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
	SrcIDs []string `json:"srcIds"`
	// Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or
	// produced in response to the associated request. See the associated 'srcIds'
	// array for the record UUIDs, positionally corresponding to the record types in
	// this array. The 'srcTyps' and 'srcIds' arrays must match in size. The
	// appropriate API operation can be used to retrieve the specified object(s) (e.g.
	// /udl/rfobservation/{uuid}).
	SrcTyps []string `json:"srcTyps"`
	// The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED,
	// FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
	//
	// ACCEPTED: The collect or contact request has been received and accepted.
	//
	// CANCELLED: A previously scheduled collect or contact whose execution was
	// cancelled.
	//
	// COLLECTED: The collect has been accomplished. A collected state implies that
	// additional activity is required for delivery/completion.
	//
	// COMPLETED: The collect or contact has been completed. For many systems completed
	// and delivered constitute an equivalent successful end state.
	//
	// DELIVERED: The collected observation(s) have been delivered to the requestor.
	// For many systems completed and delivered constitute an equivalent successful end
	// state. A DELIVERED state is typically used for systems that exhibit a delay
	// between collect and delivery, such as with space-based systems which require
	// ground contact to deliver observations.
	//
	// FAILED: The collect or contact was attempted and failed, or the delivery of the
	// collected observation(s) failed. A FAILED status may be accompanied by an error
	// code (errCode), if available.
	//
	// PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been
	// accomplished, but the full request is incomplete. A PARTIAL status should
	// ultimately be resolved to an end state.
	//
	// PROPOSED: Indicates that the request was received and alternate collect or
	// contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate
	// is accepted by the requestor the current request should be cancelled and a new
	// request created.
	//
	// REJECTED: The request has been received and rejected by the provider. A REJECTED
	// status may be accompanied by an explanation (notes) of the reason that the
	// request was rejected.
	//
	// SCHEDULED: The request was received and has been scheduled for execution.
	Status string `json:"status"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional task ID associated with the request/response.
	TaskID string `json:"taskId"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDRequest             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		ActualEndTime         respjson.Field
		ActualStartTime       respjson.Field
		AltEndTime            respjson.Field
		AltStartTime          respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		ErrCode               respjson.Field
		ExternalID            respjson.Field
		IDOnOrbit             respjson.Field
		IDPlan                respjson.Field
		IDSensor              respjson.Field
		Notes                 respjson.Field
		OnOrbit               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		OrigSensorID          respjson.Field
		SatNo                 respjson.Field
		SrcIDs                respjson.Field
		SrcTyps               respjson.Field
		Status                respjson.Field
		Tags                  respjson.Field
		TaskID                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CollectResponseFull) RawJSON() string { return r.JSON.raw }
func (r *CollectResponseFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type CollectResponseFullDataMode string

const (
	CollectResponseFullDataModeReal      CollectResponseFullDataMode = "REAL"
	CollectResponseFullDataModeTest      CollectResponseFullDataMode = "TEST"
	CollectResponseFullDataModeSimulated CollectResponseFullDataMode = "SIMULATED"
	CollectResponseFullDataModeExercise  CollectResponseFullDataMode = "EXERCISE"
)

// Comm represents communications entities (e.g. on-orbit communications satellite
// payloads) within the SSA environment.
type CommFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode CommFullDataMode `json:"dataMode,required"`
	// Name of the Comm entity.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Description of the comm entity.
	Description string `json:"description"`
	// An entity is a generic representation of any object within a space/SSA system
	// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
	// entity can have an operating unit, a location (if terrestrial), and statuses.
	Entity EntityFull `json:"entity"`
	// Unique identifier of the parent entity. idEntity is required for Put.
	IDEntity string `json:"idEntity"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Read-only collection of Transponders for this Comm entity.
	Transponders []CommFullTransponder `json:"transponders"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Description           respjson.Field
		Entity                respjson.Field
		IDEntity              respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Transponders          respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CommFull) RawJSON() string { return r.JSON.raw }
func (r *CommFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type CommFullDataMode string

const (
	CommFullDataModeReal      CommFullDataMode = "REAL"
	CommFullDataModeTest      CommFullDataMode = "TEST"
	CommFullDataModeSimulated CommFullDataMode = "SIMULATED"
	CommFullDataModeExercise  CommFullDataMode = "EXERCISE"
)

// A transponder receives and transmits radio signals at a prescribed frequency
// range. A communications satellite's transponder is the series of interconnected
// units that form a communications channel between the receiving and the
// transmitting antennas. It is mainly used in satellite communication to transfer
// the received signals.
type CommFullTransponder struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// ID of the parent Comm object for this transponder.
	IDComm string `json:"idComm,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Collection of Channels for this Transponder.
	Channels []ChannelFull `json:"channels"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 =
	// 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
	Fec int64 `json:"fec"`
	// Format.
	Format string `json:"format"`
	// Transponder modulation, e.g. Auto, QPSK, 8PSK.
	Modulation string `json:"modulation"`
	// Optional name of the transponder.
	Name string `json:"name"`
	// Optional external network id as provided data source.
	Nid string `json:"nid"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Symbol rate is the number of symbol changes, waveform changes, or signaling
	// events, across the transmission medium per time unit using a digitally modulated
	// signal or a line code. Also measured in Hz.
	SymbolRate float64 `json:"symbolRate"`
	// Transponder system, e.g. DVB-S, DVB-S2.
	System string `json:"system"`
	// Optional external transponder id as provided data source.
	Tid string `json:"tid"`
	// Transponder Translation Factor. This is the frequency difference between the
	// uplink received by a satellite, and the downlink transmitted back. It varies
	// satellite to satellite dependent on the mission.
	Ttf float64 `json:"ttf"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDComm                respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Channels              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Fec                   respjson.Field
		Format                respjson.Field
		Modulation            respjson.Field
		Name                  respjson.Field
		Nid                   respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		SymbolRate            respjson.Field
		System                respjson.Field
		Tid                   respjson.Field
		Ttf                   respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CommFullTransponder) RawJSON() string { return r.JSON.raw }
func (r *CommFullTransponder) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Stores the results of a particular Conjunction Assessment (CA) run.
type ConjunctionFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode ConjunctionFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Time of closest approach (TCA) in UTC.
	Tca time.Time `json:"tca,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Commander's critical information requirements notes.
	Ccir string `json:"ccir"`
	// The value of the primary (object1) Area times the drag coefficient over the
	// object Mass, expressed in m^2/kg, used for propagation of the primary state
	// vector and covariance to TCA.
	CdAoM1 float64 `json:"cdAoM1"`
	// The value of the secondary (object2) Area times the drag coefficient over the
	// object Mass, expressed in m^2/kg, used for propagation of the primary state
	// vector and covariance to TCA.
	CdAoM2 float64 `json:"cdAoM2"`
	// Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that
	// Object1 and Object2 will collide.
	CollisionProb float64 `json:"collisionProb"`
	// The method that was used to calculate the collision probability, ex.
	// FOSTER-1992.
	CollisionProbMethod string `json:"collisionProbMethod"`
	// Additional notes from data providers.
	Comments string `json:"comments"`
	// Emergency comments.
	ConcernNotes string `json:"concernNotes"`
	// The value of the primary (object1) Area times the solar radiation pressure
	// coefficient over the object Mass, expressed in m^2/kg, used for propagation of
	// the primary state vector and covariance to TCA. This parameter is sometimes
	// referred to as AGOM.
	CrAoM1 float64 `json:"crAoM1"`
	// The value of the secondary (object2) Area times the solar radiation pressure
	// coefficient over the object Mass, expressed in m^2/kg, used for propagation of
	// the primary state vector and covariance to TCA. This parameter is sometimes
	// referred to as AGOM.
	CrAoM2 float64 `json:"crAoM2"`
	// Time the row was created in the database.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database.
	CreatedBy string `json:"createdBy"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// The filename of the primary (object1) ephemeris used in the screening, if
	// applicable.
	EphemName1 string `json:"ephemName1"`
	// The filename of the secondary (object2) ephemeris used in the screening, if
	// applicable.
	EphemName2 string `json:"ephemName2"`
	// Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris
	// used in the screening, if applicable.
	EsId1 string `json:"esId1"`
	// Unique identifier of the parent Ephemeris Set of the secondary (object2)
	// ephemeris used in the screening, if applicable.
	EsId2 string `json:"esId2"`
	// Optional source-provided identifier for this conjunction event. In the case
	// where multiple conjunction records are submitted for the same event, this field
	// can be used to tie them together to the same event.
	EventID string `json:"eventId"`
	// Unique identifier of the primary satellite on-orbit object, if correlated.
	IDOnOrbit1 string `json:"idOnOrbit1"`
	// Unique identifier of the secondary satellite on-orbit object, if correlated.
	IDOnOrbit2 string `json:"idOnOrbit2"`
	// Optional ID of the UDL State Vector at TCA of the primary object. When
	// performing a create, this id will be ignored in favor of the UDL generated id of
	// the stateVector1.
	IDStateVector1 string `json:"idStateVector1"`
	// Optional ID of the UDL State Vector at TCA of the secondary object. When
	// performing a create, this id will be ignored in favor of the UDL generated id of
	// the stateVector2.
	IDStateVector2 string `json:"idStateVector2"`
	// Used for probability of collision calculation, not Warning/Alert Threshold
	// notifications.
	LargeCovWarning bool `json:"largeCovWarning"`
	// Used for probability of collision calculation, not Warning/Alert Threshold
	// notifications.
	LargeRelPosWarning bool `json:"largeRelPosWarning"`
	// Time of last positive metric observation of the primary satellite.
	LastObTime1 time.Time `json:"lastObTime1" format:"date-time"`
	// Time of last positive metric observation of the secondary satellite.
	LastObTime2 time.Time `json:"lastObTime2" format:"date-time"`
	// Spacecraft name(s) for which the Collision message is provided.
	MessageFor string `json:"messageFor"`
	// JMS provided message ID link.
	MessageID string `json:"messageId"`
	// Distance between objects at Time of Closest Approach (TCA) in meters.
	MissDistance float64 `json:"missDistance"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit1 OnorbitFull `json:"onOrbit1"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit2 OnorbitFull `json:"onOrbit2"`
	// Optional place holder for an OnOrbit ID that does not exist in UDL.
	OrigIDOnOrbit1 string `json:"origIdOnOrbit1"`
	// Optional place holder for an OnOrbit ID that does not exist in UDL.
	OrigIDOnOrbit2 string `json:"origIdOnOrbit2"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// Creating agency or owner/operator (may be different than provider who submitted
	// the conjunction message).
	Originator string `json:"originator"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Flag indicating if owner was contacted.
	OwnerContacted bool `json:"ownerContacted"`
	// Penetration Level Sigma.
	PenetrationLevelSigma float64 `json:"penetrationLevelSigma"`
	// Link to filename associated with JMS record.
	RawFileUri string `json:"rawFileURI"`
	// Distance between objects along Normal vector in meters.
	RelPosN float64 `json:"relPosN"`
	// Distance between objects along Radial Vector at Time of Closest Approach in
	// meters.
	RelPosR float64 `json:"relPosR"`
	// Distance between objects along Tangential Vector in meters.
	RelPosT float64 `json:"relPosT"`
	// Closing velocity magnitude (relative speed) at Time of Closest Approach in
	// meters/sec.
	RelVelMag float64 `json:"relVelMag"`
	// Closing velocity between objects along Normal Vector in meters/sec.
	RelVelN float64 `json:"relVelN"`
	// Closing velocity between objects along Radial Vector at Time of Closest Approach
	// in meters/sec.
	RelVelR float64 `json:"relVelR"`
	// Closing velocity between objects along Tangential Vector in meters/sec.
	RelVelT float64 `json:"relVelT"`
	// Satellite/catalog number of the target on-orbit primary object.
	SatNo1 int64 `json:"satNo1"`
	// Satellite/catalog number of the target on-orbit secondary object.
	SatNo2 int64 `json:"satNo2"`
	// The start time in UTC of the screening period for the conjunction assessment.
	ScreenEntryTime time.Time `json:"screenEntryTime" format:"date-time"`
	// The stop time in UTC of the screening period for the conjunction assessment.
	ScreenExitTime time.Time `json:"screenExitTime" format:"date-time"`
	// Component size of screen in X component of RTN (Radial, Transverse and Normal)
	// frame in meters.
	ScreenVolumeX float64 `json:"screenVolumeX"`
	// Component size of screen in Y component of RTN (Radial, Transverse and Normal)
	// frame in meters.
	ScreenVolumeY float64 `json:"screenVolumeY"`
	// Component size of screen in Z component of RTN (Radial, Transverse and Normal)
	// frame in meters.
	ScreenVolumeZ float64 `json:"screenVolumeZ"`
	// Used for probability of collision calculation, not Warning/Alert Threshold
	// notifications.
	SmallCovWarning bool `json:"smallCovWarning"`
	// Used for probability of collision calculation, not Warning/Alert Threshold
	// notifications.
	SmallRelVelWarning bool `json:"smallRelVelWarning"`
	// Flag indicating if State department was notified.
	StateDeptNotified bool `json:"stateDeptNotified"`
	// This service provides operations for querying and manipulation of state vectors
	// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
	// velocity (v) that, together with their time (epoch) (t), uniquely determine the
	// trajectory of the orbiting body in space. J2000 is the preferred coordinate
	// frame for all state vector positions/velocities in UDL, but in some cases data
	// may be in another frame depending on the provider and/or datatype. Please see
	// the 'Discover' tab in the storefront to confirm coordinate frames by data
	// provider.
	StateVector1 ConjunctionFullStateVector1 `json:"stateVector1"`
	// This service provides operations for querying and manipulation of state vectors
	// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
	// velocity (v) that, together with their time (epoch) (t), uniquely determine the
	// trajectory of the orbiting body in space. J2000 is the preferred coordinate
	// frame for all state vector positions/velocities in UDL, but in some cases data
	// may be in another frame depending on the provider and/or datatype. Please see
	// the 'Discover' tab in the storefront to confirm coordinate frames by data
	// provider.
	StateVector2 ConjunctionFullStateVector2 `json:"stateVector2"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust
	// used to propagate the primary state vector and covariance to TCA.
	ThrustAccel1 float64 `json:"thrustAccel1"`
	// The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust
	// used to propagate the primary state vector and covariance to TCA.
	ThrustAccel2 float64 `json:"thrustAccel2"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// The type of data represented in this conjunction record (e.g. CONJUNCTION,
	// CARA-WORKLIST, etc.). If type is null the record is assumed to be a Conjunction.
	Type string `json:"type"`
	// Used for probability of collision calculation, not Warning/Alert Threshold
	// notifications.
	UvwWarn bool `json:"uvwWarn"`
	// The time at which the secondary (object2) enters the screening volume, in ISO
	// 8601 UTC format with microsecond precision.
	VolEntryTime time.Time `json:"volEntryTime" format:"date-time"`
	// The time at which the secondary (object2) exits the screening volume, in ISO
	// 8601 UTC format with microsecond precision.
	VolExitTime time.Time `json:"volExitTime" format:"date-time"`
	// The shape (BOX, ELLIPSOID) of the screening volume.
	VolShape string `json:"volShape"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		Tca                   respjson.Field
		ID                    respjson.Field
		Ccir                  respjson.Field
		CdAoM1                respjson.Field
		CdAoM2                respjson.Field
		CollisionProb         respjson.Field
		CollisionProbMethod   respjson.Field
		Comments              respjson.Field
		ConcernNotes          respjson.Field
		CrAoM1                respjson.Field
		CrAoM2                respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Descriptor            respjson.Field
		EphemName1            respjson.Field
		EphemName2            respjson.Field
		EsId1                 respjson.Field
		EsId2                 respjson.Field
		EventID               respjson.Field
		IDOnOrbit1            respjson.Field
		IDOnOrbit2            respjson.Field
		IDStateVector1        respjson.Field
		IDStateVector2        respjson.Field
		LargeCovWarning       respjson.Field
		LargeRelPosWarning    respjson.Field
		LastObTime1           respjson.Field
		LastObTime2           respjson.Field
		MessageFor            respjson.Field
		MessageID             respjson.Field
		MissDistance          respjson.Field
		OnOrbit1              respjson.Field
		OnOrbit2              respjson.Field
		OrigIDOnOrbit1        respjson.Field
		OrigIDOnOrbit2        respjson.Field
		Origin                respjson.Field
		Originator            respjson.Field
		OrigNetwork           respjson.Field
		OwnerContacted        respjson.Field
		PenetrationLevelSigma respjson.Field
		RawFileUri            respjson.Field
		RelPosN               respjson.Field
		RelPosR               respjson.Field
		RelPosT               respjson.Field
		RelVelMag             respjson.Field
		RelVelN               respjson.Field
		RelVelR               respjson.Field
		RelVelT               respjson.Field
		SatNo1                respjson.Field
		SatNo2                respjson.Field
		ScreenEntryTime       respjson.Field
		ScreenExitTime        respjson.Field
		ScreenVolumeX         respjson.Field
		ScreenVolumeY         respjson.Field
		ScreenVolumeZ         respjson.Field
		SmallCovWarning       respjson.Field
		SmallRelVelWarning    respjson.Field
		StateDeptNotified     respjson.Field
		StateVector1          respjson.Field
		StateVector2          respjson.Field
		Tags                  respjson.Field
		ThrustAccel1          respjson.Field
		ThrustAccel2          respjson.Field
		TransactionID         respjson.Field
		Type                  respjson.Field
		UvwWarn               respjson.Field
		VolEntryTime          respjson.Field
		VolExitTime           respjson.Field
		VolShape              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r ConjunctionFull) RawJSON() string { return r.JSON.raw }
func (r *ConjunctionFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type ConjunctionFullDataMode string

const (
	ConjunctionFullDataModeReal      ConjunctionFullDataMode = "REAL"
	ConjunctionFullDataModeTest      ConjunctionFullDataMode = "TEST"
	ConjunctionFullDataModeSimulated ConjunctionFullDataMode = "SIMULATED"
	ConjunctionFullDataModeExercise  ConjunctionFullDataMode = "EXERCISE"
)

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
type ConjunctionFullStateVector1 struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Time of validity for state vector in ISO 8601 UTC datetime format, with
	// microsecond precision.
	Epoch time.Time `json:"epoch,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// The actual time span used for the OD of the object, expressed in days.
	ActualOdSpan float64 `json:"actualODSpan"`
	// Optional algorithm used to produce this record.
	Algorithm string `json:"algorithm"`
	// The reference frame of the alternate1 (Alt1) cartesian orbital state.
	Alt1ReferenceFrame string `json:"alt1ReferenceFrame"`
	// The reference frame of the alternate2 (Alt2) cartesian orbital state.
	Alt2ReferenceFrame string `json:"alt2ReferenceFrame"`
	// The actual area of the object at it's largest cross-section, expressed in
	// meters^2.
	Area float64 `json:"area"`
	// First derivative of drag/ballistic coefficient (m2/kg-s).
	BDot float64 `json:"bDot"`
	// Model parameter value for center of mass offset (m).
	CmOffset float64 `json:"cmOffset"`
	// Covariance matrix, in kilometer and second based units, in the specified
	// covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
	// The array values (1-21) represent the lower triangular half of the
	// position-velocity covariance matrix. The size of the covariance matrix is
	// dynamic, depending on whether the covariance for position only or position &
	// velocity. The covariance elements are position dependent within the array with
	// values ordered as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
	//
	// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
	//
	// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
	//
	// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
	//
	// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
	//
	// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
	//
	// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
	//
	// The cov array should contain only the lower left triangle values from top left
	// down to bottom right, in order.
	//
	// If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
	// matrix can be extended with the following order of elements:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
	//
	// DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
	//
	// SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
	//
	// THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
	Cov []float64 `json:"cov"`
	// The method used to generate the covariance during the orbit determination (OD)
	// that produced the state vector, or whether an arbitrary, non-calculated default
	// value was used (CALCULATED, DEFAULT).
	CovMethod string `json:"covMethod"`
	// The reference frame of the covariance matrix elements. If the covReferenceFrame
	// is null it is assumed to be J2000.
	//
	// Any of "J2000", "UVW", "EFG/TDR", "TEME", "GCRF".
	CovReferenceFrame string `json:"covReferenceFrame"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// The effective area of the object exposed to atmospheric drag, expressed in
	// meters^2.
	DragArea float64 `json:"dragArea"`
	// Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
	DragCoeff float64 `json:"dragCoeff"`
	// The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
	// NONE, etc.).
	DragModel string `json:"dragModel"`
	// Model parameter value for energy dissipation rate (EDR) (w/kg).
	Edr float64 `json:"edr"`
	// Start time at which this state vector was the 'current' state vector for its
	// satellite.
	EffectiveFrom time.Time `json:"effectiveFrom" format:"date-time"`
	// End time at which this state vector was no longer the 'current' state vector for
	// its satellite.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// The covariance matrix values represent the lower triangular half of the
	// covariance matrix in terms of equinoctial elements.&nbsp; The size of the
	// covariance matrix is dynamic.&nbsp; The values are outputted in order across
	// each row, i.e.:
	//
	// 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
	//
	// 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// The ordering of values is as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
	// Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
	// B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
	//
	// Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
	//
	// Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
	//
	// L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
	//
	// N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
	//
	// Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
	// 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
	//
	// Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
	// 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
	//
	// B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
	// 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
	//
	// BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
	// 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
	//
	// AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
	// 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
	//
	// T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
	// 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
	// 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
	//
	// C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
	// 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
	// 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
	//
	// C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
	// 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
	// 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
	//
	// :
	//
	// :
	//
	// where C1, C2, etc, are the "consider parameters" that may be added to the
	// covariance matrix.&nbsp; The covariance matrix will be as large as the last
	// element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
	// elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
	// BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
	// will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
	// only the lower left triangle values from top left down to bottom right, in
	// order.
	EqCov []float64 `json:"eqCov"`
	// Integrator error control.
	ErrorControl float64 `json:"errorControl"`
	// Boolean indicating use of fixed step size for this vector.
	FixedStep bool `json:"fixedStep"`
	// Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
	// GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
	// 24Z,24T.
	GeopotentialModel string `json:"geopotentialModel"`
	// Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
	Iau1980Terms int64 `json:"iau1980Terms"`
	// Unique identifier of the satellite on-orbit object, if correlated. For the
	// public catalog, the idOnOrbit is typically the satellite number as a string, but
	// may be a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the OD solution record that produced this state vector.
	// This ID can be used to obtain additional information on an OrbitDetermination
	// object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
	// example, the OrbitDetermination with idOrbitDetermination = abc would be queries
	// as /udl/orbitdetermination/abc.
	IDOrbitDetermination string `json:"idOrbitDetermination"`
	// Unique identifier of the record, auto-generated by the system.
	IDStateVector string `json:"idStateVector"`
	// Integrator Mode.
	IntegratorMode string `json:"integratorMode"`
	// Boolean indicating use of in-track thrust perturbations for this vector.
	InTrackThrust bool `json:"inTrackThrust"`
	// The end of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObEnd time.Time `json:"lastObEnd" format:"date-time"`
	// The start of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObStart time.Time `json:"lastObStart" format:"date-time"`
	// Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
	// second is not known, the time of the previous leap second is used.
	LeapSecondTime time.Time `json:"leapSecondTime" format:"date-time"`
	// Boolean indicating use of lunar/solar perturbations for this vector.
	LunarSolar bool `json:"lunarSolar"`
	// The mass of the object, in kilograms.
	Mass float64 `json:"mass"`
	// The number of observations available for the OD of the object.
	ObsAvailable int64 `json:"obsAvailable"`
	// The number of observations accepted for the OD of the object.
	ObsUsed int64 `json:"obsUsed"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by state vector source to indicate the target
	// onorbit object of this state vector. This may be an internal identifier and not
	// necessarily map to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
	Partials string `json:"partials"`
	// The pedigree of state vector, or methods used for its generation to include
	// state update/orbit determination, propagation from another state, or a state
	// from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
	// CONJUNCTION, FLIGHT_PLAN).
	Pedigree string `json:"pedigree"`
	// Polar Wander Motion X (arc seconds).
	PolarMotionX float64 `json:"polarMotionX"`
	// Polar Wander Motion Y (arc seconds).
	PolarMotionY float64 `json:"polarMotionY"`
	// One sigma position uncertainty, in kilometers.
	PosUnc float64 `json:"posUnc"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The recommended OD time span calculated for the object, expressed in days.
	RecOdSpan float64 `json:"recODSpan"`
	// The reference frame of the cartesian orbital states. If the referenceFrame is
	// null it is assumed to be J2000.
	//
	// Any of "J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF".
	ReferenceFrame string `json:"referenceFrame"`
	// The percentage of residuals accepted in the OD of the object.
	ResidualsAcc float64 `json:"residualsAcc"`
	// Epoch revolution number.
	RevNo int64 `json:"revNo"`
	// The Weighted Root Mean Squared (RMS) of the differential correction on the
	// target object that produced this vector. WRMS is a quality indicator of the
	// state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
	// Least Squares (BLS) processes.
	Rms float64 `json:"rms"`
	// Satellite/Catalog number of the target OnOrbit object.
	SatNo int64 `json:"satNo"`
	// Array containing the standard deviation of error in target object position, U, V
	// and W direction respectively (km).
	SigmaPosUvw []float64 `json:"sigmaPosUVW"`
	// Array containing the standard deviation of error in target object velocity, U, V
	// and W direction respectively (km/sec).
	SigmaVelUvw []float64 `json:"sigmaVelUVW"`
	// Average solar flux geomagnetic index.
	SolarFluxApAvg float64 `json:"solarFluxAPAvg"`
	// F10 (10.7 cm) solar flux value.
	SolarFluxF10 float64 `json:"solarFluxF10"`
	// F10 (10.7 cm) solar flux 81-day average value.
	SolarFluxF10Avg float64 `json:"solarFluxF10Avg"`
	// Boolean indicating use of solar radiation pressure perturbations for this
	// vector.
	SolarRadPress bool `json:"solarRadPress"`
	// Area-to-mass ratio coefficient for solar radiation pressure.
	SolarRadPressCoeff float64 `json:"solarRadPressCoeff"`
	// Boolean indicating use of solid earth tide perturbations for this vector.
	SolidEarthTides bool `json:"solidEarthTides"`
	// Optional array of UDL data (observation) UUIDs used to build this state vector.
	// See the associated sourcedDataTypes array for the specific types of observations
	// for the positionally corresponding UUIDs in this array (the two arrays must
	// match in size).
	SourcedData []string `json:"sourcedData"`
	// Optional array of UDL observation data types used to build this state vector
	// (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
	// UUIDs of observations for the positionally corresponding data types in this
	// array (the two arrays must match in size).
	//
	// Any of "EO", "RADAR", "RF", "DOA", "ELSET", "SV".
	SourcedDataTypes []string `json:"sourcedDataTypes"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The effective area of the object exposed to solar radiation pressure, expressed
	// in meters^2.
	SrpArea float64 `json:"srpArea"`
	// Integrator step mode (AUTO, TIME, or S).
	StepMode string `json:"stepMode"`
	// Initial integration step size (seconds).
	StepSize float64 `json:"stepSize"`
	// Initial step size selection (AUTO or MANUAL).
	StepSizeSelection string `json:"stepSizeSelection"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
	// in seconds.
	TaiUtc float64 `json:"taiUtc"`
	// Model parameter value for thrust acceleration (m/s2).
	ThrustAccel float64 `json:"thrustAccel"`
	// The number of sensor tracks available for the OD of the object.
	TracksAvail int64 `json:"tracksAvail"`
	// The number of sensor tracks accepted for the OD of the object.
	TracksUsed int64 `json:"tracksUsed"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Boolean indicating this state vector was unable to be correlated to a known
	// object. This flag should only be set to true by data providers after an attempt
	// to correlate to an OnOrbit object was made and failed. If unable to correlate,
	// the 'origObjectId' field may be populated with an internal data provider
	// specific identifier.
	Uct bool `json:"uct"`
	// Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
	Ut1Rate float64 `json:"ut1Rate"`
	// Universal Time-1 (UT1) minus UTC offset, in seconds.
	Ut1Utc float64 `json:"ut1Utc"`
	// One sigma velocity uncertainty, in kilometers/second.
	VelUnc float64 `json:"velUnc"`
	// Cartesian X acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xaccel float64 `json:"xaccel"`
	// Cartesian X position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xpos float64 `json:"xpos"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt1 float64 `json:"xposAlt1"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt2 float64 `json:"xposAlt2"`
	// Cartesian X velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xvel float64 `json:"xvel"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt1 float64 `json:"xvelAlt1"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt2 float64 `json:"xvelAlt2"`
	// Cartesian Y acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yaccel float64 `json:"yaccel"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Ypos float64 `json:"ypos"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt1 float64 `json:"yposAlt1"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt2 float64 `json:"yposAlt2"`
	// Cartesian Y velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yvel float64 `json:"yvel"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt1 float64 `json:"yvelAlt1"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt2 float64 `json:"yvelAlt2"`
	// Cartesian Z acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zaccel float64 `json:"zaccel"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zpos float64 `json:"zpos"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt1 float64 `json:"zposAlt1"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt2 float64 `json:"zposAlt2"`
	// Cartesian Z velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zvel float64 `json:"zvel"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt1 float64 `json:"zvelAlt1"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt2 float64 `json:"zvelAlt2"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Epoch                 respjson.Field
		Source                respjson.Field
		ActualOdSpan          respjson.Field
		Algorithm             respjson.Field
		Alt1ReferenceFrame    respjson.Field
		Alt2ReferenceFrame    respjson.Field
		Area                  respjson.Field
		BDot                  respjson.Field
		CmOffset              respjson.Field
		Cov                   respjson.Field
		CovMethod             respjson.Field
		CovReferenceFrame     respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Descriptor            respjson.Field
		DragArea              respjson.Field
		DragCoeff             respjson.Field
		DragModel             respjson.Field
		Edr                   respjson.Field
		EffectiveFrom         respjson.Field
		EffectiveUntil        respjson.Field
		EqCov                 respjson.Field
		ErrorControl          respjson.Field
		FixedStep             respjson.Field
		GeopotentialModel     respjson.Field
		Iau1980Terms          respjson.Field
		IDOnOrbit             respjson.Field
		IDOrbitDetermination  respjson.Field
		IDStateVector         respjson.Field
		IntegratorMode        respjson.Field
		InTrackThrust         respjson.Field
		LastObEnd             respjson.Field
		LastObStart           respjson.Field
		LeapSecondTime        respjson.Field
		LunarSolar            respjson.Field
		Mass                  respjson.Field
		ObsAvailable          respjson.Field
		ObsUsed               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		Partials              respjson.Field
		Pedigree              respjson.Field
		PolarMotionX          respjson.Field
		PolarMotionY          respjson.Field
		PosUnc                respjson.Field
		RawFileUri            respjson.Field
		RecOdSpan             respjson.Field
		ReferenceFrame        respjson.Field
		ResidualsAcc          respjson.Field
		RevNo                 respjson.Field
		Rms                   respjson.Field
		SatNo                 respjson.Field
		SigmaPosUvw           respjson.Field
		SigmaVelUvw           respjson.Field
		SolarFluxApAvg        respjson.Field
		SolarFluxF10          respjson.Field
		SolarFluxF10Avg       respjson.Field
		SolarRadPress         respjson.Field
		SolarRadPressCoeff    respjson.Field
		SolidEarthTides       respjson.Field
		SourcedData           respjson.Field
		SourcedDataTypes      respjson.Field
		SourceDl              respjson.Field
		SrpArea               respjson.Field
		StepMode              respjson.Field
		StepSize              respjson.Field
		StepSizeSelection     respjson.Field
		Tags                  respjson.Field
		TaiUtc                respjson.Field
		ThrustAccel           respjson.Field
		TracksAvail           respjson.Field
		TracksUsed            respjson.Field
		TransactionID         respjson.Field
		Uct                   respjson.Field
		Ut1Rate               respjson.Field
		Ut1Utc                respjson.Field
		VelUnc                respjson.Field
		Xaccel                respjson.Field
		Xpos                  respjson.Field
		XposAlt1              respjson.Field
		XposAlt2              respjson.Field
		Xvel                  respjson.Field
		XvelAlt1              respjson.Field
		XvelAlt2              respjson.Field
		Yaccel                respjson.Field
		Ypos                  respjson.Field
		YposAlt1              respjson.Field
		YposAlt2              respjson.Field
		Yvel                  respjson.Field
		YvelAlt1              respjson.Field
		YvelAlt2              respjson.Field
		Zaccel                respjson.Field
		Zpos                  respjson.Field
		ZposAlt1              respjson.Field
		ZposAlt2              respjson.Field
		Zvel                  respjson.Field
		ZvelAlt1              respjson.Field
		ZvelAlt2              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r ConjunctionFullStateVector1) RawJSON() string { return r.JSON.raw }
func (r *ConjunctionFullStateVector1) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
type ConjunctionFullStateVector2 struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Time of validity for state vector in ISO 8601 UTC datetime format, with
	// microsecond precision.
	Epoch time.Time `json:"epoch,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// The actual time span used for the OD of the object, expressed in days.
	ActualOdSpan float64 `json:"actualODSpan"`
	// Optional algorithm used to produce this record.
	Algorithm string `json:"algorithm"`
	// The reference frame of the alternate1 (Alt1) cartesian orbital state.
	Alt1ReferenceFrame string `json:"alt1ReferenceFrame"`
	// The reference frame of the alternate2 (Alt2) cartesian orbital state.
	Alt2ReferenceFrame string `json:"alt2ReferenceFrame"`
	// The actual area of the object at it's largest cross-section, expressed in
	// meters^2.
	Area float64 `json:"area"`
	// First derivative of drag/ballistic coefficient (m2/kg-s).
	BDot float64 `json:"bDot"`
	// Model parameter value for center of mass offset (m).
	CmOffset float64 `json:"cmOffset"`
	// Covariance matrix, in kilometer and second based units, in the specified
	// covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
	// The array values (1-21) represent the lower triangular half of the
	// position-velocity covariance matrix. The size of the covariance matrix is
	// dynamic, depending on whether the covariance for position only or position &
	// velocity. The covariance elements are position dependent within the array with
	// values ordered as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
	//
	// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
	//
	// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
	//
	// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
	//
	// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
	//
	// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
	//
	// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
	//
	// The cov array should contain only the lower left triangle values from top left
	// down to bottom right, in order.
	//
	// If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
	// matrix can be extended with the following order of elements:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
	//
	// DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
	//
	// SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
	//
	// THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
	Cov []float64 `json:"cov"`
	// The method used to generate the covariance during the orbit determination (OD)
	// that produced the state vector, or whether an arbitrary, non-calculated default
	// value was used (CALCULATED, DEFAULT).
	CovMethod string `json:"covMethod"`
	// The reference frame of the covariance matrix elements. If the covReferenceFrame
	// is null it is assumed to be J2000.
	//
	// Any of "J2000", "UVW", "EFG/TDR", "TEME", "GCRF".
	CovReferenceFrame string `json:"covReferenceFrame"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// The effective area of the object exposed to atmospheric drag, expressed in
	// meters^2.
	DragArea float64 `json:"dragArea"`
	// Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
	DragCoeff float64 `json:"dragCoeff"`
	// The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
	// NONE, etc.).
	DragModel string `json:"dragModel"`
	// Model parameter value for energy dissipation rate (EDR) (w/kg).
	Edr float64 `json:"edr"`
	// Start time at which this state vector was the 'current' state vector for its
	// satellite.
	EffectiveFrom time.Time `json:"effectiveFrom" format:"date-time"`
	// End time at which this state vector was no longer the 'current' state vector for
	// its satellite.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// The covariance matrix values represent the lower triangular half of the
	// covariance matrix in terms of equinoctial elements.&nbsp; The size of the
	// covariance matrix is dynamic.&nbsp; The values are outputted in order across
	// each row, i.e.:
	//
	// 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
	//
	// 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// The ordering of values is as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
	// Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
	// B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
	//
	// Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
	//
	// Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
	//
	// L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
	//
	// N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
	//
	// Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
	// 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
	//
	// Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
	// 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
	//
	// B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
	// 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
	//
	// BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
	// 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
	//
	// AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
	// 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
	//
	// T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
	// 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
	// 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
	//
	// C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
	// 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
	// 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
	//
	// C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
	// 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
	// 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
	//
	// :
	//
	// :
	//
	// where C1, C2, etc, are the "consider parameters" that may be added to the
	// covariance matrix.&nbsp; The covariance matrix will be as large as the last
	// element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
	// elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
	// BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
	// will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
	// only the lower left triangle values from top left down to bottom right, in
	// order.
	EqCov []float64 `json:"eqCov"`
	// Integrator error control.
	ErrorControl float64 `json:"errorControl"`
	// Boolean indicating use of fixed step size for this vector.
	FixedStep bool `json:"fixedStep"`
	// Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
	// GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
	// 24Z,24T.
	GeopotentialModel string `json:"geopotentialModel"`
	// Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
	Iau1980Terms int64 `json:"iau1980Terms"`
	// Unique identifier of the satellite on-orbit object, if correlated. For the
	// public catalog, the idOnOrbit is typically the satellite number as a string, but
	// may be a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the OD solution record that produced this state vector.
	// This ID can be used to obtain additional information on an OrbitDetermination
	// object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
	// example, the OrbitDetermination with idOrbitDetermination = abc would be queries
	// as /udl/orbitdetermination/abc.
	IDOrbitDetermination string `json:"idOrbitDetermination"`
	// Unique identifier of the record, auto-generated by the system.
	IDStateVector string `json:"idStateVector"`
	// Integrator Mode.
	IntegratorMode string `json:"integratorMode"`
	// Boolean indicating use of in-track thrust perturbations for this vector.
	InTrackThrust bool `json:"inTrackThrust"`
	// The end of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObEnd time.Time `json:"lastObEnd" format:"date-time"`
	// The start of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObStart time.Time `json:"lastObStart" format:"date-time"`
	// Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
	// second is not known, the time of the previous leap second is used.
	LeapSecondTime time.Time `json:"leapSecondTime" format:"date-time"`
	// Boolean indicating use of lunar/solar perturbations for this vector.
	LunarSolar bool `json:"lunarSolar"`
	// The mass of the object, in kilograms.
	Mass float64 `json:"mass"`
	// The number of observations available for the OD of the object.
	ObsAvailable int64 `json:"obsAvailable"`
	// The number of observations accepted for the OD of the object.
	ObsUsed int64 `json:"obsUsed"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by state vector source to indicate the target
	// onorbit object of this state vector. This may be an internal identifier and not
	// necessarily map to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
	Partials string `json:"partials"`
	// The pedigree of state vector, or methods used for its generation to include
	// state update/orbit determination, propagation from another state, or a state
	// from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
	// CONJUNCTION, FLIGHT_PLAN).
	Pedigree string `json:"pedigree"`
	// Polar Wander Motion X (arc seconds).
	PolarMotionX float64 `json:"polarMotionX"`
	// Polar Wander Motion Y (arc seconds).
	PolarMotionY float64 `json:"polarMotionY"`
	// One sigma position uncertainty, in kilometers.
	PosUnc float64 `json:"posUnc"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The recommended OD time span calculated for the object, expressed in days.
	RecOdSpan float64 `json:"recODSpan"`
	// The reference frame of the cartesian orbital states. If the referenceFrame is
	// null it is assumed to be J2000.
	//
	// Any of "J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF".
	ReferenceFrame string `json:"referenceFrame"`
	// The percentage of residuals accepted in the OD of the object.
	ResidualsAcc float64 `json:"residualsAcc"`
	// Epoch revolution number.
	RevNo int64 `json:"revNo"`
	// The Weighted Root Mean Squared (RMS) of the differential correction on the
	// target object that produced this vector. WRMS is a quality indicator of the
	// state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
	// Least Squares (BLS) processes.
	Rms float64 `json:"rms"`
	// Satellite/Catalog number of the target OnOrbit object.
	SatNo int64 `json:"satNo"`
	// Array containing the standard deviation of error in target object position, U, V
	// and W direction respectively (km).
	SigmaPosUvw []float64 `json:"sigmaPosUVW"`
	// Array containing the standard deviation of error in target object velocity, U, V
	// and W direction respectively (km/sec).
	SigmaVelUvw []float64 `json:"sigmaVelUVW"`
	// Average solar flux geomagnetic index.
	SolarFluxApAvg float64 `json:"solarFluxAPAvg"`
	// F10 (10.7 cm) solar flux value.
	SolarFluxF10 float64 `json:"solarFluxF10"`
	// F10 (10.7 cm) solar flux 81-day average value.
	SolarFluxF10Avg float64 `json:"solarFluxF10Avg"`
	// Boolean indicating use of solar radiation pressure perturbations for this
	// vector.
	SolarRadPress bool `json:"solarRadPress"`
	// Area-to-mass ratio coefficient for solar radiation pressure.
	SolarRadPressCoeff float64 `json:"solarRadPressCoeff"`
	// Boolean indicating use of solid earth tide perturbations for this vector.
	SolidEarthTides bool `json:"solidEarthTides"`
	// Optional array of UDL data (observation) UUIDs used to build this state vector.
	// See the associated sourcedDataTypes array for the specific types of observations
	// for the positionally corresponding UUIDs in this array (the two arrays must
	// match in size).
	SourcedData []string `json:"sourcedData"`
	// Optional array of UDL observation data types used to build this state vector
	// (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
	// UUIDs of observations for the positionally corresponding data types in this
	// array (the two arrays must match in size).
	//
	// Any of "EO", "RADAR", "RF", "DOA", "ELSET", "SV".
	SourcedDataTypes []string `json:"sourcedDataTypes"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The effective area of the object exposed to solar radiation pressure, expressed
	// in meters^2.
	SrpArea float64 `json:"srpArea"`
	// Integrator step mode (AUTO, TIME, or S).
	StepMode string `json:"stepMode"`
	// Initial integration step size (seconds).
	StepSize float64 `json:"stepSize"`
	// Initial step size selection (AUTO or MANUAL).
	StepSizeSelection string `json:"stepSizeSelection"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
	// in seconds.
	TaiUtc float64 `json:"taiUtc"`
	// Model parameter value for thrust acceleration (m/s2).
	ThrustAccel float64 `json:"thrustAccel"`
	// The number of sensor tracks available for the OD of the object.
	TracksAvail int64 `json:"tracksAvail"`
	// The number of sensor tracks accepted for the OD of the object.
	TracksUsed int64 `json:"tracksUsed"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Boolean indicating this state vector was unable to be correlated to a known
	// object. This flag should only be set to true by data providers after an attempt
	// to correlate to an OnOrbit object was made and failed. If unable to correlate,
	// the 'origObjectId' field may be populated with an internal data provider
	// specific identifier.
	Uct bool `json:"uct"`
	// Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
	Ut1Rate float64 `json:"ut1Rate"`
	// Universal Time-1 (UT1) minus UTC offset, in seconds.
	Ut1Utc float64 `json:"ut1Utc"`
	// One sigma velocity uncertainty, in kilometers/second.
	VelUnc float64 `json:"velUnc"`
	// Cartesian X acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xaccel float64 `json:"xaccel"`
	// Cartesian X position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xpos float64 `json:"xpos"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt1 float64 `json:"xposAlt1"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt2 float64 `json:"xposAlt2"`
	// Cartesian X velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xvel float64 `json:"xvel"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt1 float64 `json:"xvelAlt1"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt2 float64 `json:"xvelAlt2"`
	// Cartesian Y acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yaccel float64 `json:"yaccel"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Ypos float64 `json:"ypos"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt1 float64 `json:"yposAlt1"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt2 float64 `json:"yposAlt2"`
	// Cartesian Y velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yvel float64 `json:"yvel"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt1 float64 `json:"yvelAlt1"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt2 float64 `json:"yvelAlt2"`
	// Cartesian Z acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zaccel float64 `json:"zaccel"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zpos float64 `json:"zpos"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt1 float64 `json:"zposAlt1"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt2 float64 `json:"zposAlt2"`
	// Cartesian Z velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zvel float64 `json:"zvel"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt1 float64 `json:"zvelAlt1"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt2 float64 `json:"zvelAlt2"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Epoch                 respjson.Field
		Source                respjson.Field
		ActualOdSpan          respjson.Field
		Algorithm             respjson.Field
		Alt1ReferenceFrame    respjson.Field
		Alt2ReferenceFrame    respjson.Field
		Area                  respjson.Field
		BDot                  respjson.Field
		CmOffset              respjson.Field
		Cov                   respjson.Field
		CovMethod             respjson.Field
		CovReferenceFrame     respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Descriptor            respjson.Field
		DragArea              respjson.Field
		DragCoeff             respjson.Field
		DragModel             respjson.Field
		Edr                   respjson.Field
		EffectiveFrom         respjson.Field
		EffectiveUntil        respjson.Field
		EqCov                 respjson.Field
		ErrorControl          respjson.Field
		FixedStep             respjson.Field
		GeopotentialModel     respjson.Field
		Iau1980Terms          respjson.Field
		IDOnOrbit             respjson.Field
		IDOrbitDetermination  respjson.Field
		IDStateVector         respjson.Field
		IntegratorMode        respjson.Field
		InTrackThrust         respjson.Field
		LastObEnd             respjson.Field
		LastObStart           respjson.Field
		LeapSecondTime        respjson.Field
		LunarSolar            respjson.Field
		Mass                  respjson.Field
		ObsAvailable          respjson.Field
		ObsUsed               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		Partials              respjson.Field
		Pedigree              respjson.Field
		PolarMotionX          respjson.Field
		PolarMotionY          respjson.Field
		PosUnc                respjson.Field
		RawFileUri            respjson.Field
		RecOdSpan             respjson.Field
		ReferenceFrame        respjson.Field
		ResidualsAcc          respjson.Field
		RevNo                 respjson.Field
		Rms                   respjson.Field
		SatNo                 respjson.Field
		SigmaPosUvw           respjson.Field
		SigmaVelUvw           respjson.Field
		SolarFluxApAvg        respjson.Field
		SolarFluxF10          respjson.Field
		SolarFluxF10Avg       respjson.Field
		SolarRadPress         respjson.Field
		SolarRadPressCoeff    respjson.Field
		SolidEarthTides       respjson.Field
		SourcedData           respjson.Field
		SourcedDataTypes      respjson.Field
		SourceDl              respjson.Field
		SrpArea               respjson.Field
		StepMode              respjson.Field
		StepSize              respjson.Field
		StepSizeSelection     respjson.Field
		Tags                  respjson.Field
		TaiUtc                respjson.Field
		ThrustAccel           respjson.Field
		TracksAvail           respjson.Field
		TracksUsed            respjson.Field
		TransactionID         respjson.Field
		Uct                   respjson.Field
		Ut1Rate               respjson.Field
		Ut1Utc                respjson.Field
		VelUnc                respjson.Field
		Xaccel                respjson.Field
		Xpos                  respjson.Field
		XposAlt1              respjson.Field
		XposAlt2              respjson.Field
		Xvel                  respjson.Field
		XvelAlt1              respjson.Field
		XvelAlt2              respjson.Field
		Yaccel                respjson.Field
		Ypos                  respjson.Field
		YposAlt1              respjson.Field
		YposAlt2              respjson.Field
		Yvel                  respjson.Field
		YvelAlt1              respjson.Field
		YvelAlt2              respjson.Field
		Zaccel                respjson.Field
		Zpos                  respjson.Field
		ZposAlt1              respjson.Field
		ZposAlt2              respjson.Field
		Zvel                  respjson.Field
		ZvelAlt1              respjson.Field
		ZvelAlt2              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r ConjunctionFullStateVector2) RawJSON() string { return r.JSON.raw }
func (r *ConjunctionFullStateVector2) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// A Country may represent countries, multi-national consortiums, and international
// organizations.
type CountryFull struct {
	// The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character
	// country code, however it can represent various consortiums that do not appear in
	// the ISO document.
	Code string `json:"code,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode CountryFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// 3 Digit or other alternate country code.
	CodeAlt string `json:"codeAlt"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Federal Information Processing Standard (FIPS) two-character country code. This
	// field is used when the country code for FIPS differs from the country code for
	// ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is
	// VU, whereas Vanuatu's FIPS equivalent country code is NH.
	FipsCode string `json:"fipsCode"`
	// ISO 3166 Alpha-3 country code. This is a three-character code that represents a
	// country name, which may be more closely related to the country name than its
	// corresponding Alpha-2 code.
	Iso3Code string `json:"iso3Code"`
	// Country name.
	Name string `json:"name"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Code        respjson.Field
		DataMode    respjson.Field
		Source      respjson.Field
		CodeAlt     respjson.Field
		CreatedAt   respjson.Field
		CreatedBy   respjson.Field
		FipsCode    respjson.Field
		Iso3Code    respjson.Field
		Name        respjson.Field
		OrigNetwork respjson.Field
		UpdatedAt   respjson.Field
		UpdatedBy   respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CountryFull) RawJSON() string { return r.JSON.raw }
func (r *CountryFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type CountryFullDataMode string

const (
	CountryFullDataModeReal      CountryFullDataMode = "REAL"
	CountryFullDataModeTest      CountryFullDataMode = "TEST"
	CountryFullDataModeSimulated CountryFullDataMode = "SIMULATED"
	CountryFullDataModeExercise  CountryFullDataMode = "EXERCISE"
)

// Crew Services.
type CrewFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode CrewFullDataMode `json:"dataMode,required"`
	// Unique identifier of the formed crew provided by the originating source.
	// Provided for systems that require tracking of an internal system generated ID.
	OrigCrewID string `json:"origCrewId,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Adjusted return time, in ISO 8601 UTC format with millisecond precision.
	AdjReturnTime time.Time `json:"adjReturnTime" format:"date-time"`
	// Last name of the adjusted return time approver.
	AdjReturnTimeApprover string `json:"adjReturnTimeApprover"`
	// The aircraft Model Design Series designation assigned for this crew.
	AircraftMds string `json:"aircraftMDS"`
	// Time the crew was alerted, in ISO 8601 UTC format with millisecond precision.
	AlertedTime time.Time `json:"alertedTime" format:"date-time"`
	// Type of alert for the crew (e.g., ALPHA for maximum readiness, BRAVO for
	// standby, etc.).
	AlertType string `json:"alertType"`
	// The crew's Aviation Resource Management System (ARMS) unit. If multiple units
	// exist, use the Aircraft Commander's Unit.
	ArmsCrewUnit string `json:"armsCrewUnit"`
	// Array of qualification codes assigned to this crew (e.g., AL for Aircraft
	// Leader, CS for Combat Systems Operator, etc.).
	AssignedQualCode []string `json:"assignedQualCode"`
	// Unique identifier of the crew commander assigned by the originating source.
	CommanderID string `json:"commanderId"`
	// Last four digits of the crew commander's social security number.
	CommanderLast4Ssn string `json:"commanderLast4SSN"`
	// The name of the crew commander.
	CommanderName string `json:"commanderName"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Flag indicating whether this crew task takes the crew home and out of the stage.
	CrewHome bool `json:"crewHome"`
	// CrewMembers Collection.
	CrewMembers []CrewFullCrewMember `json:"crewMembers"`
	// Name of the formed crew.
	CrewName string `json:"crewName"`
	// The resource management system managing and reporting data on this crew.
	CrewRms string `json:"crewRMS"`
	// The crew's role on the mission (e.g., DEADHEAD, MEDICAL, PRIMARY).
	CrewRole string `json:"crewRole"`
	// The military component that comprises the crew (e.g., ACTIVE, RESERVE, GUARD,
	// MIXED, UNKNOWN, etc.).
	CrewSource string `json:"crewSource"`
	// The squadron the crew serves.
	CrewSquadron string `json:"crewSquadron"`
	// The type of crew required to meet mission objectives (e.g., AIRDROP, AIRLAND,
	// AIR REFUELING, etc.).
	CrewType string `json:"crewType"`
	// The crew's squadron as identified in its resource management system. If the crew
	// is composed of members from multiple units, then the Crew Commander's unit
	// should be indicated as the crew unit.
	CrewUnit string `json:"crewUnit"`
	// The wing the crew serves.
	CrewWing string `json:"crewWing"`
	// The International Civil Aviation Organization (ICAO) code of the airfield at
	// which the crew is currently located.
	CurrentIcao string `json:"currentICAO"`
	// Crew Flight Duty Period (FDP) eligibility type.
	FdpEligType string `json:"fdpEligType"`
	// Flight Duty Period (FDP) type.
	FdpType string `json:"fdpType"`
	// The number of female enlisted crew members.
	FemaleEnlistedQty int64 `json:"femaleEnlistedQty"`
	// The number of female officer crew members.
	FemaleOfficerQty int64 `json:"femaleOfficerQty"`
	// Authorization number used on the flight order.
	FltAuthNum string `json:"fltAuthNum"`
	// Unique identifier of the Site at which the crew is currently located. This ID
	// can be used to obtain additional information on a Site using the 'get by ID'
	// operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc
	// would be queried as /udl/site/abc.
	IDSiteCurrent string `json:"idSiteCurrent"`
	// Unique identifier of the Aircraft Sortie associated with this crew record.
	IDSortie string `json:"idSortie"`
	// Initial start time of the crew's linked task that was delinked due to mission
	// closure, in ISO 8601 UTC format with millisecond precision.
	InitStartTime time.Time `json:"initStartTime" format:"date-time"`
	// The last time the crew can be alerted, in ISO 8601 UTC format with millisecond
	// precision.
	LastAlertTime time.Time `json:"lastAlertTime" format:"date-time"`
	// Time the crew is legal for alert, in ISO 8601 UTC format with millisecond
	// precision.
	LegalAlertTime time.Time `json:"legalAlertTime" format:"date-time"`
	// Time the crew is legally authorized or scheduled to remain on standby for duty,
	// in ISO 8601 UTC format with millisecond precision.
	LegalBravoTime time.Time `json:"legalBravoTime" format:"date-time"`
	// Flag indicating whether this crew is part of a linked flying task.
	LinkedTask bool `json:"linkedTask"`
	// The number of male enlisted crew members.
	MaleEnlistedQty int64 `json:"maleEnlistedQty"`
	// The number of male officer crew members.
	MaleOfficerQty int64 `json:"maleOfficerQty"`
	// User-defined alias designation for the mission.
	MissionAlias string `json:"missionAlias"`
	// The mission ID the crew is supporting according to the source system.
	MissionID string `json:"missionId"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The type of personnel that comprises the crew (e.g., AIRCREW, MEDCREW, etc.).
	PersonnelType string `json:"personnelType"`
	// Time the crew will be picked up from lodging, in ISO 8601 UTC format with
	// millisecond precision.
	PickupTime time.Time `json:"pickupTime" format:"date-time"`
	// Flag indicating whether post-mission crew rest is applied to the last sortie of
	// a crew's task.
	PostRestApplied bool `json:"postRestApplied"`
	// End time of the crew rest period after the mission, in ISO 8601 UTC format with
	// millisecond precision.
	PostRestEnd time.Time `json:"postRestEnd" format:"date-time"`
	// The scheduled delay or adjustment in the start time of a crew's rest period
	// after a mission, expressed as +/-HH:MM.
	PostRestOffset string `json:"postRestOffset"`
	// Flag indicating whether pre-mission crew rest is applied to the first sortie of
	// a crew's task.
	PreRestApplied bool `json:"preRestApplied"`
	// Start time of the crew rest period before the mission, in ISO 8601 UTC format
	// with millisecond precision.
	PreRestStart time.Time `json:"preRestStart" format:"date-time"`
	// Array of qualification codes required for this crew (e.g., AL for Aircraft
	// Leader, CS for Combat Systems Operator, etc.).
	ReqQualCode []string `json:"reqQualCode"`
	// Scheduled return time, in ISO 8601 UTC format with millisecond precision.
	ReturnTime time.Time `json:"returnTime" format:"date-time"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The stage 1 qualifications the crew must have for a mission, such as having
	// basic knowledge of crew operations and aircraft systems.
	Stage1Qual string `json:"stage1Qual"`
	// The stage 2 qualifications the crew must have for a mission, such as completion
	// of advanced mission-specific training.
	Stage2Qual string `json:"stage2Qual"`
	// The stage 3 qualifications the crew must have for a mission, such as full
	// mission-ready certification and the capability of leading complex operations.
	Stage3Qual string `json:"stage3Qual"`
	// Stage name for the crew. A stage is a pool of crews supporting a given operation
	// plan.
	StageName string `json:"stageName"`
	// Time the crew entered the stage, in ISO 8601 UTC format with millisecond
	// precision.
	StageTime time.Time `json:"stageTime" format:"date-time"`
	// Crew status (e.g. NEEDCREW, ASSIGNED, APPROVED, NOTIFIED, PARTIAL, UNKNOWN,
	// etc.).
	Status string `json:"status"`
	// Flag indicating that one or more crew members requires transportation to the
	// departure location.
	TransportReq bool `json:"transportReq"`
	// Identifies the trip kit needed by the crew. A trip kit contains charts,
	// regulations, maps, etc. carried by the crew during missions.
	TripKit string `json:"tripKit"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		OrigCrewID            respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AdjReturnTime         respjson.Field
		AdjReturnTimeApprover respjson.Field
		AircraftMds           respjson.Field
		AlertedTime           respjson.Field
		AlertType             respjson.Field
		ArmsCrewUnit          respjson.Field
		AssignedQualCode      respjson.Field
		CommanderID           respjson.Field
		CommanderLast4Ssn     respjson.Field
		CommanderName         respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CrewHome              respjson.Field
		CrewMembers           respjson.Field
		CrewName              respjson.Field
		CrewRms               respjson.Field
		CrewRole              respjson.Field
		CrewSource            respjson.Field
		CrewSquadron          respjson.Field
		CrewType              respjson.Field
		CrewUnit              respjson.Field
		CrewWing              respjson.Field
		CurrentIcao           respjson.Field
		FdpEligType           respjson.Field
		FdpType               respjson.Field
		FemaleEnlistedQty     respjson.Field
		FemaleOfficerQty      respjson.Field
		FltAuthNum            respjson.Field
		IDSiteCurrent         respjson.Field
		IDSortie              respjson.Field
		InitStartTime         respjson.Field
		LastAlertTime         respjson.Field
		LegalAlertTime        respjson.Field
		LegalBravoTime        respjson.Field
		LinkedTask            respjson.Field
		MaleEnlistedQty       respjson.Field
		MaleOfficerQty        respjson.Field
		MissionAlias          respjson.Field
		MissionID             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PersonnelType         respjson.Field
		PickupTime            respjson.Field
		PostRestApplied       respjson.Field
		PostRestEnd           respjson.Field
		PostRestOffset        respjson.Field
		PreRestApplied        respjson.Field
		PreRestStart          respjson.Field
		ReqQualCode           respjson.Field
		ReturnTime            respjson.Field
		SourceDl              respjson.Field
		Stage1Qual            respjson.Field
		Stage2Qual            respjson.Field
		Stage3Qual            respjson.Field
		StageName             respjson.Field
		StageTime             respjson.Field
		Status                respjson.Field
		TransportReq          respjson.Field
		TripKit               respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CrewFull) RawJSON() string { return r.JSON.raw }
func (r *CrewFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type CrewFullDataMode string

const (
	CrewFullDataModeReal      CrewFullDataMode = "REAL"
	CrewFullDataModeTest      CrewFullDataMode = "TEST"
	CrewFullDataModeSimulated CrewFullDataMode = "SIMULATED"
	CrewFullDataModeExercise  CrewFullDataMode = "EXERCISE"
)

// Schema for Crew Member data.
type CrewFullCrewMember struct {
	// Flag indicating whether this crew member has been alerted of the associated
	// task.
	Alerted bool `json:"alerted"`
	// Flag indicating this crew member is assigned to all sorties of the crew
	// itinerary.
	AllSortie bool `json:"allSortie"`
	// Flag indicating whether this crew member has been approved for the associated
	// task.
	Approved bool `json:"approved"`
	// Flag indicating whether this crew member is attached to his/her squadron. Crew
	// members that are not attached are considered assigned.
	Attached bool `json:"attached"`
	// The military branch assignment of the crew member.
	Branch string `json:"branch"`
	// Flag indicating this crew member is a civilian or non-military person.
	Civilian bool `json:"civilian"`
	// Flag indicating this person is the aircraft commander.
	Commander bool `json:"commander"`
	// The crew position of the crew member.
	CrewPosition string `json:"crewPosition"`
	// The crew member's 10-digit DoD ID number.
	DodID string `json:"dodID"`
	// The duty position of the crew member.
	DutyPosition string `json:"dutyPosition"`
	// The current duty status code of this crew member (e.g., AGR for Active Guard and
	// Reserve, IDT for Inactive Duty Training, etc.).
	DutyStatus string `json:"dutyStatus"`
	// Flag indicating whether this crew member has been notified of an event by email.
	Emailed bool `json:"emailed"`
	// Flag indicating whether this crew member requires an additional amount of time
	// to report for duty.
	ExtraTime bool `json:"extraTime"`
	// The first name of the crew member.
	FirstName string `json:"firstName"`
	// The earliest flying currency expiration date for this crew member, in ISO 8601
	// UTC format with millisecond precision.
	FltCurrencyExp time.Time `json:"fltCurrencyExp" format:"date-time"`
	// The training task identifier associated with the flying currency expiration date
	// for this crew member.
	FltCurrencyExpID string `json:"fltCurrencyExpId"`
	// The date this crew member's records review was completed, in ISO 8601 UTC format
	// with millisecond precision.
	FltRecDate time.Time `json:"fltRecDate" format:"date-time"`
	// The date this crew member's records review is due, in ISO 8601 UTC format with
	// millisecond precision.
	FltRecDue time.Time `json:"fltRecDue" format:"date-time"`
	// The flying squadron assignment of the crew member.
	FlySquadron string `json:"flySquadron"`
	// Flag indicating whether this crew member is funded.
	Funded bool `json:"funded"`
	// Gender of the crew member.
	Gender string `json:"gender"`
	// The earliest ground currency expiration date for this crew member, in ISO 8601
	// UTC format with millisecond precision.
	GndCurrencyExp time.Time `json:"gndCurrencyExp" format:"date-time"`
	// The training task identifier associated with the ground currency expiration date
	// for this crew member.
	GndCurrencyExpID string `json:"gndCurrencyExpId"`
	// Flag indicating whether this crew member is grounded (i.e., his/her duties do
	// not include flying).
	Grounded bool `json:"grounded"`
	// Date when this crew member starts acting as guest help for the squadron, in ISO
	// 8601 UTC format with millisecond precision.
	GuestStart time.Time `json:"guestStart" format:"date-time"`
	// Date when this crew member stops acting as guest help for the squadron, in ISO
	// 8601 UTC format with millisecond precision.
	GuestStop time.Time `json:"guestStop" format:"date-time"`
	// Last four digits of the crew member's social security number.
	Last4Ssn string `json:"last4SSN"`
	// Date of the last flight for this crew member, in ISO 8601 UTC format with
	// millisecond precision.
	LastFltDate time.Time `json:"lastFltDate" format:"date-time"`
	// The last name of the crew member.
	LastName string `json:"lastName"`
	// The squadron the crew member has been temporarily loaned to.
	LoanedTo string `json:"loanedTo"`
	// Crew member lodging location.
	Lodging string `json:"lodging"`
	// Time this crew member was actually alerted for the mission, in ISO 8601 UTC
	// format with millisecond precision.
	MemberActualAlertTime time.Time `json:"memberActualAlertTime" format:"date-time"`
	// Adjusted return time for the crew member, in ISO 8601 UTC format with
	// millisecond precision.
	MemberAdjReturnTime time.Time `json:"memberAdjReturnTime" format:"date-time"`
	// Last name of the crew member's adjusted return time approver.
	MemberAdjReturnTimeApprover string `json:"memberAdjReturnTimeApprover"`
	// Unique identifier of the crew member assigned by the originating source.
	MemberID string `json:"memberId"`
	// Initial start time of the crew member's linked task that was delinked due to
	// mission closure, in ISO 8601 UTC format with millisecond precision.
	MemberInitStartTime time.Time `json:"memberInitStartTime" format:"date-time"`
	// The latest possible time the crew member can legally be alerted for a task, in
	// ISO 8601 UTC format with millisecond precision.
	MemberLastAlertTime time.Time `json:"memberLastAlertTime" format:"date-time"`
	// Time this crew member becomes eligible to be alerted for the mission, in ISO
	// 8601 UTC format with millisecond precision.
	MemberLegalAlertTime time.Time `json:"memberLegalAlertTime" format:"date-time"`
	// Time this crew member will be picked up from lodging, in ISO 8601 UTC format
	// with millisecond precision.
	MemberPickupTime time.Time `json:"memberPickupTime" format:"date-time"`
	// The scheduled delay or adjustment in the start time of a crew member's rest
	// period after a mission, expressed as +/-HH:MM.
	MemberPostRestOffset string `json:"memberPostRestOffset"`
	// End time of this crew member's rest period after the mission, in ISO 8601 UTC
	// format with millisecond precision.
	MemberPostRestTime time.Time `json:"memberPostRestTime" format:"date-time"`
	// Start time of this crew member's rest period before the mission, in ISO 8601 UTC
	// format with millisecond precision.
	MemberPreRestTime time.Time `json:"memberPreRestTime" format:"date-time"`
	// Remarks concerning the crew member.
	MemberRemarks string `json:"memberRemarks"`
	// Scheduled return time for this crew member, in ISO 8601 UTC format with
	// millisecond precision.
	MemberReturnTime time.Time `json:"memberReturnTime" format:"date-time"`
	// Time this crew member is scheduled to be alerted for the mission, in ISO 8601
	// UTC format with millisecond precision.
	MemberSchedAlertTime time.Time `json:"memberSchedAlertTime" format:"date-time"`
	// The military component for the crew member (e.g., ACTIVE, RESERVE, GUARD,
	// UNKNOWN, etc.).
	MemberSource string `json:"memberSource"`
	// Stage name for the crew member. A stage is a pool of crews supporting a given
	// operation plan.
	MemberStageName string `json:"memberStageName"`
	// Flag indicating whether this crew member needs transportation to the departure
	// location.
	MemberTransportReq bool `json:"memberTransportReq"`
	// Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW,
	// MEP, OTHER, etc.).
	MemberType string `json:"memberType"`
	// The middle initial of the crew member.
	MiddleInitial string `json:"middleInitial"`
	// Flag indicating whether this crew member has been notified of an event.
	Notified bool `json:"notified"`
	// Crew member lodging phone number.
	PhoneNumber string `json:"phoneNumber"`
	// Code indicating a crew member's current physical fitness status and whether they
	// are medically cleared to fly (e.g., D for Duties Not Including Flying, E for
	// Physical Overdue, etc.).
	PhysAvCode string `json:"physAvCode"`
	// Code indicating a crew member's physical availabiility status (e.g.,
	// DISQUALIFIED, OVERDUE, etc.).
	PhysAvStatus string `json:"physAvStatus"`
	// Due date for the crew member's physical, in ISO 8601 UTC format with millisecond
	// precision.
	PhysDue time.Time `json:"physDue" format:"date-time"`
	// The rank of the crew member.
	Rank string `json:"rank"`
	// Remark code used to designate attributes of this crew member. For more
	// information, contact the provider source.
	RemarkCode string `json:"remarkCode"`
	// The primary aircraft type for the crew member according to the personnel
	// resource management system indicated in the crewRMS field.
	RmsMds string `json:"rmsMDS"`
	// Time this crew member is required to report for duty before this flight/mission,
	// in ISO 8601 UTC format with millisecond precision.
	ShowTime time.Time `json:"showTime" format:"date-time"`
	// The squadron the crew member serves.
	Squadron string `json:"squadron"`
	// The date this crew member accomplished physiological or altitude chamber
	// training, in ISO 8601 UTC format with millisecond precision.
	TrainingDate time.Time `json:"trainingDate" format:"date-time"`
	// The Mattermost username of this crew member.
	Username string `json:"username"`
	// The wing the crew member serves.
	Wing string `json:"wing"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Alerted                     respjson.Field
		AllSortie                   respjson.Field
		Approved                    respjson.Field
		Attached                    respjson.Field
		Branch                      respjson.Field
		Civilian                    respjson.Field
		Commander                   respjson.Field
		CrewPosition                respjson.Field
		DodID                       respjson.Field
		DutyPosition                respjson.Field
		DutyStatus                  respjson.Field
		Emailed                     respjson.Field
		ExtraTime                   respjson.Field
		FirstName                   respjson.Field
		FltCurrencyExp              respjson.Field
		FltCurrencyExpID            respjson.Field
		FltRecDate                  respjson.Field
		FltRecDue                   respjson.Field
		FlySquadron                 respjson.Field
		Funded                      respjson.Field
		Gender                      respjson.Field
		GndCurrencyExp              respjson.Field
		GndCurrencyExpID            respjson.Field
		Grounded                    respjson.Field
		GuestStart                  respjson.Field
		GuestStop                   respjson.Field
		Last4Ssn                    respjson.Field
		LastFltDate                 respjson.Field
		LastName                    respjson.Field
		LoanedTo                    respjson.Field
		Lodging                     respjson.Field
		MemberActualAlertTime       respjson.Field
		MemberAdjReturnTime         respjson.Field
		MemberAdjReturnTimeApprover respjson.Field
		MemberID                    respjson.Field
		MemberInitStartTime         respjson.Field
		MemberLastAlertTime         respjson.Field
		MemberLegalAlertTime        respjson.Field
		MemberPickupTime            respjson.Field
		MemberPostRestOffset        respjson.Field
		MemberPostRestTime          respjson.Field
		MemberPreRestTime           respjson.Field
		MemberRemarks               respjson.Field
		MemberReturnTime            respjson.Field
		MemberSchedAlertTime        respjson.Field
		MemberSource                respjson.Field
		MemberStageName             respjson.Field
		MemberTransportReq          respjson.Field
		MemberType                  respjson.Field
		MiddleInitial               respjson.Field
		Notified                    respjson.Field
		PhoneNumber                 respjson.Field
		PhysAvCode                  respjson.Field
		PhysAvStatus                respjson.Field
		PhysDue                     respjson.Field
		Rank                        respjson.Field
		RemarkCode                  respjson.Field
		RmsMds                      respjson.Field
		ShowTime                    respjson.Field
		Squadron                    respjson.Field
		TrainingDate                respjson.Field
		Username                    respjson.Field
		Wing                        respjson.Field
		ExtraFields                 map[string]respjson.Field
		raw                         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CrewFullCrewMember) RawJSON() string { return r.JSON.raw }
func (r *CrewFullCrewMember) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection providing hours of operation and other information specific to a day
// of the week.
type DailyOperationFull struct {
	// The day of the week to which this operational information pertains.
	//
	// Any of "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY",
	// "SUNDAY".
	DayOfWeek DailyOperationFullDayOfWeek `json:"dayOfWeek"`
	// A collection containing the operational start and stop times scheduled for the
	// day of the week specified.
	OperatingHours []OperatingHoursFull `json:"operatingHours"`
	// The name or type of operation to which this information pertains.
	OperationName string `json:"operationName"`
	// The name of the person who made the most recent change to this DailyOperation
	// data.
	OphrsLastChangedBy string `json:"ophrsLastChangedBy"`
	// The datetime of the most recent change made to this DailyOperation data, in ISO
	// 8601 UTC format with millisecond precision.
	OphrsLastChangedDate time.Time `json:"ophrsLastChangedDate" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DayOfWeek            respjson.Field
		OperatingHours       respjson.Field
		OperationName        respjson.Field
		OphrsLastChangedBy   respjson.Field
		OphrsLastChangedDate respjson.Field
		ExtraFields          map[string]respjson.Field
		raw                  string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DailyOperationFull) RawJSON() string { return r.JSON.raw }
func (r *DailyOperationFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// The day of the week to which this operational information pertains.
type DailyOperationFullDayOfWeek string

const (
	DailyOperationFullDayOfWeekMonday    DailyOperationFullDayOfWeek = "MONDAY"
	DailyOperationFullDayOfWeekTuesday   DailyOperationFullDayOfWeek = "TUESDAY"
	DailyOperationFullDayOfWeekWednesday DailyOperationFullDayOfWeek = "WEDNESDAY"
	DailyOperationFullDayOfWeekThursday  DailyOperationFullDayOfWeek = "THURSDAY"
	DailyOperationFullDayOfWeekFriday    DailyOperationFullDayOfWeek = "FRIDAY"
	DailyOperationFullDayOfWeekSaturday  DailyOperationFullDayOfWeek = "SATURDAY"
	DailyOperationFullDayOfWeekSunday    DailyOperationFullDayOfWeek = "SUNDAY"
)

// A diplomatic clearance is an authorization for an aircraft to traverse or land
// within a specified country.
type DiplomaticclearanceFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode DiplomaticclearanceFullDataMode `json:"dataMode,required"`
	// The First Departure Date (FDD) the mission is scheduled for departure, in ISO
	// 8601 UTC format with millisecond precision.
	FirstDepDate time.Time `json:"firstDepDate,required" format:"date-time"`
	// Unique identifier of the Mission associated with this diplomatic clearance
	// record.
	IDMission string `json:"idMission,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system if not provided on
	// create operations.
	ID string `json:"id"`
	// The Aircraft and Personnel Automated Clearance System (APACS) system identifier
	// used to process and approve this clearance request.
	ApacsID string `json:"apacsId"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Collection of diplomatic clearance details.
	DiplomaticClearanceDetails []DiplomaticclearanceFullDiplomaticClearanceDetail `json:"diplomaticClearanceDetails"`
	// Collection of diplomatic clearance remarks.
	DiplomaticClearanceRemarks []DiplomaticclearanceFullDiplomaticClearanceRemark `json:"diplomaticClearanceRemarks"`
	// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft
	// clearance requests.
	DipWorksheetName string `json:"dipWorksheetName"`
	// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601
	// UTC format with millisecond precision.
	DocDeadline time.Time `json:"docDeadline" format:"date-time"`
	// Optional diplomatic clearance worksheet ID from external systems. This field has
	// no meaning within UDL and is provided as a convenience for systems that require
	// tracking of an internal system generated ID.
	ExternalWorksheetID string `json:"externalWorksheetId"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking      respjson.Field
		DataMode                   respjson.Field
		FirstDepDate               respjson.Field
		IDMission                  respjson.Field
		Source                     respjson.Field
		ID                         respjson.Field
		ApacsID                    respjson.Field
		CreatedAt                  respjson.Field
		CreatedBy                  respjson.Field
		DiplomaticClearanceDetails respjson.Field
		DiplomaticClearanceRemarks respjson.Field
		DipWorksheetName           respjson.Field
		DocDeadline                respjson.Field
		ExternalWorksheetID        respjson.Field
		Origin                     respjson.Field
		OrigNetwork                respjson.Field
		SourceDl                   respjson.Field
		UpdatedAt                  respjson.Field
		UpdatedBy                  respjson.Field
		ExtraFields                map[string]respjson.Field
		raw                        string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DiplomaticclearanceFull) RawJSON() string { return r.JSON.raw }
func (r *DiplomaticclearanceFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type DiplomaticclearanceFullDataMode string

const (
	DiplomaticclearanceFullDataModeReal      DiplomaticclearanceFullDataMode = "REAL"
	DiplomaticclearanceFullDataModeTest      DiplomaticclearanceFullDataMode = "TEST"
	DiplomaticclearanceFullDataModeSimulated DiplomaticclearanceFullDataMode = "SIMULATED"
	DiplomaticclearanceFullDataModeExercise  DiplomaticclearanceFullDataMode = "EXERCISE"
)

// Collection of diplomatic clearance details.
type DiplomaticclearanceFullDiplomaticClearanceDetail struct {
	// The type of action the aircraft can take with this diplomatic clearance (e.g. O
	// for Overfly, L for Land, etc.).
	Action string `json:"action"`
	// Specifies an alternate country code if the data provider code does not match a
	// UDL Country code value (ISO-3166-ALPHA-2). This field will be set to the value
	// provided by the source and should be used for all Queries specifying a Country
	// Code.
	AltCountryCode string `json:"altCountryCode"`
	// Identifier of this diplomatic clearance issued by the host country.
	ClearanceID string `json:"clearanceId"`
	// Remarks concerning this diplomatic clearance.
	ClearanceRemark string `json:"clearanceRemark"`
	// The call sign of the sortie cleared with this diplomatic clearance.
	ClearedCallSign string `json:"clearedCallSign"`
	// The DoD Standard Country Code designator for the country issuing the diplomatic
	// clearance. This field will be set to "OTHR" if the source value does not match a
	// UDL Country code value (ISO-3166-ALPHA-2).
	CountryCode string `json:"countryCode"`
	// Name of the country issuing this diplomatic clearance.
	CountryName string `json:"countryName"`
	// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with
	// millisecond precision.
	EntryNet time.Time `json:"entryNET" format:"date-time"`
	// The navigation point name where the aircraft must enter the country.
	EntryPoint string `json:"entryPoint"`
	// Latest time the aircraft may exit the country, in ISO 8601 UTC format with
	// millisecond precision.
	ExitNlt time.Time `json:"exitNLT" format:"date-time"`
	// The navigation point name where the aircraft must exit the country.
	ExitPoint string `json:"exitPoint"`
	// Optional clearance ID from external systems. This field has no meaning within
	// UDL and is provided as a convenience for systems that require tracking of an
	// internal system generated ID.
	ExternalClearanceID string `json:"externalClearanceId"`
	// Unique identifier of the Aircraft Sortie associated with this diplomatic
	// clearance record.
	IDSortie string `json:"idSortie"`
	// Identifies the Itinerary point of a sortie where an air event occurs.
	LegNum int64 `json:"legNum"`
	// The diplomatic clearance profile name used within clearance management systems.
	Profile string `json:"profile"`
	// Flag indicating whether the clearance request requires ICAO specific
	// information.
	ReqIcao bool `json:"reqICAO"`
	// Flag indicating whether entry/exit points are required for clearances.
	ReqPoint bool `json:"reqPoint"`
	// The 1801 fileable route of flight string associated with this diplomatic
	// clearance. The route of flight string contains route designators, significant
	// points, change of speed/altitude, change of flight rules, and cruise climbs.
	RouteString string `json:"routeString"`
	// The placement of this diplomatic clearance within a sequence of clearances used
	// on a sortie. For example, a sequence value of 3 means that it is the third
	// diplomatic clearance the aircraft will use.
	SequenceNum int64 `json:"sequenceNum"`
	// Indicates the current status of the diplomatic clearance request.
	Status string `json:"status"`
	// Description of when this diplomatic clearance is valid.
	ValidDesc string `json:"validDesc"`
	// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC
	// format with millisecond precision.
	ValidEndTime time.Time `json:"validEndTime" format:"date-time"`
	// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC
	// format with millisecond precision.
	ValidStartTime time.Time `json:"validStartTime" format:"date-time"`
	// Remarks concerning the valid diplomatic clearance window.
	WindowRemark string `json:"windowRemark"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Action              respjson.Field
		AltCountryCode      respjson.Field
		ClearanceID         respjson.Field
		ClearanceRemark     respjson.Field
		ClearedCallSign     respjson.Field
		CountryCode         respjson.Field
		CountryName         respjson.Field
		EntryNet            respjson.Field
		EntryPoint          respjson.Field
		ExitNlt             respjson.Field
		ExitPoint           respjson.Field
		ExternalClearanceID respjson.Field
		IDSortie            respjson.Field
		LegNum              respjson.Field
		Profile             respjson.Field
		ReqIcao             respjson.Field
		ReqPoint            respjson.Field
		RouteString         respjson.Field
		SequenceNum         respjson.Field
		Status              respjson.Field
		ValidDesc           respjson.Field
		ValidEndTime        respjson.Field
		ValidStartTime      respjson.Field
		WindowRemark        respjson.Field
		ExtraFields         map[string]respjson.Field
		raw                 string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DiplomaticclearanceFullDiplomaticClearanceDetail) RawJSON() string { return r.JSON.raw }
func (r *DiplomaticclearanceFullDiplomaticClearanceDetail) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of diplomatic clearance remarks.
type DiplomaticclearanceFullDiplomaticClearanceRemark struct {
	// Date the remark was published, in ISO 8601 UTC format, with millisecond
	// precision.
	Date time.Time `json:"date" format:"date-time"`
	// Global Decision Support System (GDSS) remark identifier.
	GdssRemarkID string `json:"gdssRemarkId"`
	// Text of the remark.
	Text string `json:"text"`
	// User who published the remark.
	User string `json:"user"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Date         respjson.Field
		GdssRemarkID respjson.Field
		Text         respjson.Field
		User         respjson.Field
		ExtraFields  map[string]respjson.Field
		raw          string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DiplomaticclearanceFullDiplomaticClearanceRemark) RawJSON() string { return r.JSON.raw }
func (r *DiplomaticclearanceFullDiplomaticClearanceRemark) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Historical drift rates for GEO Onorbit objects resulting from updates to
// OnorbitDetails driftRate values.
type DriftHistoryAbridged struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode DriftHistoryAbridgedDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// GEO drift rate, if applicable in degrees per day.
	DriftRate float64 `json:"driftRate"`
	// Time the drift rate was replaced with another value and no longer the current
	// value.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// UUID of the parent Onorbit record.
	IDOnOrbit string `json:"idOnOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedBy             respjson.Field
		DriftRate             respjson.Field
		EffectiveUntil        respjson.Field
		IDOnOrbit             respjson.Field
		Origin                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DriftHistoryAbridged) RawJSON() string { return r.JSON.raw }
func (r *DriftHistoryAbridged) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type DriftHistoryAbridgedDataMode string

const (
	DriftHistoryAbridgedDataModeReal      DriftHistoryAbridgedDataMode = "REAL"
	DriftHistoryAbridgedDataModeTest      DriftHistoryAbridgedDataMode = "TEST"
	DriftHistoryAbridgedDataModeSimulated DriftHistoryAbridgedDataMode = "SIMULATED"
	DriftHistoryAbridgedDataModeExercise  DriftHistoryAbridgedDataMode = "EXERCISE"
)

// Historical drift rates for GEO Onorbit objects resulting from updates to
// OnorbitDetails driftRate values.
type DriftHistoryFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode DriftHistoryFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// GEO drift rate, if applicable in degrees per day.
	DriftRate float64 `json:"driftRate"`
	// Time the drift rate was replaced with another value and no longer the current
	// value.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// UUID of the parent Onorbit record.
	IDOnOrbit string `json:"idOnOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedBy             respjson.Field
		DriftRate             respjson.Field
		EffectiveUntil        respjson.Field
		IDOnOrbit             respjson.Field
		Origin                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DriftHistoryFull) RawJSON() string { return r.JSON.raw }
func (r *DriftHistoryFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type DriftHistoryFullDataMode string

const (
	DriftHistoryFullDataModeReal      DriftHistoryFullDataMode = "REAL"
	DriftHistoryFullDataModeTest      DriftHistoryFullDataMode = "TEST"
	DriftHistoryFullDataModeSimulated DriftHistoryFullDataMode = "SIMULATED"
	DriftHistoryFullDataModeExercise  DriftHistoryFullDataMode = "EXERCISE"
)

// Known launch vehicle engines and their performance characteristics and limits. A
// launch vehicle has 1 to many engines per stage.
type Engine struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EngineDataMode `json:"dataMode,required"`
	// Engine name/variant.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Read-only collection of additional EngineDetails by various sources for this
	// engine, ignored on create/update. These details must be created separately via
	// the /udl/enginedetails operations.
	EngineDetails []EngineDetailsFull `json:"engineDetails"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EngineDetails         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r Engine) RawJSON() string { return r.JSON.raw }
func (r *Engine) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EngineDataMode string

const (
	EngineDataModeReal      EngineDataMode = "REAL"
	EngineDataModeTest      EngineDataMode = "TEST"
	EngineDataModeSimulated EngineDataMode = "SIMULATED"
	EngineDataModeExercise  EngineDataMode = "EXERCISE"
)

// Known launch vehicle engine details and performance characteristics and limits
// compiled by a particular source. A launch vehicle engine may have several
// details records from multiple sources.
type EngineDetailsFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EngineDetailsFullDataMode `json:"dataMode,required"`
	// Identifier of the parent engine record.
	IDEngine string `json:"idEngine,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Launch engine maximum burn time in seconds.
	BurnTime float64 `json:"burnTime"`
	// Engine chamber pressure in bars.
	ChamberPressure float64 `json:"chamberPressure"`
	// Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant,
	// etc.).
	CharacteristicType string `json:"characteristicType"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic
	// Decomposition, etc.).
	CycleType string `json:"cycleType"`
	// Engine type or family.
	Family string `json:"family"`
	// Organization ID of the engine manufacturer.
	ManufacturerOrgID string `json:"manufacturerOrgId"`
	// Engine maximum number of firings.
	MaxFirings int64 `json:"maxFirings"`
	// Notes/Description of the engine.
	Notes string `json:"notes"`
	// Engine nozzle expansion ratio.
	NozzleExpansionRatio float64 `json:"nozzleExpansionRatio"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
	Oxidizer string `json:"oxidizer"`
	// Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine,
	// etc).
	Propellant string `json:"propellant"`
	// Engine maximum thrust at sea level in Kilo-Newtons.
	SeaLevelThrust float64 `json:"seaLevelThrust"`
	// Launch engine specific impulse in seconds.
	SpecificImpulse float64 `json:"specificImpulse"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Engine maximum thrust in a vacuum in Kilo-Newtons.
	VacuumThrust float64 `json:"vacuumThrust"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDEngine              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		BurnTime              respjson.Field
		ChamberPressure       respjson.Field
		CharacteristicType    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CycleType             respjson.Field
		Family                respjson.Field
		ManufacturerOrgID     respjson.Field
		MaxFirings            respjson.Field
		Notes                 respjson.Field
		NozzleExpansionRatio  respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Oxidizer              respjson.Field
		Propellant            respjson.Field
		SeaLevelThrust        respjson.Field
		SpecificImpulse       respjson.Field
		Tags                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		VacuumThrust          respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EngineDetailsFull) RawJSON() string { return r.JSON.raw }
func (r *EngineDetailsFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EngineDetailsFullDataMode string

const (
	EngineDetailsFullDataModeReal      EngineDetailsFullDataMode = "REAL"
	EngineDetailsFullDataModeTest      EngineDetailsFullDataMode = "TEST"
	EngineDetailsFullDataModeSimulated EngineDetailsFullDataMode = "SIMULATED"
	EngineDetailsFullDataModeExercise  EngineDetailsFullDataMode = "EXERCISE"
)

// An entity is a generic representation of any object within a space/SSA system
// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
// entity can have an operating unit, a location (if terrestrial), and statuses.
type EntityFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EntityFullDataMode `json:"dataMode,required"`
	// Unique entity name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
	// LASEREMITTER, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
	//
	// Any of "AIRCRAFT", "BUS", "COMM", "IR", "LASEREMITTER", "NAVIGATION", "ONORBIT",
	// "RFEMITTER", "SCIENTIFIC", "SENSOR", "SITE", "VESSEL".
	Type EntityFullType `json:"type,required"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the record.
	IDEntity string `json:"idEntity"`
	// Unique identifier of the entity location, if terrestrial/fixed.
	IDLocation string `json:"idLocation"`
	// Onorbit identifier if this entity is part of an on-orbit object. For the public
	// catalog, the idOnOrbit is typically the satellite number as a string, but may be
	// a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the associated operating unit object.
	IDOperatingUnit string `json:"idOperatingUnit"`
	// Model representation of a location, which is a specific fixed point on the earth
	// and is used to denote the locations of fixed sensors, operating units, etc.
	Location LocationFull `json:"location"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit EntityFullOnOrbit `json:"onOrbit"`
	// Model representation of a unit or organization which operates or controls a
	// space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
	// belong to an organization.
	OperatingUnit OperatingunitFull `json:"operatingUnit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Type of organization which owns this entity (e.g. Commercial, Government,
	// Academic, Consortium, etc).
	//
	// Any of "Commercial", "Government", "Academic", "Consortium", "Other".
	OwnerType EntityFullOwnerType `json:"ownerType"`
	// Read-only collection of RF bands utilized by this entity for communication
	// and/or operation.
	RfBands []RfBandFull `json:"rfBands"`
	// Read-only collection of statuses which can be collected by multiple sources.
	StatusCollection []StatusFull `json:"statusCollection"`
	// Boolean indicating if this entity is taskable.
	Taskable bool `json:"taskable"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// List of URLs to additional details/documents for this entity.
	URLs []string `json:"urls"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		Type                  respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		IDEntity              respjson.Field
		IDLocation            respjson.Field
		IDOnOrbit             respjson.Field
		IDOperatingUnit       respjson.Field
		Location              respjson.Field
		OnOrbit               respjson.Field
		OperatingUnit         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OwnerType             respjson.Field
		RfBands               respjson.Field
		StatusCollection      respjson.Field
		Taskable              respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		URLs                  respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EntityFull) RawJSON() string { return r.JSON.raw }
func (r *EntityFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EntityFullDataMode string

const (
	EntityFullDataModeReal      EntityFullDataMode = "REAL"
	EntityFullDataModeTest      EntityFullDataMode = "TEST"
	EntityFullDataModeSimulated EntityFullDataMode = "SIMULATED"
	EntityFullDataModeExercise  EntityFullDataMode = "EXERCISE"
)

// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
// LASEREMITTER, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
type EntityFullType string

const (
	EntityFullTypeAircraft     EntityFullType = "AIRCRAFT"
	EntityFullTypeBus          EntityFullType = "BUS"
	EntityFullTypeComm         EntityFullType = "COMM"
	EntityFullTypeIr           EntityFullType = "IR"
	EntityFullTypeLaseremitter EntityFullType = "LASEREMITTER"
	EntityFullTypeNavigation   EntityFullType = "NAVIGATION"
	EntityFullTypeOnorbit      EntityFullType = "ONORBIT"
	EntityFullTypeRfemitter    EntityFullType = "RFEMITTER"
	EntityFullTypeScientific   EntityFullType = "SCIENTIFIC"
	EntityFullTypeSensor       EntityFullType = "SENSOR"
	EntityFullTypeSite         EntityFullType = "SITE"
	EntityFullTypeVessel       EntityFullType = "VESSEL"
)

// Model object representing on-orbit objects or satellites in the system.
type EntityFullOnOrbit struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Satellite/Catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Alternate name of the on-orbit object.
	AltName string `json:"altName"`
	// Read-only collection of antennas on this on-orbit object.
	Antennas []OnorbitAntennaFull `json:"antennas"`
	// Read-only collection of batteries on this on-orbit object.
	Batteries []OnorbitBatteryFull `json:"batteries"`
	// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
	// State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
	// Heliocentric, Interplanetary, Lagrangian, Docked).
	//
	// Any of "Unknown", "On-Orbit", "Decayed", "Cataloged Without State", "Launch
	// Nominal", "Analyst Satellite", "Cislunar", "Lunar", "Hyperbolic",
	// "Heliocentric", "Interplanetary", "Lagrangian", "Docked".
	Category string `json:"category"`
	// Common name of the on-orbit object.
	CommonName string `json:"commonName"`
	// Constellation to which this satellite belongs.
	Constellation string `json:"constellation"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Date of decay.
	DecayDate time.Time `json:"decayDate" format:"date-time"`
	// For the public catalog, the idOnOrbit is typically the satellite number as a
	// string, but may be a UUID for analyst or other unknown or untracked satellites,
	// auto-generated by the system.
	IDOnOrbit string `json:"idOnOrbit"`
	// International Designator, typically of the format YYYYLLLAAA, where YYYY is the
	// launch year, LLL is the sequential launch number of that year, and AAA is an
	// optional launch piece designator for the launch.
	IntlDes string `json:"intlDes"`
	// Date of launch.
	LaunchDate time.Time `json:"launchDate" format:"date"`
	// Id of the associated launchSite entity.
	LaunchSiteID string `json:"launchSiteId"`
	// Estimated lifetime of the on-orbit payload, if known.
	LifetimeYears int64 `json:"lifetimeYears"`
	// Mission number of the on-orbit object.
	MissionNumber string `json:"missionNumber"`
	// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
	// UNKNOWN.
	//
	// Any of "ROCKET BODY", "DEBRIS", "PAYLOAD", "PLATFORM", "MANNED", "UNKNOWN".
	ObjectType string `json:"objectType"`
	// Read-only collection of details for this on-orbit object.
	OnorbitDetails []OnorbitDetailsFull `json:"onorbitDetails"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Read-only collection of solar arrays on this on-orbit object.
	SolarArrays []OnorbitSolarArrayFull `json:"solarArrays"`
	// Read-only collection of thrusters (engines) on this on-orbit object.
	Thrusters []OnorbitThrusterFull `json:"thrusters"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		SatNo                 respjson.Field
		Source                respjson.Field
		AltName               respjson.Field
		Antennas              respjson.Field
		Batteries             respjson.Field
		Category              respjson.Field
		CommonName            respjson.Field
		Constellation         respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DecayDate             respjson.Field
		IDOnOrbit             respjson.Field
		IntlDes               respjson.Field
		LaunchDate            respjson.Field
		LaunchSiteID          respjson.Field
		LifetimeYears         respjson.Field
		MissionNumber         respjson.Field
		ObjectType            respjson.Field
		OnorbitDetails        respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		SolarArrays           respjson.Field
		Thrusters             respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EntityFullOnOrbit) RawJSON() string { return r.JSON.raw }
func (r *EntityFullOnOrbit) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Type of organization which owns this entity (e.g. Commercial, Government,
// Academic, Consortium, etc).
type EntityFullOwnerType string

const (
	EntityFullOwnerTypeCommercial EntityFullOwnerType = "Commercial"
	EntityFullOwnerTypeGovernment EntityFullOwnerType = "Government"
	EntityFullOwnerTypeAcademic   EntityFullOwnerType = "Academic"
	EntityFullOwnerTypeConsortium EntityFullOwnerType = "Consortium"
	EntityFullOwnerTypeOther      EntityFullOwnerType = "Other"
)

// Model representation of observation data for electro-optical based sensor
// phenomenologies. ECI J2K is the preferred reference frame for EOObservations,
// however, several user-specified reference frames are accommodated. Users should
// check the EOObservation record as well as the 'Discover' tab in the storefront
// to confirm the coordinate frames used by the data provider.
type EoObservationFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EoObservationFullDataMode `json:"dataMode,required"`
	// Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should
	// contact the provider for details on their obTime specifications.
	ObTime time.Time `json:"obTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Line of sight azimuth angle in degrees and topocentric frame. Reported value
	// should include all applicable corrections as specified on the source provider
	// data card. If uncertain, consumers should contact the provider for details on
	// the applied corrections.
	Azimuth float64 `json:"azimuth"`
	// Sensor line of sight azimuth angle bias in degrees.
	AzimuthBias float64 `json:"azimuthBias"`
	// Optional flag indicating whether the azimuth value is measured (true) or
	// computed (false). If null, consumers may consult the data provider for
	// information regarding whether the corresponding value is computed or measured.
	AzimuthMeasured bool `json:"azimuthMeasured"`
	// Rate of change of the line of sight azimuth in degrees per second.
	AzimuthRate float64 `json:"azimuthRate"`
	// One sigma uncertainty in the line of sight azimuth angle, in degrees.
	AzimuthUnc float64 `json:"azimuthUnc"`
	// Background intensity for IR observations, in kw/sr/um.
	BgIntensity float64 `json:"bgIntensity"`
	// Method indicating telescope movement during collection (AUTOTRACK, MANUAL
	// AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
	CollectMethod string `json:"collectMethod"`
	// Object Correlation Quality score of the observation when compared to a known
	// orbit state, (non-standardized). Users should consult data providers regarding
	// the expected range of values.
	CorrQuality float64 `json:"corrQuality"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Line of sight declination, in degrees, in the specified referenceFrame. If
	// referenceFrame is null then J2K should be assumed. Reported value should include
	// all applicable corrections as specified on the source provider data card. If
	// uncertain, consumers should contact the provider for details on the applied
	// corrections.
	Declination float64 `json:"declination"`
	// Sensor line of sight declination angle bias in degrees.
	DeclinationBias float64 `json:"declinationBias"`
	// Optional flag indicating whether the declination value is measured (true) or
	// computed (false). If null, consumers may consult the data provider for
	// information regarding whether the corresponding value is computed or measured.
	DeclinationMeasured bool `json:"declinationMeasured"`
	// Line of sight declination rate of change, in degrees/sec, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	DeclinationRate float64 `json:"declinationRate"`
	// One sigma uncertainty in the line of sight declination angle, in degrees.
	DeclinationUnc float64 `json:"declinationUnc"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// Line of sight elevation in degrees and topocentric frame. Reported value should
	// include all applicable corrections as specified on the source provider data
	// card. If uncertain, consumers should contact the provider for details on the
	// applied corrections.
	Elevation float64 `json:"elevation"`
	// Sensor line of sight elevation bias in degrees.
	ElevationBias float64 `json:"elevationBias"`
	// Optional flag indicating whether the elevation value is measured (true) or
	// computed (false). If null, consumers may consult the data provider for
	// information regarding whether the corresponding value is computed or measured.
	ElevationMeasured bool `json:"elevationMeasured"`
	// Rate of change of the line of sight elevation in degrees per second.
	ElevationRate float64 `json:"elevationRate"`
	// One sigma uncertainty in the line of sight elevation angle, in degrees.
	ElevationUnc float64 `json:"elevationUnc"`
	// Model representation of additional detailed observation data for electro-optical
	// based sensor phenomenologies.
	EoobservationDetails EoObservationFullEoobservationDetails `json:"eoobservationDetails"`
	// Image exposure duration in seconds. For observations performed using frame
	// stacking or synthetic tracking methods, the exposure duration should be the
	// total integration time. This field is highly recommended / required if the
	// observations are going to be used for photometric processing.
	ExpDuration float64 `json:"expDuration"`
	// The number of RSOs detected in the sensor field of view.
	FovCount int64 `json:"fovCount"`
	// The number of uncorrelated tracks in the field of view.
	FovCountUct int64 `json:"fovCountUCT"`
	// For GEO detections, the altitude in km.
	Geoalt float64 `json:"geoalt"`
	// For GEO detections, the latitude in degrees north.
	Geolat float64 `json:"geolat"`
	// For GEO detections, the longitude in degrees east.
	Geolon float64 `json:"geolon"`
	// For GEO detections, the range in km.
	Georange float64 `json:"georange"`
	// Unique identifier of the target on-orbit object, if correlated.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the reporting sensor.
	IDSensor string `json:"idSensor"`
	// Unique identifier of the Sky Imagery.
	IDSkyImagery string `json:"idSkyImagery"`
	// Intensity of the target for IR observations, in kw/sr/um.
	Intensity float64 `json:"intensity"`
	// One sigma uncertainty in the line of sight pointing in micro-radians.
	LosUnc float64 `json:"losUnc"`
	// Line-of-sight cartesian X position of the target, in km, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Losx float64 `json:"losx"`
	// Line-of-sight cartesian X velocity of target, in km/sec, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Losxvel float64 `json:"losxvel"`
	// Line-of-sight cartesian Y position of the target, in km, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Losy float64 `json:"losy"`
	// Line-of-sight cartesian Y velocity of target, in km/sec, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Losyvel float64 `json:"losyvel"`
	// Line-of-sight cartesian Z position of the target, in km, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Losz float64 `json:"losz"`
	// Line-of-sight cartesian Z velocity of target, in km/sec, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Loszvel float64 `json:"loszvel"`
	// Measure of observed brightness calibrated against the Gaia G-band in units of
	// magnitudes.
	Mag float64 `json:"mag"`
	// Formula: mag - 5.0 \* log_10(geo_range / 1000000.0).
	MagNormRange float64 `json:"magNormRange"`
	// Uncertainty of the observed brightness in units of magnitudes.
	MagUnc float64 `json:"magUnc"`
	// Net object signature = counts / expDuration.
	NetObjSig float64 `json:"netObjSig"`
	// Net object signature uncertainty = counts uncertainty / expDuration.
	NetObjSigUnc float64 `json:"netObjSigUnc"`
	// The position of this observation within a track (FENCE, FIRST, IN, LAST,
	// SINGLE). This identifier is optional and, if null, no assumption should be made
	// regarding whether other observations may or may not exist to compose a track.
	ObPosition string `json:"obPosition"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by observation source to indicate the target
	// onorbit object of this observation. This may be an internal identifier and not
	// necessarily a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Optional identifier provided by observation source to indicate the sensor
	// identifier which produced this observation. This may be an internal identifier
	// and not necessarily a valid sensor ID.
	OrigSensorID string `json:"origSensorId"`
	// Boolean indicating that the target object was in a penumbral eclipse at the time
	// of this observation.
	Penumbra bool `json:"penumbra"`
	// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the
	// coefficient applied to the airmass to determine how much the observed visual
	// magnitude has been attenuated by the atmosphere. Extinction, in general,
	// describes the absorption and scattering of electromagnetic radiation by dust and
	// gas between an emitting astronomical object and the observer. See the
	// EOObservationDetails API for specification of extinction coefficients for
	// multiple spectral filters.
	PrimaryExtinction float64 `json:"primaryExtinction"`
	// Primary Extinction Coefficient Uncertainty, in Magnitudes.
	PrimaryExtinctionUnc float64 `json:"primaryExtinctionUnc"`
	// Line of sight right ascension, in degrees, in the specified referenceFrame. If
	// referenceFrame is null then J2K should be assumed. Reported value should include
	// all applicable corrections as specified on the source provider data card. If
	// uncertain, consumers should contact the provider for details on the applied
	// corrections.
	Ra float64 `json:"ra"`
	// Sensor line of sight right ascension bias in degrees.
	RaBias float64 `json:"raBias"`
	// Optional flag indicating whether the ra value is measured (true) or computed
	// (false). If null, consumers may consult the data provider for information
	// regarding whether the corresponding value is computed or measured.
	RaMeasured bool `json:"raMeasured"`
	// Line of sight range in km. If referenceFrame is null then J2K should be assumed.
	// Reported value should include all applicable corrections as specified on the
	// source provider data card. If uncertain, consumers should contact the provider
	// for details on the applied corrections.
	Range float64 `json:"range"`
	// Sensor line of sight range bias in km.
	RangeBias float64 `json:"rangeBias"`
	// Optional flag indicating whether the range value is measured (true) or computed
	// (false). If null, consumers may consult the data provider for information
	// regarding whether the corresponding value is computed or measured.
	RangeMeasured bool `json:"rangeMeasured"`
	// Range rate in km/s. If referenceFrame is null then J2K should be assumed.
	// Reported value should include all applicable corrections as specified on the
	// source provider data card. If uncertain, consumers should contact the provider
	// for details on the applied corrections.
	RangeRate float64 `json:"rangeRate"`
	// Optional flag indicating whether the rangeRate value is measured (true) or
	// computed (false). If null, consumers may consult the data provider for
	// information regarding whether the corresponding value is computed or measured.
	RangeRateMeasured bool `json:"rangeRateMeasured"`
	// One sigma uncertainty in the line of sight range rate, in kilometers/second.
	RangeRateUnc float64 `json:"rangeRateUnc"`
	// One sigma uncertainty in the line of sight range, in kilometers.
	RangeUnc float64 `json:"rangeUnc"`
	// Line of sight right ascension rate of change, in degrees/sec, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	RaRate float64 `json:"raRate"`
	// One sigma uncertainty in the line of sight right ascension angle, in degrees.
	RaUnc float64 `json:"raUnc"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The reference frame of the EOObservation measurements. If the referenceFrame is
	// null it is assumed to be J2000.
	//
	// Any of "J2000", "GCRF", "ITRF", "TEME".
	ReferenceFrame EoObservationFullReferenceFrame `json:"referenceFrame"`
	// Satellite/Catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo"`
	// Sensor altitude at obTime (if mobile/onorbit) in km.
	Senalt float64 `json:"senalt"`
	// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be
	// obtained from sensor info. -90 to 90 degrees (negative values south of equator).
	Senlat float64 `json:"senlat"`
	// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be
	// obtained from sensor info. -180 to 180 degrees (negative values west of Prime
	// Meridian).
	Senlon float64 `json:"senlon"`
	// The quaternion describing the rotation of the sensor in relation to the
	// body-fixed frame used for this system into the local geodetic frame, at
	// observation time (obTime). The array element order convention is scalar
	// component first, followed by the three vector components (qc, q1, q2, q3).
	SenQuat []float64 `json:"senQuat"`
	// The reference frame of the observing sensor state. If the senReferenceFrame is
	// null it is assumed to be J2000.
	//
	// Any of "J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF".
	SenReferenceFrame EoObservationFullSenReferenceFrame `json:"senReferenceFrame"`
	// Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in
	// km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
	// J2K should be assumed.
	Senvelx float64 `json:"senvelx"`
	// Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in
	// km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
	// J2K should be assumed.
	Senvely float64 `json:"senvely"`
	// Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in
	// km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
	// J2K should be assumed.
	Senvelz float64 `json:"senvelz"`
	// Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in
	// the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
	// assumed.
	Senx float64 `json:"senx"`
	// Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in
	// the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
	// assumed.
	Seny float64 `json:"seny"`
	// Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in
	// the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
	// assumed.
	Senz float64 `json:"senz"`
	// Shutter delay in seconds.
	ShutterDelay float64 `json:"shutterDelay"`
	// Average Sky Background signal, in Magnitudes. Sky Background refers to the
	// incoming light from an apparently empty part of the night sky.
	SkyBkgrnd float64 `json:"skyBkgrnd"`
	// Angle from the sun to the equatorial plane.
	SolarDecAngle float64 `json:"solarDecAngle"`
	// The angle, in degrees, between the projections of the target-to-observer vector
	// and the target-to-sun vector onto the equatorial plane. The angle is represented
	// as negative when closing (i.e. before the opposition) and positive when opening
	// (after the opposition).
	SolarEqPhaseAngle float64 `json:"solarEqPhaseAngle"`
	// The angle, in degrees, between the target-to-observer vector and the
	// target-to-sun vector.
	SolarPhaseAngle float64 `json:"solarPhaseAngle"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional identifier to indicate the specific tasking which produced this
	// observation.
	TaskID string `json:"taskId"`
	// Sensor timing bias in seconds.
	TimingBias float64 `json:"timingBias"`
	// Optional identifier of the track to which this observation belongs.
	TrackID string `json:"trackId"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR,
	// LASER_RANGING, etc).
	Type string `json:"type"`
	// Boolean indicating this observation is part of an uncorrelated track or was
	// unable to be correlated to a known object. This flag should only be set to true
	// by data providers after an attempt to correlate to an on-orbit object was made
	// and failed. If unable to correlate, the 'origObjectId' field may be populated
	// with an internal data provider specific identifier.
	Uct bool `json:"uct"`
	// Boolean indicating that the target object was in umbral eclipse at the time of
	// this observation.
	Umbra bool `json:"umbra"`
	// Formula: 2.5 \* log_10 (zero_mag_counts / expDuration).
	Zeroptd float64 `json:"zeroptd"`
	// This is the uncertainty in the zero point for the filter used for this
	// observation/row in units of mag. For use with differential photometry.
	ZeroPtdUnc float64 `json:"zeroPtdUnc"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		ObTime                respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Azimuth               respjson.Field
		AzimuthBias           respjson.Field
		AzimuthMeasured       respjson.Field
		AzimuthRate           respjson.Field
		AzimuthUnc            respjson.Field
		BgIntensity           respjson.Field
		CollectMethod         respjson.Field
		CorrQuality           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Declination           respjson.Field
		DeclinationBias       respjson.Field
		DeclinationMeasured   respjson.Field
		DeclinationRate       respjson.Field
		DeclinationUnc        respjson.Field
		Descriptor            respjson.Field
		Elevation             respjson.Field
		ElevationBias         respjson.Field
		ElevationMeasured     respjson.Field
		ElevationRate         respjson.Field
		ElevationUnc          respjson.Field
		EoobservationDetails  respjson.Field
		ExpDuration           respjson.Field
		FovCount              respjson.Field
		FovCountUct           respjson.Field
		Geoalt                respjson.Field
		Geolat                respjson.Field
		Geolon                respjson.Field
		Georange              respjson.Field
		IDOnOrbit             respjson.Field
		IDSensor              respjson.Field
		IDSkyImagery          respjson.Field
		Intensity             respjson.Field
		LosUnc                respjson.Field
		Losx                  respjson.Field
		Losxvel               respjson.Field
		Losy                  respjson.Field
		Losyvel               respjson.Field
		Losz                  respjson.Field
		Loszvel               respjson.Field
		Mag                   respjson.Field
		MagNormRange          respjson.Field
		MagUnc                respjson.Field
		NetObjSig             respjson.Field
		NetObjSigUnc          respjson.Field
		ObPosition            respjson.Field
		OnOrbit               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		OrigSensorID          respjson.Field
		Penumbra              respjson.Field
		PrimaryExtinction     respjson.Field
		PrimaryExtinctionUnc  respjson.Field
		Ra                    respjson.Field
		RaBias                respjson.Field
		RaMeasured            respjson.Field
		Range                 respjson.Field
		RangeBias             respjson.Field
		RangeMeasured         respjson.Field
		RangeRate             respjson.Field
		RangeRateMeasured     respjson.Field
		RangeRateUnc          respjson.Field
		RangeUnc              respjson.Field
		RaRate                respjson.Field
		RaUnc                 respjson.Field
		RawFileUri            respjson.Field
		ReferenceFrame        respjson.Field
		SatNo                 respjson.Field
		Senalt                respjson.Field
		Senlat                respjson.Field
		Senlon                respjson.Field
		SenQuat               respjson.Field
		SenReferenceFrame     respjson.Field
		Senvelx               respjson.Field
		Senvely               respjson.Field
		Senvelz               respjson.Field
		Senx                  respjson.Field
		Seny                  respjson.Field
		Senz                  respjson.Field
		ShutterDelay          respjson.Field
		SkyBkgrnd             respjson.Field
		SolarDecAngle         respjson.Field
		SolarEqPhaseAngle     respjson.Field
		SolarPhaseAngle       respjson.Field
		SourceDl              respjson.Field
		Tags                  respjson.Field
		TaskID                respjson.Field
		TimingBias            respjson.Field
		TrackID               respjson.Field
		TransactionID         respjson.Field
		Type                  respjson.Field
		Uct                   respjson.Field
		Umbra                 respjson.Field
		Zeroptd               respjson.Field
		ZeroPtdUnc            respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EoObservationFull) RawJSON() string { return r.JSON.raw }
func (r *EoObservationFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EoObservationFullDataMode string

const (
	EoObservationFullDataModeReal      EoObservationFullDataMode = "REAL"
	EoObservationFullDataModeTest      EoObservationFullDataMode = "TEST"
	EoObservationFullDataModeSimulated EoObservationFullDataMode = "SIMULATED"
	EoObservationFullDataModeExercise  EoObservationFullDataMode = "EXERCISE"
)

// Model representation of additional detailed observation data for electro-optical
// based sensor phenomenologies.
type EoObservationFullEoobservationDetails struct {
	// World Coordinate System (WCS) X pixel origin in astrometric fit.
	AcalCrPixX float64 `json:"acalCrPixX"`
	// World Coordinate System (WCS) Y pixel origin in astrometric fit.
	AcalCrPixY float64 `json:"acalCrPixY"`
	// World Coordinate System (WCS) equatorial coordinate X origin corresponding to
	// CRPIX in astrometric fit in degrees.
	AcalCrValX float64 `json:"acalCrValX"`
	// World Coordinate System (WCS) equatorial coordinate Y origin corresponding to
	// CRPIX in astrometric fit in degrees.
	AcalCrValY float64 `json:"acalCrValY"`
	// Number of stars used in astrometric fit.
	AcalNumStars int64 `json:"acalNumStars"`
	// This is the background signal at or in the vicinity of the radiometric source
	// position. Specifically, this is the average background count level (DN/pixel)
	// divided by the exposure time in seconds of the background pixels used in the
	// photometric extraction. DN/pixel/sec.
	BackgroundSignal float64 `json:"backgroundSignal"`
	// Estimated 1-sigma uncertainty in the background signal at or in the vicinity of
	// the radiometric source position. DN/pixel/sec.
	BackgroundSignalUnc float64 `json:"backgroundSignalUnc"`
	// The number of pixels binned horizontally.
	BinningHoriz int64 `json:"binningHoriz"`
	// The number of pixels binned vertically.
	BinningVert int64 `json:"binningVert"`
	// The x centroid position on the CCD of the target object in pixels.
	CcdObjPosX float64 `json:"ccdObjPosX"`
	// The y centroid position on the CCD of the target object in pixels.
	CcdObjPosY float64 `json:"ccdObjPosY"`
	// This is the pixel width of the target. This is either a frame-by-frame
	// measurement or a constant point spread function or synthetic aperture used in
	// the extraction.
	CcdObjWidth float64 `json:"ccdObjWidth"`
	// Operating temperature of CCD recorded during exposure or measured during
	// calibrations in K.
	CcdTemp float64 `json:"ccdTemp"`
	// Observed centroid column number on the focal plane in pixels (0 is left edge,
	// 0.5 is center of pixels along left of image).
	CentroidColumn float64 `json:"centroidColumn"`
	// Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is
	// center of pixels along top of image).
	CentroidRow float64 `json:"centroidRow"`
	// Classification marking of the data in IC/CAPCO Portion-marked format, will be
	// set to EOObservation classificationMarking if blank.
	ClassificationMarking string `json:"classificationMarking"`
	// Color coefficient for filter n for a space-based sensor where there is no
	// atmospheric extinction. Must be present for all values n=1 to
	// numSpectralFilters, in incrementing order of n, and for no other values of n.
	ColorCoeffs []float64 `json:"colorCoeffs"`
	// Spatial variance of image distribution in horizontal direction measured in
	// pixels squared.
	ColumnVariance float64 `json:"columnVariance"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The reference number n, in neutralDensityFilters for the currently used neutral
	// density filter.
	CurrentNeutralDensityFilterNum int64 `json:"currentNeutralDensityFilterNum"`
	// The reference number, x, where x ranges from 1 to n, where n is the number
	// specified in spectralFilters that corresponds to the spectral filter given in
	// the corresponding spectralFilterNames.
	CurrentSpectralFilterNum int64 `json:"currentSpectralFilterNum"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// , will be set to EOObservation dataMode if blank.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode"`
	// Covariance (Y^2) in measured declination (Y) in deg^2.
	DeclinationCov float64 `json:"declinationCov"`
	// An array of measurements that correspond to the distance from the streak center
	// measured from the optical image in pixels that show change over an interval of
	// time. The array length is dependent on the length of the streak. The
	// distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in
	// size.
	DistFromStreakCenter []float64 `json:"distFromStreakCenter"`
	// Angle off element set reported in degrees.
	Does float64 `json:"does"`
	// The extinction coefficient computed for the nth filter. Must be present for all
	// values n=1 to numSpectralFilters, in incrementing order of n, and for no other
	// values of n. Units = mag/airmass.
	ExtinctionCoeffs []float64 `json:"extinctionCoeffs"`
	// This is the uncertainty in the extinction coefficient for the nth filter. Must
	// be present for all values n=1 to numSpectralFilters, in incrementing order of n,
	// and for no other values of n. -9999 for space-based sensors. Units =
	// mag/airmass.
	ExtinctionCoeffsUnc []float64 `json:"extinctionCoeffsUnc"`
	// Some sensors have gain settings. This value is the gain used during the
	// observation in units e-/ADU. If no gain is used, the value = 1.
	Gain float64 `json:"gain"`
	// Unique identifier of the parent EOObservation.
	IDEoObservation string `json:"idEOObservation"`
	// Sensor instantaneous field of view (ratio of pixel pitch to focal length).
	Ifov float64 `json:"ifov"`
	// Instrumental magnitude of a sensor before corrections are applied for atmosphere
	// or to transform to standard magnitude scale.
	MagInstrumental float64 `json:"magInstrumental"`
	// Uncertainty in the instrumental magnitude.
	MagInstrumentalUnc float64 `json:"magInstrumentalUnc"`
	// Must be present for all values n=1 to numNeutralDensityFilters, in incrementing
	// order of n, and for no other values of n.
	NeutralDensityFilterNames []string `json:"neutralDensityFilterNames"`
	// The transmission of the nth neutral density filter. Must be present for all
	// values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no
	// other values of n.
	NeutralDensityFilterTransmissions []float64 `json:"neutralDensityFilterTransmissions"`
	// This is the uncertainty in the transmission for the nth filter. Must be present
	// for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and
	// for no other values of n.
	NeutralDensityFilterTransmissionsUnc []float64 `json:"neutralDensityFilterTransmissionsUnc"`
	// Number of catalog stars in the detector field of view (FOV) with the target
	// object. Can be 0 for narrow FOV sensors.
	NumCatalogStars int64 `json:"numCatalogStars"`
	// Number of correlated stars in the FOV with the target object. Can be 0 for
	// narrow FOV sensors.
	NumCorrelatedStars int64 `json:"numCorrelatedStars"`
	// Number of detected stars in the FOV with the target object. Helps identify
	// frames with clouds.
	NumDetectedStars int64 `json:"numDetectedStars"`
	// The value is the number of neutral density filters used.
	NumNeutralDensityFilters int64 `json:"numNeutralDensityFilters"`
	// The value is the number of spectral filters used.
	NumSpectralFilters int64 `json:"numSpectralFilters"`
	// Distance from the target object to the sun during the observation in meters.
	ObjSunRange float64 `json:"objSunRange"`
	// Ob detection time in ISO 8601 UTC with microsecond precision, will be set to
	// EOObservation obTime if blank.
	ObTime time.Time `json:"obTime" format:"date-time"`
	// Optical Cross Section computed in units m(2)/ster.
	OpticalCrossSection float64 `json:"opticalCrossSection"`
	// Uncertainty in Optical Cross Section computed in units m(2)/ster.
	OpticalCrossSectionUnc float64 `json:"opticalCrossSectionUnc"`
	// Number of stars used in photometric fit count.
	PcalNumStars int64 `json:"pcalNumStars"`
	// Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic
	// aperture containing the target signal.
	PeakApertureCount float64 `json:"peakApertureCount"`
	// Peak Background Raw Counts is the largest pixel value used in background signal.
	PeakBackgroundCount int64 `json:"peakBackgroundCount"`
	// Solar phase angle bisector vector. The vector that bisects the solar phase
	// angle. The phase angle bisector is the angle that is << of the value in #48.
	// Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at
	// this angle would intersect.
	PhaseAngBisect float64 `json:"phaseAngBisect"`
	// Pixel array size (height) in pixels.
	PixelArrayHeight int64 `json:"pixelArrayHeight"`
	// Pixel array size (width) in pixels.
	PixelArrayWidth int64 `json:"pixelArrayWidth"`
	// Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For
	// example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8
	// = 256. This can represent the saturation value of the detector, but some sensors
	// will saturate at a value significantly lower than full well depth. This is the
	// analog-to-digital conversion (ADC) saturation value.
	PixelMax int64 `json:"pixelMax"`
	// Minimum valid pixel value, this is typically 0.
	PixelMin int64 `json:"pixelMin"`
	// Predicted Azimuth angle of the target object from a ground -based sensor (no
	// atmospheric refraction correction required) in degrees. AZ_EL implies apparent
	// topocentric place in true of date reference frame as seen from the observer with
	// aberration due to the observer velocity and light travel time applied.
	PredictedAzimuth float64 `json:"predictedAzimuth"`
	// Predicted Declination of the Target object from the frame of reference of the
	// sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric
	// origin and velocity aberration and subtracting the sensor geocentric position of
	// the sensor places in its reference frame.
	PredictedDeclination float64 `json:"predictedDeclination"`
	// Uncertainty of Predicted Declination of the Target object from the frame of
	// reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs
	// produce geocentric origin and velocity aberration and subtracting the sensor
	// geocentric position of the sensor places in its reference frame.
	PredictedDeclinationUnc float64 `json:"predictedDeclinationUnc"`
	// Predicted elevation angle of the target object from a ground -based sensor (no
	// atmospheric refraction correction required) in degrees. AZ_EL implies apparent
	// topocentric place in true of date reference frame as seen from the observer with
	// aberration due to the observer velocity and light travel time applied.
	PredictedElevation float64 `json:"predictedElevation"`
	// Predicted Right Ascension of the Target object from the frame of reference of
	// the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce
	// geocentric origin and velocity aberration and subtracting the sensor geocentric
	// position of the sensor places in its reference frame.
	PredictedRa float64 `json:"predictedRa"`
	// Uncertainty of predicted Right Ascension of the Target object from the frame of
	// reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs
	// produce geocentric origin and velocity aberration and subtracting the sensor
	// geocentric position of the sensor places in its reference frame.
	PredictedRaUnc float64 `json:"predictedRaUnc"`
	// Covariance (x^2) in measured Right Ascension (X) in deg^2.
	RaCov float64 `json:"raCov"`
	// Covariance (XY) in measured ra/declination (XY) in deg^2.
	RaDeclinationCov float64 `json:"raDeclinationCov"`
	// Spatial covariance of image distribution across horizontal and vertical
	// directions measured in pixels squared.
	RowColCov float64 `json:"rowColCov"`
	// Spatial variance of image distribution in vertical direction measured in pixels
	// squared.
	RowVariance float64 `json:"rowVariance"`
	// Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under
	// some algorithms, this can be a constant per target (not per observation). Note:
	// this SNR applies to the total signal of the radiometric source (i.e.,
	// Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in
	// the peak pixel (i.e., DN/pixel/sec).
	SnrEst float64 `json:"snrEst"`
	// Fraction of the sun that is illuminating the target object. This indicates if
	// the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra
	// and 1 when object is fully illuminated.).
	SolarDiskFrac float64 `json:"solarDiskFrac"`
	// Source of the data, will be set to EOObservation source if blank.
	Source string `json:"source"`
	// Array of the SpectralFilters keywords, must be present for all values n=1 to
	// numSpectralFilters, in incrementing order of n, and for no other values of n.
	SpectralFilters []string `json:"spectralFilters"`
	// This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1
	// to numSpectralFilters, in incrementing order of n, and for no other values of n.
	// Units = mag.
	SpectralFilterSolarMag []float64 `json:"spectralFilterSolarMag"`
	// This is the in-band average irradiance of a 0th mag source. Must be present for
	// all values n=1 to numSpectralFilters, in incrementing order of n, and for no
	// other values of n. Units = W/m2/nm.
	SpectralZmfl []float64 `json:"spectralZMFL"`
	// Azimuth angle of the sun from a ground-based telescope (no atmospheric
	// refraction correction required) the observer with aberration due to the observer
	// velocity and light travel time applied in degrees.
	SunAzimuth float64 `json:"sunAzimuth"`
	// Elevation angle of the sun from a ground-based telescope (no atmospheric
	// refraction correction required) in degrees.
	SunElevation float64 `json:"sunElevation"`
	// Sun state vector in ECI J2000 coordinate frame in km.
	SunStatePosX float64 `json:"sunStatePosX"`
	// Sun state vector in ECI J2000 coordinate frame in km.
	SunStatePosY float64 `json:"sunStatePosY"`
	// Sun state vector in ECI J2000 coordinate frame in km.
	SunStatePosZ float64 `json:"sunStatePosZ"`
	// Sun state vector in ECI J2000 coordinate frame in km/sec.
	SunStateVelX float64 `json:"sunStateVelX"`
	// Sun state vector in ECI J2000 coordinate frame in km/sec.
	SunStateVelY float64 `json:"sunStateVelY"`
	// Sun state vector in ECI J2000 coordinate frame in km/sec.
	SunStateVelZ float64 `json:"sunStateVelZ"`
	// An array of surface brightness measurements in magnitudes per square arcsecond
	// from the optical image that show change over an interval of time. The array
	// length is dependent on the length of the streak. The distFromStreakCenter,
	// surfBrightness, and surfBrightnessUnc arrays will match in size.
	SurfBrightness []float64 `json:"surfBrightness"`
	// An array of surface brightness uncertainty measurements in magnitudes per square
	// arcsecond from the optical image that show change over an interval of time. The
	// array length is dependent on the length of the streak. The distFromStreakCenter,
	// surfBrightness, and surfBrightnessUnc arrays will match in size.
	SurfBrightnessUnc []float64 `json:"surfBrightnessUnc"`
	// Uncertainty in the times reported in UTC in seconds.
	TimesUnc float64 `json:"timesUnc"`
	// Time off element set reported in seconds.
	Toes float64 `json:"toes"`
	// This is the value for the zero-point calculated for each filter denoted in
	// spectralFilters. It is the difference between the catalog mag and instrumental
	// mag for a set of standard stars. For use with All Sky photometry. Must be
	// present for all values n=1 to numSpectralFilters, in incrementing order of n,
	// and for no other values of n.
	ZeroPoints []float64 `json:"zeroPoints"`
	// This is the uncertainty in the zero point for the filter denoted in
	// spectralFilters. For use with All Sky photometry. Must be present for all values
	// n=1 to numSpectralFilters, in incrementing order of n, and for no other values
	// of n.
	ZeroPointsUnc []float64 `json:"zeroPointsUnc"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AcalCrPixX                           respjson.Field
		AcalCrPixY                           respjson.Field
		AcalCrValX                           respjson.Field
		AcalCrValY                           respjson.Field
		AcalNumStars                         respjson.Field
		BackgroundSignal                     respjson.Field
		BackgroundSignalUnc                  respjson.Field
		BinningHoriz                         respjson.Field
		BinningVert                          respjson.Field
		CcdObjPosX                           respjson.Field
		CcdObjPosY                           respjson.Field
		CcdObjWidth                          respjson.Field
		CcdTemp                              respjson.Field
		CentroidColumn                       respjson.Field
		CentroidRow                          respjson.Field
		ClassificationMarking                respjson.Field
		ColorCoeffs                          respjson.Field
		ColumnVariance                       respjson.Field
		CreatedAt                            respjson.Field
		CreatedBy                            respjson.Field
		CurrentNeutralDensityFilterNum       respjson.Field
		CurrentSpectralFilterNum             respjson.Field
		DataMode                             respjson.Field
		DeclinationCov                       respjson.Field
		DistFromStreakCenter                 respjson.Field
		Does                                 respjson.Field
		ExtinctionCoeffs                     respjson.Field
		ExtinctionCoeffsUnc                  respjson.Field
		Gain                                 respjson.Field
		IDEoObservation                      respjson.Field
		Ifov                                 respjson.Field
		MagInstrumental                      respjson.Field
		MagInstrumentalUnc                   respjson.Field
		NeutralDensityFilterNames            respjson.Field
		NeutralDensityFilterTransmissions    respjson.Field
		NeutralDensityFilterTransmissionsUnc respjson.Field
		NumCatalogStars                      respjson.Field
		NumCorrelatedStars                   respjson.Field
		NumDetectedStars                     respjson.Field
		NumNeutralDensityFilters             respjson.Field
		NumSpectralFilters                   respjson.Field
		ObjSunRange                          respjson.Field
		ObTime                               respjson.Field
		OpticalCrossSection                  respjson.Field
		OpticalCrossSectionUnc               respjson.Field
		PcalNumStars                         respjson.Field
		PeakApertureCount                    respjson.Field
		PeakBackgroundCount                  respjson.Field
		PhaseAngBisect                       respjson.Field
		PixelArrayHeight                     respjson.Field
		PixelArrayWidth                      respjson.Field
		PixelMax                             respjson.Field
		PixelMin                             respjson.Field
		PredictedAzimuth                     respjson.Field
		PredictedDeclination                 respjson.Field
		PredictedDeclinationUnc              respjson.Field
		PredictedElevation                   respjson.Field
		PredictedRa                          respjson.Field
		PredictedRaUnc                       respjson.Field
		RaCov                                respjson.Field
		RaDeclinationCov                     respjson.Field
		RowColCov                            respjson.Field
		RowVariance                          respjson.Field
		SnrEst                               respjson.Field
		SolarDiskFrac                        respjson.Field
		Source                               respjson.Field
		SpectralFilters                      respjson.Field
		SpectralFilterSolarMag               respjson.Field
		SpectralZmfl                         respjson.Field
		SunAzimuth                           respjson.Field
		SunElevation                         respjson.Field
		SunStatePosX                         respjson.Field
		SunStatePosY                         respjson.Field
		SunStatePosZ                         respjson.Field
		SunStateVelX                         respjson.Field
		SunStateVelY                         respjson.Field
		SunStateVelZ                         respjson.Field
		SurfBrightness                       respjson.Field
		SurfBrightnessUnc                    respjson.Field
		TimesUnc                             respjson.Field
		Toes                                 respjson.Field
		ZeroPoints                           respjson.Field
		ZeroPointsUnc                        respjson.Field
		ExtraFields                          map[string]respjson.Field
		raw                                  string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EoObservationFullEoobservationDetails) RawJSON() string { return r.JSON.raw }
func (r *EoObservationFullEoobservationDetails) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// The reference frame of the EOObservation measurements. If the referenceFrame is
// null it is assumed to be J2000.
type EoObservationFullReferenceFrame string

const (
	EoObservationFullReferenceFrameJ2000 EoObservationFullReferenceFrame = "J2000"
	EoObservationFullReferenceFrameGcrf  EoObservationFullReferenceFrame = "GCRF"
	EoObservationFullReferenceFrameItrf  EoObservationFullReferenceFrame = "ITRF"
	EoObservationFullReferenceFrameTeme  EoObservationFullReferenceFrame = "TEME"
)

// The reference frame of the observing sensor state. If the senReferenceFrame is
// null it is assumed to be J2000.
type EoObservationFullSenReferenceFrame string

const (
	EoObservationFullSenReferenceFrameJ2000   EoObservationFullSenReferenceFrame = "J2000"
	EoObservationFullSenReferenceFrameEfgTdr  EoObservationFullSenReferenceFrame = "EFG/TDR"
	EoObservationFullSenReferenceFrameEcrEcef EoObservationFullSenReferenceFrame = "ECR/ECEF"
	EoObservationFullSenReferenceFrameTeme    EoObservationFullSenReferenceFrame = "TEME"
	EoObservationFullSenReferenceFrameItrf    EoObservationFullSenReferenceFrame = "ITRF"
	EoObservationFullSenReferenceFrameGcrf    EoObservationFullSenReferenceFrame = "GCRF"
)

// Model representation of Earth Orientation Parameters (EOP) produced by the IERS
// (International Earth Rotation and Reference Systems Service). Earth Orientation
// Parameters describe the irregularities of the earth's rotation. Technically,
// they are the parameters which provide the rotation of the ITRS (International
// Terrestrial Reference System) to the ICRS (International Celestial Reference
// System) as a function of time. Universal time -- Universal time (UT1) is the
// time of the earth clock, which performs one revolution in about 24h. It is
// practically proportional to the sidereal time. The excess revolution time is
// called length of day (LOD). Coordinates of the pole -- x and y are the
// coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS
// Reference Pole. The CEP differs from the instantaneous rotation axis by
// quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The
// x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the
// direction 90 degrees West longitude. Celestial pole offsets -- Celestial pole
// offsets are described in the IAU Precession and Nutation models. The observed
// differences with respect to the conventional celestial pole position defined by
// the models are monitored and reported by the IERS. IERS Bulletins A and B
// provide current information on the Earth's orientation in the IERS Reference
// System. This includes Universal Time, coordinates of the terrestrial pole, and
// celestial pole offsets. Bulletin A gives an advanced solution updated weekly;
// the standard solution is given monthly in Bulletin B. Fields suffixed with 'B'
// are Bulletin B values. All solutions are continuous within their respective
// uncertainties. Bulletin A is issued by the IERS Rapid Service/Prediction Centre
// at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the
// IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports
// the latest determinations for polar motion, UT1-UTC, and nutation offsets at
// daily intervals based on a combination of contributed analysis results using
// data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging
// (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging
// (LLR). Predictions for variations a year into the future are also provided.
// Meteorological predictions of variations in Atmospheric Angular Momentum (AAM)
// are used to aid in the prediction of near-term UT1-UTC changes. This publication
// is prepared by the IERS Rapid Service/Prediction Center.
type EopFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EopFullDataMode `json:"dataMode,required"`
	// Effective date/time for the EOP values in ISO8601 UTC format. The values could
	// be current or predicted.
	EopDate time.Time `json:"eopDate,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory
	// of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
	// arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
	DEpsilon float64 `json:"dEpsilon"`
	// The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory
	// of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
	// arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
	DEpsilonB float64 `json:"dEpsilonB"`
	// The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
	DEpsilonUnc float64 `json:"dEpsilonUnc"`
	// The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory
	// of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
	// arc. Note: dPSI is not used when this record represents IAU 2000 data.
	DPsi float64 `json:"dPSI"`
	// The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory
	// of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
	// arc. Note: dPSIB is not used when this record represents IAU 2000 data.
	DPsib float64 `json:"dPSIB"`
	// The estimated uncertainty/error in the dPSI value in milliseconds of arc.
	DPsiUnc float64 `json:"dPSIUnc"`
	// The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A
	// Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is
	// not used when this record represents IAU 1980 data.
	DX float64 `json:"dX"`
	// The Bulletin B celestial pole offset along the X-axis with respect to the IAU
	// 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note:
	// dXB is not used when this record represents IAU 1980 data.
	DXb float64 `json:"dXB"`
	// The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of
	// arc.
	DXUnc float64 `json:"dXUnc"`
	// The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A
	// Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is
	// not used when this record represents IAU 1980 data.
	DY float64 `json:"dY"`
	// The Bulletin B celestial pole offset along the Y-axis with respect to the IAU
	// 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note:
	// dYB is not used when this record represents IAU 1980 data.
	DYb float64 `json:"dYB"`
	// The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of
	// arc.
	DYUnc float64 `json:"dYUnc"`
	// Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the
	// time of the earth clock, which performs one revolution in about 24h. It is
	// practically proportional to the sidereal time. The excess revolution time is
	// called length of day (LOD).
	Lod float64 `json:"lod"`
	// The estimated uncertainty/error in the lod value in seconds.
	LodUnc float64 `json:"lodUnc"`
	// Flag indicating Issued (I), or Predicted (P) for this record's nutation values
	// (dPSI and dEpsilon).
	//
	// Any of "I", "P".
	NutationState EopFullNutationState `json:"nutationState"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Flag indicating Issued (I), or Predicted (P) for this record's polar motion
	// values.
	//
	// Any of "I", "P".
	PolarMotionState EopFullPolarMotionState `json:"polarMotionState"`
	// The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion
	// of the Earth is the motion of the Earth's rotational axis relative to its crust.
	// This is measured with respect to a reference frame in which the solid Earth is
	// fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
	// Measured in arc seconds.
	PolarMotionX float64 `json:"polarMotionX"`
	// Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of
	// the Earth is the motion of the Earth's rotational axis relative to its crust.
	// This is measured with respect to a reference frame in which the solid Earth is
	// fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
	// Measured in arc seconds.
	PolarMotionXb float64 `json:"polarMotionXB"`
	// Estimated uncertainty/error in polarMotionX value in arc seconds.
	PolarMotionXUnc float64 `json:"polarMotionXUnc"`
	// The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion
	// of the Earth is the motion of the Earth's rotational axis relative to its crust.
	// This is measured with respect to a reference frame in which the solid Earth is
	// fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
	// Measured in arc seconds.
	PolarMotionY float64 `json:"polarMotionY"`
	// Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of
	// the Earth is the motion of the Earth's rotational axis relative to its crust.
	// This is measured with respect to a reference frame in which the solid Earth is
	// fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
	// Measured in arc seconds.
	PolarMotionYb float64 `json:"polarMotionYB"`
	// Estimated uncertainty/error in polarMotionY value in arc seconds.
	PolarMotionYUnc float64 `json:"polarMotionYUnc"`
	// The IAU Theory of Precession and Theory of Nutation applied to the data in this
	// record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980
	// Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of
	// Precession and Nutation.
	PrecessionNutationStd string `json:"precessionNutationStd"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// The difference between the Bulletin A UT1 and UTC time scales as of eopDate in
	// seconds.
	Ut1Utc float64 `json:"ut1UTC"`
	// The Bulletin B difference between the UT1 and UTC time scales as of eopDate in
	// seconds.
	Ut1Utcb float64 `json:"ut1UTCB"`
	// Flag indicating Issued (I), or Predicted (P) for this record”s Bulletin A
	// UT1-UTC values.
	//
	// Any of "I", "P".
	Ut1UtcState EopFullUt1UtcState `json:"ut1UTCState"`
	// The estimated uncertainty/error in the ut1UTC value in seconds.
	Ut1UtcUnc float64 `json:"ut1UTCUnc"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		EopDate               respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DEpsilon              respjson.Field
		DEpsilonB             respjson.Field
		DEpsilonUnc           respjson.Field
		DPsi                  respjson.Field
		DPsib                 respjson.Field
		DPsiUnc               respjson.Field
		DX                    respjson.Field
		DXb                   respjson.Field
		DXUnc                 respjson.Field
		DY                    respjson.Field
		DYb                   respjson.Field
		DYUnc                 respjson.Field
		Lod                   respjson.Field
		LodUnc                respjson.Field
		NutationState         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PolarMotionState      respjson.Field
		PolarMotionX          respjson.Field
		PolarMotionXb         respjson.Field
		PolarMotionXUnc       respjson.Field
		PolarMotionY          respjson.Field
		PolarMotionYb         respjson.Field
		PolarMotionYUnc       respjson.Field
		PrecessionNutationStd respjson.Field
		RawFileUri            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		Ut1Utc                respjson.Field
		Ut1Utcb               respjson.Field
		Ut1UtcState           respjson.Field
		Ut1UtcUnc             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EopFull) RawJSON() string { return r.JSON.raw }
func (r *EopFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EopFullDataMode string

const (
	EopFullDataModeReal      EopFullDataMode = "REAL"
	EopFullDataModeTest      EopFullDataMode = "TEST"
	EopFullDataModeSimulated EopFullDataMode = "SIMULATED"
	EopFullDataModeExercise  EopFullDataMode = "EXERCISE"
)

// Flag indicating Issued (I), or Predicted (P) for this record's nutation values
// (dPSI and dEpsilon).
type EopFullNutationState string

const (
	EopFullNutationStateI EopFullNutationState = "I"
	EopFullNutationStateP EopFullNutationState = "P"
)

// Flag indicating Issued (I), or Predicted (P) for this record's polar motion
// values.
type EopFullPolarMotionState string

const (
	EopFullPolarMotionStateI EopFullPolarMotionState = "I"
	EopFullPolarMotionStateP EopFullPolarMotionState = "P"
)

// Flag indicating Issued (I), or Predicted (P) for this record”s Bulletin A
// UT1-UTC values.
type EopFullUt1UtcState string

const (
	EopFullUt1UtcStateI EopFullUt1UtcState = "I"
	EopFullUt1UtcStateP EopFullUt1UtcState = "P"
)

// An ephemeris record is a position and velocity vector identifying the location
// and trajectory of an on-orbit object at a specified time. Ephemeris points,
// including covariance, are in kilometer and second based units in a user
// specified reference frame, with ECI J2K being preferred. The EphemerisSet ID
// (esId) links all points associated with an ephemeris set. The 'EphemerisSet'
// record contains details of the underlying data and propagation models used in
// the generation of the ephemeris. Ephemeris points must be retrieved by
// specifying the parent EphemerisSet ID (esId).
type EphemerisFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EphemerisFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Time associated with the Ephemeris Point, in ISO8601 UTC format.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Cartesian X position of target, in km, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xpos float64 `json:"xpos,required"`
	// Cartesian X velocity of target, in km/sec, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xvel float64 `json:"xvel,required"`
	// Cartesian Y position of target, in km, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Ypos float64 `json:"ypos,required"`
	// Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yvel float64 `json:"yvel,required"`
	// Cartesian Z position of target, in km, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zpos float64 `json:"zpos,required"`
	// Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zvel float64 `json:"zvel,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Covariance matrix, in kilometer and second based units, in the specified
	// Ephemeris Set covReferenceFrame. If the covReferenceFrame from the EphemerisSet
	// table is null it is assumed to be J2000. The array values represent the lower
	// triangular half of the position-velocity covariance matrix. The size of the
	// covariance matrix is dynamic, depending on whether the covariance for position
	// only or position & velocity. The covariance elements are position dependent
	// within the array with values ordered as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
	//
	// x&nbsp;&nbsp;&nbsp;&nbsp;1
	//
	// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
	//
	// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
	//
	// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
	//
	// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
	//
	// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;
	// 21
	//
	// The array containing the covariance matrix elements will be of length 6 for
	// position only covariance, or length 21 for position-velocity covariance. The cov
	// array should contain only the lower left triangle values from top left down to
	// bottom right, in order.
	Cov []float64 `json:"cov"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the parent EphemerisSet, auto-generated by the system. The
	// esId (ephemerisSet id) is used to identify all individual ephemeris states
	// associated with a parent ephemerisSet.
	EsID string `json:"esId"`
	// Unique identifier of the on-orbit satellite object.
	IDOnOrbit string `json:"idOnOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// Optional identifier provided by ephemeris source to indicate the target object
	// of this ephemeris. This may be an internal identifier and not necessarily map to
	// a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xaccel float64 `json:"xaccel"`
	// Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yaccel float64 `json:"yaccel"`
	// Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zaccel float64 `json:"zaccel"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		Ts                    respjson.Field
		Xpos                  respjson.Field
		Xvel                  respjson.Field
		Ypos                  respjson.Field
		Yvel                  respjson.Field
		Zpos                  respjson.Field
		Zvel                  respjson.Field
		ID                    respjson.Field
		Cov                   respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EsID                  respjson.Field
		IDOnOrbit             respjson.Field
		Origin                respjson.Field
		OrigObjectID          respjson.Field
		Xaccel                respjson.Field
		Yaccel                respjson.Field
		Zaccel                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EphemerisFull) RawJSON() string { return r.JSON.raw }
func (r *EphemerisFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EphemerisFullDataMode string

const (
	EphemerisFullDataModeReal      EphemerisFullDataMode = "REAL"
	EphemerisFullDataModeTest      EphemerisFullDataMode = "TEST"
	EphemerisFullDataModeSimulated EphemerisFullDataMode = "SIMULATED"
	EphemerisFullDataModeExercise  EphemerisFullDataMode = "EXERCISE"
)

// Casualty report and evacuation request. Used to report and request support to
// evacuate friendly and enemy casualties.
type EvacFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EvacFullDataMode `json:"dataMode,required"`
	// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	PickupLat float64 `json:"pickupLat,required"`
	// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	PickupLon float64 `json:"pickupLon,required"`
	// The request time, in ISO 8601 UTC format.
	ReqTime time.Time `json:"reqTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// The type of this medevac record (REQUEST, RESPONSE).
	//
	// Any of "REQUEST", "RESPONSE".
	Type EvacFullType `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Identity and medical information on the patient to be evacuated.
	CasualtyInfo []EvacFullCasualtyInfo `json:"casualtyInfo"`
	// Radius of circular area about lat/lon point, in meters (1-sigma, if representing
	// error).
	Ce float64 `json:"ce"`
	// The contact frequency, in Hz, of the agency or zone controller.
	CntctFreq float64 `json:"cntctFreq"`
	// Additional comments for the medevac mission.
	Comments string `json:"comments"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Data defining any enemy intelligence reported by the requestor.
	EnemyData []EvacFullEnemyData `json:"enemyData"`
	// Unique identifier of a weather report associated with this evacuation.
	IDWeatherReport string `json:"idWeatherReport"`
	// Height above lat/lon point, in meters (1-sigma, if representing linear error).
	Le float64 `json:"le"`
	// UUID identifying the medevac mission, which should remain the same on subsequent
	// posts related to the same medevac mission.
	MedevacID string `json:"medevacId"`
	// Flag indicating whether the mission requires medical personnel.
	MedicReq bool `json:"medicReq"`
	// The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
	MissionType string `json:"missionType"`
	// Number of ambulatory personnel requiring evacuation.
	NumAmbulatory int64 `json:"numAmbulatory"`
	// The count of people requiring medevac.
	NumCasualties int64 `json:"numCasualties"`
	// Number of people Killed In Action.
	NumKia int64 `json:"numKIA"`
	// Number of littered personnel requiring evacuation.
	NumLitter int64 `json:"numLitter"`
	// Number of people Wounded In Action.
	NumWia int64 `json:"numWIA"`
	// Amplifying data for the terrain describing important obstacles in or around the
	// zone.
	ObstaclesRemarks string `json:"obstaclesRemarks"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a
	// point height above ellipsoid, and negative values indicate a point height below
	// ellipsoid.
	PickupAlt float64 `json:"pickupAlt"`
	// The expected pickup time, in ISO 8601 UTC format.
	PickupTime time.Time `json:"pickupTime" format:"date-time"`
	// Related document ids.
	RelatedDocs []RelatedDocumentFull `json:"relatedDocs"`
	// The call sign of this medevac requestor.
	ReqCallSign string `json:"reqCallSign"`
	// Externally provided Medevac request number (e.g. MED.1.223908).
	ReqNum string `json:"reqNum"`
	// Short description of the terrain features of the pickup location (WOODS, TREES,
	// PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL,
	// SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
	Terrain string `json:"terrain"`
	// Amplifying data for the terrain describing any notable additional terrain
	// features.
	TerrainRemarks string `json:"terrainRemarks"`
	// The call sign of the zone controller.
	ZoneContrCallSign string `json:"zoneContrCallSign"`
	// Flag indicating that the pickup site is hot and hostiles are in the area.
	ZoneHot bool `json:"zoneHot"`
	// The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES,
	// MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER
	// DESIGNATOR, STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS,
	// INFRARED, ILLUMINATION, FRATRICIDE FENCE).
	ZoneMarking string `json:"zoneMarking"`
	// Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE,
	// BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
	ZoneMarkingColor string `json:"zoneMarkingColor"`
	// The name of the zone.
	ZoneName string `json:"zoneName"`
	// The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY
	// IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
	ZoneSecurity string `json:"zoneSecurity"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		PickupLat             respjson.Field
		PickupLon             respjson.Field
		ReqTime               respjson.Field
		Source                respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		CasualtyInfo          respjson.Field
		Ce                    respjson.Field
		CntctFreq             respjson.Field
		Comments              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EnemyData             respjson.Field
		IDWeatherReport       respjson.Field
		Le                    respjson.Field
		MedevacID             respjson.Field
		MedicReq              respjson.Field
		MissionType           respjson.Field
		NumAmbulatory         respjson.Field
		NumCasualties         respjson.Field
		NumKia                respjson.Field
		NumLitter             respjson.Field
		NumWia                respjson.Field
		ObstaclesRemarks      respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PickupAlt             respjson.Field
		PickupTime            respjson.Field
		RelatedDocs           respjson.Field
		ReqCallSign           respjson.Field
		ReqNum                respjson.Field
		Terrain               respjson.Field
		TerrainRemarks        respjson.Field
		ZoneContrCallSign     respjson.Field
		ZoneHot               respjson.Field
		ZoneMarking           respjson.Field
		ZoneMarkingColor      respjson.Field
		ZoneName              respjson.Field
		ZoneSecurity          respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFull) RawJSON() string { return r.JSON.raw }
func (r *EvacFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EvacFullDataMode string

const (
	EvacFullDataModeReal      EvacFullDataMode = "REAL"
	EvacFullDataModeTest      EvacFullDataMode = "TEST"
	EvacFullDataModeSimulated EvacFullDataMode = "SIMULATED"
	EvacFullDataModeExercise  EvacFullDataMode = "EXERCISE"
)

// The type of this medevac record (REQUEST, RESPONSE).
type EvacFullType string

const (
	EvacFullTypeRequest  EvacFullType = "REQUEST"
	EvacFullTypeResponse EvacFullType = "RESPONSE"
)

type EvacFullCasualtyInfo struct {
	// The patient age, in years.
	Age int64 `json:"age"`
	// Allergy information.
	Allergy []EvacFullCasualtyInfoAllergy `json:"allergy"`
	// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O
	// NEG).
	BloodType string `json:"bloodType"`
	// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES,
	// BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY
	// PART).
	BodyPart string `json:"bodyPart"`
	// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
	// in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
	// degrees, and altitude, in meters, of the burial location. This array must
	// contain a minimum of 2 elements (latitude and longitude), and may contain an
	// optional 3rd element (altitude).
	BurialLocation []float64 `json:"burialLocation"`
	// The call sign of this patient.
	CallSign string `json:"callSign"`
	// Unique identifier for the patient care provider.
	CareProviderUrn string `json:"careProviderUrn"`
	// Optional casualty key.
	CasualtyKey string `json:"casualtyKey"`
	// The type of medical issue resulting in the need to evacuate the patient (NON
	// BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION,
	// BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION,
	// DENIAL, COMBAT STRESS).
	CasualtyType string `json:"casualtyType"`
	// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
	// in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
	// degrees, and altitude, in meters, of the collection point. This array must
	// contain a minimum of 2 elements (latitude and longitude), and may contain an
	// optional 3rd element (altitude).
	CollectionPoint []float64 `json:"collectionPoint"`
	// Additional comments on the patient's casualty information.
	Comments string `json:"comments"`
	// Health condition information.
	Condition []EvacFullCasualtyInfoCondition `json:"condition"`
	// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL,
	// CHEMICAL).
	ContamType string `json:"contamType"`
	// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE
	// WOUNDED, EVACUATE DECEASED, INTERRED).
	Disposition string `json:"disposition"`
	// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD
	// SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL
	// STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
	DispositionType string `json:"dispositionType"`
	// Medical condition causation information.
	Etiology []EvacFullCasualtyInfoEtiology `json:"etiology"`
	// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
	EvacType string `json:"evacType"`
	// The patient sex (MALE, FEMALE).
	Gender string `json:"gender"`
	// Health state information.
	HealthState []EvacFullCasualtyInfoHealthState `json:"healthState"`
	// Injury specifics.
	Injury []EvacFullCasualtyInfoInjury `json:"injury"`
	// Last 4 characters of the patient social security code, or equivalent.
	Last4Ssn string `json:"last4SSN"`
	// Medication specifics.
	Medication []EvacFullCasualtyInfoMedication `json:"medication"`
	// The patient common or legal name.
	Name string `json:"name"`
	// The country code indicating the citizenship of the patient.
	Nationality string `json:"nationality"`
	// The career field of this patient.
	OccSpeciality string `json:"occSpeciality"`
	// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND
	// MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY,
	// HOSTILE CIVILIAN).
	PatientIdentity string `json:"patientIdentity"`
	// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US
	// CIVILIAN, ENEMY POW).
	PatientStatus string `json:"patientStatus"`
	// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4,
	// O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3,
	// E-2, E-1, NONE, CIVILIAN).
	PayGrade string `json:"payGrade"`
	// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE,
	// URGENT SURGERY, CONVENIENCE).
	Priority string `json:"priority"`
	// The method used to generate this medevac report (DEVICE, GROUND COMBAT
	// PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
	ReportGen string `json:"reportGen"`
	// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC
	// format.
	ReportTime time.Time `json:"reportTime" format:"date-time"`
	// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR,
	// UNKNOWN SERVICE).
	Service string `json:"service"`
	// Array specifying if any special equipment is need for each of the evacuation of
	// this patient (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL
	// COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
	SpecMedEquip []string `json:"specMedEquip"`
	// Treatment information.
	Treatment []EvacFullCasualtyInfoTreatment `json:"treatment"`
	// Information obtained for vital signs.
	VitalSignData []EvacFullCasualtyInfoVitalSignData `json:"vitalSignData"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Age             respjson.Field
		Allergy         respjson.Field
		BloodType       respjson.Field
		BodyPart        respjson.Field
		BurialLocation  respjson.Field
		CallSign        respjson.Field
		CareProviderUrn respjson.Field
		CasualtyKey     respjson.Field
		CasualtyType    respjson.Field
		CollectionPoint respjson.Field
		Comments        respjson.Field
		Condition       respjson.Field
		ContamType      respjson.Field
		Disposition     respjson.Field
		DispositionType respjson.Field
		Etiology        respjson.Field
		EvacType        respjson.Field
		Gender          respjson.Field
		HealthState     respjson.Field
		Injury          respjson.Field
		Last4Ssn        respjson.Field
		Medication      respjson.Field
		Name            respjson.Field
		Nationality     respjson.Field
		OccSpeciality   respjson.Field
		PatientIdentity respjson.Field
		PatientStatus   respjson.Field
		PayGrade        respjson.Field
		Priority        respjson.Field
		ReportGen       respjson.Field
		ReportTime      respjson.Field
		Service         respjson.Field
		SpecMedEquip    respjson.Field
		Treatment       respjson.Field
		VitalSignData   respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfo) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfo) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoAllergy struct {
	// Additional comments on the patient's allergy information.
	Comments string `json:"comments"`
	// Type of patient allergy (e.g. PENICILLIN, SULFA, OTHER).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Comments    respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoAllergy) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoAllergy) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoCondition struct {
	// Body part location or body part referenced in condition. Intended as, but not
	// constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
	// LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
	// BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's condition.
	Comments string `json:"comments"`
	// Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
	Time time.Time `json:"time" format:"date-time"`
	// Health condition assessment. Intended as, but not constrained to, K07.1
	// Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM,
	// ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU
	// UNRESPONSIVE, etc.).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BodyPart    respjson.Field
		Comments    respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoCondition) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoCondition) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoEtiology struct {
	// The body part or location affected from the etiology. Intended as, but not
	// constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
	// LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
	// BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's etiology information.
	Comments string `json:"comments"`
	// Datetime of the discovery of the etiology state in ISO 8601 UTC format.
	Time time.Time `json:"time" format:"date-time"`
	// The cause or manner of causation of the medical condition. Intended as, but not
	// constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE,
	// BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN
	// THERMAL, etc.).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BodyPart    respjson.Field
		Comments    respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoEtiology) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoEtiology) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoHealthState struct {
	// Medical color code used to quickly identify various medical state (e.g. AMBER,
	// BLACK, BLUE, GRAY, NORMAL, RED).
	HealthStateCode string `json:"healthStateCode"`
	// Medical confidence factor.
	MedConfFactor int64 `json:"medConfFactor"`
	// Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
	Time time.Time `json:"time" format:"date-time"`
	// Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION,
	// LIFE SIGN, RADIATION, SHOCK, THERMAL).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		HealthStateCode respjson.Field
		MedConfFactor   respjson.Field
		Time            respjson.Field
		Type            respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoHealthState) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoHealthState) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoInjury struct {
	// Body part location of the injury. Intended as, but not constrained to, K07.1
	// Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT
	// BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW
	// FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's injury information.
	Comments string `json:"comments"`
	// The time of the injury, in ISO 8601 UTC format.
	Time time.Time `json:"time" format:"date-time"`
	// Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION,
	// BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN
	// INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS,
	// FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA,
	// IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY
	// SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER,
	// IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE
	// NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT,
	// PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BodyPart    respjson.Field
		Comments    respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoInjury) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoInjury) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoMedication struct {
	// Route of medication delivery (e.g. INJECTION, ORAL, etc.).
	AdminRoute string `json:"adminRoute"`
	// Body part location or body part referenced for medication. Intended as, but not
	// constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
	// LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
	// BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's medication information.
	Comments string `json:"comments"`
	// Quantity of medicine or drug administered or recommended to be taken at a
	// particular time.
	Dose string `json:"dose"`
	// The time that the medication was administered in ISO 8601 UTC format.
	Time time.Time `json:"time" format:"date-time"`
	// The type of medication administered. Intended as, but not constrained to, K07.1
	// Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC,
	// COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL,
	// HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA,
	// PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AdminRoute  respjson.Field
		BodyPart    respjson.Field
		Comments    respjson.Field
		Dose        respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoMedication) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoMedication) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoTreatment struct {
	// Body part location or body part treated or to be treated. Intended as, but not
	// constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
	// LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
	// BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's treatment information.
	Comments string `json:"comments"`
	// Datetime of the treatment in ISO 8601 UTC format.
	Time time.Time `json:"time" format:"date-time"`
	// Type of treatment administered or to be administered. Intended as, but not
	// constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY
	// ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED,
	// AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC,
	// BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BodyPart    respjson.Field
		Comments    respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoTreatment) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoTreatment) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoVitalSignData struct {
	// Medical confidence factor.
	MedConfFactor int64 `json:"medConfFactor"`
	// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
	Time time.Time `json:"time" format:"date-time"`
	// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE,
	// TEMPERATURE CORE, etc.).
	VitalSign string `json:"vitalSign"`
	// Vital sign value 1. The content of this field is dependent on the type of vital
	// sign being measured (see the vitalSign field).
	VitalSign1 float64 `json:"vitalSign1"`
	// Vital sign value 2. The content of this field is dependent on the type of vital
	// sign being measured (see the vitalSign field).
	VitalSign2 float64 `json:"vitalSign2"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		MedConfFactor respjson.Field
		Time          respjson.Field
		VitalSign     respjson.Field
		VitalSign1    respjson.Field
		VitalSign2    respjson.Field
		ExtraFields   map[string]respjson.Field
		raw           string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoVitalSignData) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoVitalSignData) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullEnemyData struct {
	// Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST,
	// SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
	DirToEnemy string `json:"dirToEnemy"`
	// Comments provided by friendlies about the evac zone.
	FriendliesRemarks string `json:"friendliesRemarks"`
	// Hot Landing Zone remarks.
	HlzRemarks string `json:"hlzRemarks"`
	// The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
	HostileFireType string `json:"hostileFireType"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DirToEnemy        respjson.Field
		FriendliesRemarks respjson.Field
		HlzRemarks        respjson.Field
		HostileFireType   respjson.Field
		ExtraFields       map[string]respjson.Field
		raw               string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullEnemyData) RawJSON() string { return r.JSON.raw }
func (r *EvacFullEnemyData) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Event Evolution is a unique service supporting the association of UDL records of
// various data types to a common event or activity. The associations may be a one
// time summary, aggregating sources of a past event, or of an ongoing activity
// that evolves over a period of time.
type EventEvolutionFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EventEvolutionFullDataMode `json:"dataMode,required"`
	// User-provided unique identifier of this activity or event. This ID should remain
	// the same on subsequent updates in order to associate all records pertaining to
	// the activity or event.
	EventID string `json:"eventId,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The actual or estimated start time of the activity or event, in ISO 8601 UTC
	// format.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// Summary or description of the activity or event.
	Summary string `json:"summary,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
	// representation of the geometry/geography, of the image as projected on the
	// ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
	// or PUT request that also specifies a valid 'area' or 'atext' field.
	Agjson string `json:"agjson"`
	// Number of dimensions of the geometry depicted by region.
	Andims int64 `json:"andims"`
	// Optional geographical region or polygon (lat/lon pairs) of the area surrounding
	// the point of interest as projected on the ground.
	Area string `json:"area"`
	// Geographical spatial_ref_sys for region.
	Asrid int64 `json:"asrid"`
	// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
	// Text representation of the geometry/geography, of the image as projected on the
	// ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
	// if included with a POST or PUT request that also specifies a valid 'area' field.
	Atext string `json:"atext"`
	// Type of region as projected on the ground.
	Atype string `json:"atype"`
	// The activity or event type associated with this record (e.g. BREAKUP, DIRECT
	// FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but
	// not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an
	// event may incorporate records of various types, for example, a LAUNCH event may
	// evolve into a BREAKUP event.
	Category string `json:"category"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional description of the relationship between the records provided in the
	// srcTyps/srcIds and the activity or event.
	DataDescription string `json:"dataDescription"`
	// The actual or estimated start time of the activity or event, in ISO 8601 UTC
	// format.
	EndTime time.Time `json:"endTime" format:"date-time"`
	// Administrative boundaries of the first sub-national level. Level 1 is simply the
	// largest demarcation under whatever demarcation criteria has been determined by
	// the governing body. For example this may be the state/province in which a
	// terrestrial event takes place, or with which the event is attributed for
	// non-localized or non-terrestrial activity.
	GeoAdminLevel1 string `json:"geoAdminLevel1"`
	// Administrative boundaries of the second sub-national level. Level 2 is simply
	// the second largest demarcation under whatever demarcation criteria has been
	// determined by the governing body. For example this may be the city/district in
	// which a terrestrial event takes place, or with which the event is attributed for
	// non-localized or non-terrestrial activity.
	GeoAdminLevel2 string `json:"geoAdminLevel2"`
	// Administrative boundaries of the third sub-national level. Level 3 is simply the
	// third largest demarcation under whatever demarcation criteria has been
	// determined by the governing body.
	GeoAdminLevel3 string `json:"geoAdminLevel3"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Flag indicating that this record is for the purpose of redacting one or more
	// previously specified records from association with this activity or event. If
	// this flag is set then all records indicated in srcTyps/srcIds should be removed
	// from event association.
	Redact bool `json:"redact"`
	// Array of UUIDs of the UDL data records that are related to the determination of
	// this activity or event. See the associated 'srcTyps' array for the specific
	// types of data, positionally corresponding to the UUIDs in this array. The
	// 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps
	// array element for the data type of the UUID and use the appropriate API
	// operation to retrieve that object.
	SrcIDs []string `json:"srcIds"`
	// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
	// POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
	// are related to this activity or event. See the associated 'srcIds' array for the
	// record UUIDs, positionally corresponding to the record types in this array. The
	// 'srcTyps' and 'srcIds' arrays must match in size.
	SrcTyps []string `json:"srcTyps"`
	// The status of this activity or event. (ACTIVE, CONCLUDED, UNKNOWN).
	Status string `json:"status"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// List of URLs to before/after images of this point of interest entity.
	URL []string `json:"url"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		EventID               respjson.Field
		Source                respjson.Field
		StartTime             respjson.Field
		Summary               respjson.Field
		ID                    respjson.Field
		Agjson                respjson.Field
		Andims                respjson.Field
		Area                  respjson.Field
		Asrid                 respjson.Field
		Atext                 respjson.Field
		Atype                 respjson.Field
		Category              respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DataDescription       respjson.Field
		EndTime               respjson.Field
		GeoAdminLevel1        respjson.Field
		GeoAdminLevel2        respjson.Field
		GeoAdminLevel3        respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Redact                respjson.Field
		SrcIDs                respjson.Field
		SrcTyps               respjson.Field
		Status                respjson.Field
		Tags                  respjson.Field
		URL                   respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EventEvolutionFull) RawJSON() string { return r.JSON.raw }
func (r *EventEvolutionFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EventEvolutionFullDataMode string

const (
	EventEvolutionFullDataModeReal      EventEvolutionFullDataMode = "REAL"
	EventEvolutionFullDataModeTest      EventEvolutionFullDataMode = "TEST"
	EventEvolutionFullDataModeSimulated EventEvolutionFullDataMode = "SIMULATED"
	EventEvolutionFullDataModeExercise  EventEvolutionFullDataMode = "EXERCISE"
)

type FileData struct {
	ID         string             `json:"id"`
	Attributes FileDataAttributes `json:"attributes"`
	// Any of "UPDATE", "COPY", "MOVE".
	ContentAction FileDataContentAction `json:"contentAction"`
	TargetName    string                `json:"targetName"`
	TargetPath    string                `json:"targetPath"`
	// Any of "file", "folder", "summary".
	Type FileDataType `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID            respjson.Field
		Attributes    respjson.Field
		ContentAction respjson.Field
		TargetName    respjson.Field
		TargetPath    respjson.Field
		Type          respjson.Field
		ExtraFields   map[string]respjson.Field
		raw           string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FileData) RawJSON() string { return r.JSON.raw }
func (r *FileData) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// ToParam converts this FileData to a FileDataParam.
//
// Warning: the fields of the param type will not be present. ToParam should only
// be used at the last possible moment before sending a request. Test for this with
// FileDataParam.Overrides()
func (r FileData) ToParam() FileDataParam {
	return param.Override[FileDataParam](json.RawMessage(r.RawJSON()))
}

type FileDataAttributes struct {
	ID                    string   `json:"id"`
	Classification        string   `json:"classification"`
	ClassificationMarking string   `json:"classificationMarking"`
	CreatedBy             string   `json:"createdBy"`
	CreatedDate           string   `json:"createdDate"`
	DeleteOn              int64    `json:"deleteOn"`
	Description           string   `json:"description"`
	DocTitle              string   `json:"docTitle"`
	DocType               string   `json:"docType"`
	Doi                   []string `json:"doi"`
	EllipseLat            float64  `json:"ellipseLat"`
	EllipseLon            float64  `json:"ellipseLon"`
	FileName              string   `json:"fileName"`
	IntrinsicTitle        string   `json:"intrinsicTitle"`
	Keywords              string   `json:"keywords"`
	MediaTitle            string   `json:"mediaTitle"`
	MetaInfo              string   `json:"metaInfo"`
	Milgrid               string   `json:"milgrid"`
	MilgridLat            float64  `json:"milgridLat"`
	MilgridLon            float64  `json:"milgridLon"`
	ModifiedBy            string   `json:"modifiedBy"`
	ModifiedDate          string   `json:"modifiedDate"`
	Name                  string   `json:"name"`
	Path                  string   `json:"path"`
	Read                  string   `json:"read"`
	Searchable            bool     `json:"searchable"`
	SearchAfter           string   `json:"searchAfter"`
	SerialNumber          string   `json:"serialNumber"`
	Size                  int64    `json:"size"`
	Tags                  []string `json:"tags"`
	Write                 string   `json:"write"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID                    respjson.Field
		Classification        respjson.Field
		ClassificationMarking respjson.Field
		CreatedBy             respjson.Field
		CreatedDate           respjson.Field
		DeleteOn              respjson.Field
		Description           respjson.Field
		DocTitle              respjson.Field
		DocType               respjson.Field
		Doi                   respjson.Field
		EllipseLat            respjson.Field
		EllipseLon            respjson.Field
		FileName              respjson.Field
		IntrinsicTitle        respjson.Field
		Keywords              respjson.Field
		MediaTitle            respjson.Field
		MetaInfo              respjson.Field
		Milgrid               respjson.Field
		MilgridLat            respjson.Field
		MilgridLon            respjson.Field
		ModifiedBy            respjson.Field
		ModifiedDate          respjson.Field
		Name                  respjson.Field
		Path                  respjson.Field
		Read                  respjson.Field
		Searchable            respjson.Field
		SearchAfter           respjson.Field
		SerialNumber          respjson.Field
		Size                  respjson.Field
		Tags                  respjson.Field
		Write                 respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FileDataAttributes) RawJSON() string { return r.JSON.raw }
func (r *FileDataAttributes) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type FileDataContentAction string

const (
	FileDataContentActionUpdate FileDataContentAction = "UPDATE"
	FileDataContentActionCopy   FileDataContentAction = "COPY"
	FileDataContentActionMove   FileDataContentAction = "MOVE"
)

type FileDataType string

const (
	FileDataTypeFile    FileDataType = "file"
	FileDataTypeFolder  FileDataType = "folder"
	FileDataTypeSummary FileDataType = "summary"
)

type FileDataParam struct {
	ID         param.Opt[string]       `json:"id,omitzero"`
	TargetName param.Opt[string]       `json:"targetName,omitzero"`
	TargetPath param.Opt[string]       `json:"targetPath,omitzero"`
	Attributes FileDataAttributesParam `json:"attributes,omitzero"`
	// Any of "UPDATE", "COPY", "MOVE".
	ContentAction FileDataContentAction `json:"contentAction,omitzero"`
	// Any of "file", "folder", "summary".
	Type FileDataType `json:"type,omitzero"`
	paramObj
}

func (r FileDataParam) MarshalJSON() (data []byte, err error) {
	type shadow FileDataParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *FileDataParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type FileDataAttributesParam struct {
	ID                    param.Opt[string]  `json:"id,omitzero"`
	Classification        param.Opt[string]  `json:"classification,omitzero"`
	ClassificationMarking param.Opt[string]  `json:"classificationMarking,omitzero"`
	CreatedBy             param.Opt[string]  `json:"createdBy,omitzero"`
	CreatedDate           param.Opt[string]  `json:"createdDate,omitzero"`
	DeleteOn              param.Opt[int64]   `json:"deleteOn,omitzero"`
	Description           param.Opt[string]  `json:"description,omitzero"`
	DocTitle              param.Opt[string]  `json:"docTitle,omitzero"`
	DocType               param.Opt[string]  `json:"docType,omitzero"`
	EllipseLat            param.Opt[float64] `json:"ellipseLat,omitzero"`
	EllipseLon            param.Opt[float64] `json:"ellipseLon,omitzero"`
	FileName              param.Opt[string]  `json:"fileName,omitzero"`
	IntrinsicTitle        param.Opt[string]  `json:"intrinsicTitle,omitzero"`
	Keywords              param.Opt[string]  `json:"keywords,omitzero"`
	MediaTitle            param.Opt[string]  `json:"mediaTitle,omitzero"`
	MetaInfo              param.Opt[string]  `json:"metaInfo,omitzero"`
	Milgrid               param.Opt[string]  `json:"milgrid,omitzero"`
	MilgridLat            param.Opt[float64] `json:"milgridLat,omitzero"`
	MilgridLon            param.Opt[float64] `json:"milgridLon,omitzero"`
	ModifiedBy            param.Opt[string]  `json:"modifiedBy,omitzero"`
	ModifiedDate          param.Opt[string]  `json:"modifiedDate,omitzero"`
	Name                  param.Opt[string]  `json:"name,omitzero"`
	Path                  param.Opt[string]  `json:"path,omitzero"`
	Read                  param.Opt[string]  `json:"read,omitzero"`
	Searchable            param.Opt[bool]    `json:"searchable,omitzero"`
	SearchAfter           param.Opt[string]  `json:"searchAfter,omitzero"`
	SerialNumber          param.Opt[string]  `json:"serialNumber,omitzero"`
	Size                  param.Opt[int64]   `json:"size,omitzero"`
	Write                 param.Opt[string]  `json:"write,omitzero"`
	Doi                   []string           `json:"doi,omitzero"`
	Tags                  []string           `json:"tags,omitzero"`
	paramObj
}

func (r FileDataAttributesParam) MarshalJSON() (data []byte, err error) {
	type shadow FileDataAttributesParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *FileDataAttributesParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Flight Plan contains data specifying the details of an intended flight including
// schedule and expected route.
type FlightPlanFull struct {
	// The airfield identifier of the arrival location, International Civil Aviation
	// Organization (ICAO) code preferred.
	ArrAirfield string `json:"arrAirfield,required"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode FlightPlanFullDataMode `json:"dataMode,required"`
	// The airfield identifier of the departure location, International Civil Aviation
	// Organization (ICAO) code preferred.
	DepAirfield string `json:"depAirfield,required"`
	// The generation time of this flight plan in ISO 8601 UTC format, with millisecond
	// precision.
	GenTs time.Time `json:"genTS,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system if not provided on
	// create operations.
	ID string `json:"id"`
	// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15
	// EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan.
	// Intended as, but not constrained to, MIL-STD-6016 environment dependent specific
	// type designations.
	AircraftMds string `json:"aircraftMDS"`
	// Collection of air refueling events occurring on this flight.
	AirRefuelEvents []FlightPlanFullAirRefuelEvent `json:"airRefuelEvents"`
	// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces
	// (MAF) encode/decode procedures.
	AmcMissionID string `json:"amcMissionId"`
	// Fuel burned from the initial approach point to landing in pounds.
	AppLandingFuel float64 `json:"appLandingFuel"`
	// The first designated alternate arrival airfield, International Civil Aviation
	// Organization (ICAO) code preferred.
	ArrAlternate1 string `json:"arrAlternate1"`
	// Fuel required to fly to alternate landing site 1 and land in pounds.
	ArrAlternate1Fuel float64 `json:"arrAlternate1Fuel"`
	// The second designated alternate arrival airfield, International Civil Aviation
	// Organization (ICAO) code preferred.
	ArrAlternate2 string `json:"arrAlternate2"`
	// Fuel required to fly to alternate landing site 2 and land in pounds.
	ArrAlternate2Fuel float64 `json:"arrAlternate2Fuel"`
	// Additional fuel burned at landing/missed approach for icing during arrival in
	// pounds.
	ArrIceFuel float64 `json:"arrIceFuel"`
	// The arrival runway for this flight.
	ArrRunway string `json:"arrRunway"`
	// Array of Air Traffic Control (ATC) addresses.
	AtcAddresses []string `json:"atcAddresses"`
	// Average temperature deviation of the primary, divert, and alternate path for the
	// route between first Top of Climb and last Top of Descent in degrees Celsius.
	AvgTempDev float64 `json:"avgTempDev"`
	// Fuel planned to be burned during the flight in pounds.
	BurnedFuel float64 `json:"burnedFuel"`
	// The call sign assigned to the aircraft for this flight plan.
	CallSign string `json:"callSign"`
	// Remarks about the planned cargo associated with this flight plan.
	CargoRemark string `json:"cargoRemark"`
	// Fuel required from brake release to Top of Climb in pounds.
	ClimbFuel float64 `json:"climbFuel"`
	// Time required from brake release to Top of Climb expressed as HH:MM.
	ClimbTime string `json:"climbTime"`
	// The amount of contingency fuel in pounds.
	ContingencyFuel float64 `json:"contingencyFuel"`
	// Array of country codes for the countries overflown during this flight in ISO
	// 3166-1 Alpha-2 format.
	CountryCodes []string `json:"countryCodes"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The designated alternate departure airfield, International Civil Aviation
	// Organization (ICAO) code preferred.
	DepAlternate string `json:"depAlternate"`
	// The depressurization fuel required to fly from the Equal Time Point to the Last
	// Suitable/First Suitable airfield at depressurization altitude in pounds.
	DepressFuel float64 `json:"depressFuel"`
	// The departure runway for this flight.
	DepRunway string `json:"depRunway"`
	// The percent degrade due to drag for this aircraft.
	DragIndex float64 `json:"dragIndex"`
	// Additional fuel burned at landing/missed approach for an early descent in
	// pounds.
	EarlyDescentFuel float64 `json:"earlyDescentFuel"`
	// Total endurance time based on the fuel on board expressed as HH:MM.
	EnduranceTime string `json:"enduranceTime"`
	// Fuel required to fly from Top of Climb to Top of Descent in pounds.
	EnrouteFuel float64 `json:"enrouteFuel"`
	// Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
	EnrouteTime string `json:"enrouteTime"`
	// The list of equipment on the aircraft as defined in the Flight Information
	// Publications (FLIP) General Planning (GP) manual.
	Equipment string `json:"equipment"`
	// The estimated time of departure for the aircraft, in ISO 8601 UTC format, with
	// millisecond precision.
	EstDepTime time.Time `json:"estDepTime" format:"date-time"`
	// Array of Extended Operations (ETOPS) adequate landing airfields that are within
	// the mission region.
	EtopsAirfields []string `json:"etopsAirfields"`
	// Array of Extended Operations (ETOPS) alternate suitable landing airfields that
	// are within the mission region.
	EtopsAltAirfields []string `json:"etopsAltAirfields"`
	// The Extended Operations (ETOPS) rating used to calculate this flight plan.
	EtopsRating string `json:"etopsRating"`
	// The Extended Operations (ETOPS) validity window for the alternate airfield.
	EtopsValWindow string `json:"etopsValWindow"`
	// The source ID of the flight plan from the generating system.
	ExternalID string `json:"externalId"`
	// Collection of messages associated with this flight plan indicating the severity,
	// the point where the message was generated, the path (Primary, Alternate, etc.),
	// and the text of the message.
	FlightPlanMessages []FlightPlanFullFlightPlanMessage `json:"flightPlanMessages"`
	// Collection of point groups generated for this flight plan. Groups include point
	// sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
	// (ETP).
	FlightPlanPointGroups []FlightPlanFullFlightPlanPointGroup `json:"flightPlanPointGroups"`
	// Collection of waypoints associated with this flight plan.
	FlightPlanWaypoints []FlightPlanFullFlightPlanWaypoint `json:"flightPlanWaypoints"`
	// The flight rules this flight plan is being filed under.
	FlightRules string `json:"flightRules"`
	// The type of flight (MILITARY, CIVILIAN, etc).
	FlightType string `json:"flightType"`
	// The fuel degrade percentage used for this mission.
	FuelDegrade float64 `json:"fuelDegrade"`
	// The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system
	// assesses the integrity of the GPS signals. This system predicts outages for a
	// specified geographical area. These predictions are based on the location, path,
	// and scheduled GPS satellite outages.
	GpsRaim string `json:"gpsRAIM"`
	// Additional fuel burned at Top of Climb in pounds.
	HoldDownFuel float64 `json:"holdDownFuel"`
	// Additional fuel burned at the destination for holding in pounds.
	HoldFuel float64 `json:"holdFuel"`
	// Additional time for holding at the destination expressed as HH:MM.
	HoldTime string `json:"holdTime"`
	// The UDL unique identifier of the aircraft associated with this flight plan.
	IDAircraft string `json:"idAircraft"`
	// The UDL unique identifier of the arrival airfield associated with this flight
	// plan.
	IDArrAirfield string `json:"idArrAirfield"`
	// The UDL unique identifier of the departure airfield associated with this flight
	// plan.
	IDDepAirfield string `json:"idDepAirfield"`
	// The amount of identified extra fuel carried and not available in the burn plan
	// in pounds.
	IdentExtraFuel float64 `json:"identExtraFuel"`
	// The UDL unique identifier of the aircraft sortie associated with this flight
	// plan.
	IDSortie string `json:"idSortie"`
	// A character string representation of the initial filed cruise speed for this
	// flight (prepended values of K, N, and M represent kilometers per hour, knots,
	// and Mach, respectively).
	InitialCruiseSpeed string `json:"initialCruiseSpeed"`
	// A character string representation of the initial filed altitude level for this
	// flight (prepended values of F, S, A, and M represent flight level in hundreds of
	// feet, standard metric level in tens of meters, altitude in hundreds of feet, and
	// altitude in tens of meters, respectively).
	InitialFlightLevel string `json:"initialFlightLevel"`
	// Fuel planned to be remaining on the airplane at landing in pounds.
	LandingFuel float64 `json:"landingFuel"`
	// The leg number of this flight plan.
	LegNum int64 `json:"legNum"`
	// The minimum fuel on board required to divert in pounds.
	MinDivertFuel float64 `json:"minDivertFuel"`
	// The mission index value for this mission. The mission index is the ratio of
	// time-related cost of aircraft operation to the cost of fuel.
	MsnIndex float64 `json:"msnIndex"`
	// Additional remarks for air traffic control for this flight.
	Notes string `json:"notes"`
	// The number of aircraft flying this flight plan.
	NumAircraft int64 `json:"numAircraft"`
	// Additional fuel burned at Top of Descent for the operational condition in
	// pounds.
	OpConditionFuel float64 `json:"opConditionFuel"`
	// Operating weight of the aircraft in pounds.
	OpWeight float64 `json:"opWeight"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// Air Traffic Control address filing the flight plan.
	Originator string `json:"originator"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Remarks from the planners concerning this flight plan.
	PlannerRemark string `json:"plannerRemark"`
	// Total of all fuel required to complete the flight in pounds, including fuel to
	// be dispensed on a refueling mission.
	RampFuel float64 `json:"rampFuel"`
	// Total fuel remaining at alternate landing site 1 in pounds.
	RemAlternate1Fuel float64 `json:"remAlternate1Fuel"`
	// Total fuel remaining at alternate landing site 2 in pounds.
	RemAlternate2Fuel float64 `json:"remAlternate2Fuel"`
	// The amount of reserve fuel in pounds.
	ReserveFuel float64 `json:"reserveFuel"`
	// The 1801 fileable route of flight string for this flight. The route of flight
	// string contains route designators, significant points, change of speed/altitude,
	// change of flight rules, and cruise climbs.
	RouteString string `json:"routeString"`
	// Name of the planned Standard Instrument Departure (SID) procedure.
	Sid string `json:"sid"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Name of the planned Standard Terminal Arrival (STAR) procedure.
	Star string `json:"star"`
	// Status of this flight plan (e.g., ACTIVE, APPROVED, PLANNED, etc.).
	Status string `json:"status"`
	// The tail number of the aircraft associated with this flight plan.
	TailNumber string `json:"tailNumber"`
	// Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in
	// pounds.
	TakeoffFuel float64 `json:"takeoffFuel"`
	// Fuel required to start engines and taxi to the end of the runway in pounds.
	TaxiFuel float64 `json:"taxiFuel"`
	// Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
	ThunderAvoidFuel float64 `json:"thunderAvoidFuel"`
	// Fuel remaining at Top of Climb in pounds.
	TocFuel float64 `json:"tocFuel"`
	// Additional fuel burned at Top of Climb for icing in pounds.
	TocIceFuel float64 `json:"tocIceFuel"`
	// Fuel remaining at Top of Descent in pounds.
	TodFuel float64 `json:"todFuel"`
	// Additional fuel burned at Top of Descent for icing in pounds.
	TodIceFuel float64 `json:"todIceFuel"`
	// The amount of unidentified extra fuel required to get to min landing in pounds.
	UnidentExtraFuel float64 `json:"unidentExtraFuel"`
	// The amount of unusable fuel in pounds.
	UnusableFuel float64 `json:"unusableFuel"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// The wake turbulence category for this flight. The categories are assigned by the
	// International Civil Aviation Organization (ICAO) and are based on maximum
	// certified takeoff mass for the purpose of separating aircraft in flight due to
	// wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
	WakeTurbCat string `json:"wakeTurbCat"`
	// Wind factor for the first half of the route. This is the average wind factor
	// from first Top of Climb to the mid-time of the entire route in knots. A positive
	// value indicates a headwind, while a negative value indicates a tailwind.
	WindFac1 float64 `json:"windFac1"`
	// Wind factor for the second half of the route. This is the average wind factor
	// from the mid-time of the entire route to last Top of Descent in knots. A
	// positive value indicates a headwind, while a negative value indicates a
	// tailwind.
	WindFac2 float64 `json:"windFac2"`
	// Average wind factor from Top of Climb to Top of Descent in knots. A positive
	// value indicates a headwind, while a negative value indicates a tailwind.
	WindFacAvg float64 `json:"windFacAvg"`
	// The date and time the weather valid period ends in ISO 8601 UTC format, with
	// millisecond precision.
	WxValidEnd time.Time `json:"wxValidEnd" format:"date-time"`
	// The date and time the weather valid period begins in ISO 8601 UTC format, with
	// millisecond precision.
	WxValidStart time.Time `json:"wxValidStart" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ArrAirfield           respjson.Field
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		DepAirfield           respjson.Field
		GenTs                 respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AircraftMds           respjson.Field
		AirRefuelEvents       respjson.Field
		AmcMissionID          respjson.Field
		AppLandingFuel        respjson.Field
		ArrAlternate1         respjson.Field
		ArrAlternate1Fuel     respjson.Field
		ArrAlternate2         respjson.Field
		ArrAlternate2Fuel     respjson.Field
		ArrIceFuel            respjson.Field
		ArrRunway             respjson.Field
		AtcAddresses          respjson.Field
		AvgTempDev            respjson.Field
		BurnedFuel            respjson.Field
		CallSign              respjson.Field
		CargoRemark           respjson.Field
		ClimbFuel             respjson.Field
		ClimbTime             respjson.Field
		ContingencyFuel       respjson.Field
		CountryCodes          respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DepAlternate          respjson.Field
		DepressFuel           respjson.Field
		DepRunway             respjson.Field
		DragIndex             respjson.Field
		EarlyDescentFuel      respjson.Field
		EnduranceTime         respjson.Field
		EnrouteFuel           respjson.Field
		EnrouteTime           respjson.Field
		Equipment             respjson.Field
		EstDepTime            respjson.Field
		EtopsAirfields        respjson.Field
		EtopsAltAirfields     respjson.Field
		EtopsRating           respjson.Field
		EtopsValWindow        respjson.Field
		ExternalID            respjson.Field
		FlightPlanMessages    respjson.Field
		FlightPlanPointGroups respjson.Field
		FlightPlanWaypoints   respjson.Field
		FlightRules           respjson.Field
		FlightType            respjson.Field
		FuelDegrade           respjson.Field
		GpsRaim               respjson.Field
		HoldDownFuel          respjson.Field
		HoldFuel              respjson.Field
		HoldTime              respjson.Field
		IDAircraft            respjson.Field
		IDArrAirfield         respjson.Field
		IDDepAirfield         respjson.Field
		IdentExtraFuel        respjson.Field
		IDSortie              respjson.Field
		InitialCruiseSpeed    respjson.Field
		InitialFlightLevel    respjson.Field
		LandingFuel           respjson.Field
		LegNum                respjson.Field
		MinDivertFuel         respjson.Field
		MsnIndex              respjson.Field
		Notes                 respjson.Field
		NumAircraft           respjson.Field
		OpConditionFuel       respjson.Field
		OpWeight              respjson.Field
		Origin                respjson.Field
		Originator            respjson.Field
		OrigNetwork           respjson.Field
		PlannerRemark         respjson.Field
		RampFuel              respjson.Field
		RemAlternate1Fuel     respjson.Field
		RemAlternate2Fuel     respjson.Field
		ReserveFuel           respjson.Field
		RouteString           respjson.Field
		Sid                   respjson.Field
		SourceDl              respjson.Field
		Star                  respjson.Field
		Status                respjson.Field
		TailNumber            respjson.Field
		TakeoffFuel           respjson.Field
		TaxiFuel              respjson.Field
		ThunderAvoidFuel      respjson.Field
		TocFuel               respjson.Field
		TocIceFuel            respjson.Field
		TodFuel               respjson.Field
		TodIceFuel            respjson.Field
		UnidentExtraFuel      respjson.Field
		UnusableFuel          respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		WakeTurbCat           respjson.Field
		WindFac1              respjson.Field
		WindFac2              respjson.Field
		WindFacAvg            respjson.Field
		WxValidEnd            respjson.Field
		WxValidStart          respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFull) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type FlightPlanFullDataMode string

const (
	FlightPlanFullDataModeReal      FlightPlanFullDataMode = "REAL"
	FlightPlanFullDataModeTest      FlightPlanFullDataMode = "TEST"
	FlightPlanFullDataModeSimulated FlightPlanFullDataMode = "SIMULATED"
	FlightPlanFullDataModeExercise  FlightPlanFullDataMode = "EXERCISE"
)

// Collection of air refueling events occurring on this flight.
type FlightPlanFullAirRefuelEvent struct {
	// Additional degrade for air refueling, cumulative with fuelDegrade field percent.
	ArDegrade float64 `json:"arDegrade"`
	// Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in
	// pounds.
	ArExchangedFuel float64 `json:"arExchangedFuel"`
	// The number of this air refueling event within the flight plan.
	ArNum int64 `json:"arNum"`
	// Fuel required to fly from air refueling exit point to air refueling divert
	// alternate airfield in pounds.
	DivertFuel float64 `json:"divertFuel"`
	// Fuel remaining at the air refueling exit in pounds.
	ExitFuel float64 `json:"exitFuel"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ArDegrade       respjson.Field
		ArExchangedFuel respjson.Field
		ArNum           respjson.Field
		DivertFuel      respjson.Field
		ExitFuel        respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullAirRefuelEvent) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullAirRefuelEvent) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of messages associated with this flight plan indicating the severity,
// the point where the message was generated, the path (Primary, Alternate, etc.),
// and the text of the message.
type FlightPlanFullFlightPlanMessage struct {
	// The text of the message.
	MsgText string `json:"msgText"`
	// The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
	RoutePath string `json:"routePath"`
	// The severity of the message.
	Severity string `json:"severity"`
	// The waypoint number for which the message was generated, or enter "PLAN" for a
	// message impacting the entire route.
	WpNum string `json:"wpNum"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		MsgText     respjson.Field
		RoutePath   respjson.Field
		Severity    respjson.Field
		WpNum       respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullFlightPlanMessage) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullFlightPlanMessage) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of point groups generated for this flight plan. Groups include point
// sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
// (ETP).
type FlightPlanFullFlightPlanPointGroup struct {
	// Average fuel flow at which the fuel was calculated in pounds per hour.
	AvgFuelFlow float64 `json:"avgFuelFlow"`
	// Average wind factor from the Extended Operations (ETOPS) point to the recovery
	// airfield in knots.
	EtopsAvgWindFactor float64 `json:"etopsAvgWindFactor"`
	// Distance from the Extended Operations (ETOPS) point to the recovery airfield in
	// nautical miles.
	EtopsDistance float64 `json:"etopsDistance"`
	// Fuel required to fly from the Extended Operations (ETOPS) point to the recovery
	// airfield in pounds.
	EtopsReqFuel float64 `json:"etopsReqFuel"`
	// Temperature deviation from the Extended Operations (ETOPS) point to the recovery
	// airfield in degrees Celsius.
	EtopsTempDev float64 `json:"etopsTempDev"`
	// Time to fly from the Extended Operations (ETOPS) point to the recovery airfield
	// expressed in HH:MM format.
	EtopsTime string `json:"etopsTime"`
	// Array of point data for this Point Group.
	FlightPlanPoints []FlightPlanFullFlightPlanPointGroupFlightPlanPoint `json:"flightPlanPoints"`
	// Total time from takeoff when the point is reached expressed in HH:MM format.
	FromTakeoffTime string `json:"fromTakeoffTime"`
	// Average wind factor from the Equal Time Point (ETP) to the first suitable
	// airfield in knots.
	FsafAvgWindFactor float64 `json:"fsafAvgWindFactor"`
	// Distance from the Equal Time Point (ETP) to the first suitable airfield in
	// nautical miles.
	FsafDistance float64 `json:"fsafDistance"`
	// Fuel required to fly from the Equal Time Point (ETP) to the first suitable
	// airfield in pounds.
	FsafReqFuel float64 `json:"fsafReqFuel"`
	// Temperature deviation from the Equal Time Point (ETP) to the first suitable
	// airfield in degrees Celsius.
	FsafTempDev float64 `json:"fsafTempDev"`
	// Time to fly from the Equal Time Point (ETP) to the first suitable airfield
	// expressed in HH:MM format.
	FsafTime string `json:"fsafTime"`
	// Flight level of the point at which the fuel was calculated in feet.
	FuelCalcAlt float64 `json:"fuelCalcAlt"`
	// True airspeed at which the fuel was calculated in knots.
	FuelCalcSpd float64 `json:"fuelCalcSpd"`
	// Average wind factor from the Equal Time Point (ETP) to the last suitable
	// airfield in knots.
	LsafAvgWindFactor float64 `json:"lsafAvgWindFactor"`
	// Distance from the Equal Time Point (ETP) to the last suitable airfield in
	// nautical miles.
	LsafDistance float64 `json:"lsafDistance"`
	// Name of the last suitable airfield, International Civil Aviation Organization
	// (ICAO) code preferred.
	LsafName string `json:"lsafName"`
	// Fuel required to fly from the Equal Time Point (ETP) to the last suitable
	// airfield in pounds.
	LsafReqFuel float64 `json:"lsafReqFuel"`
	// Temperature deviation from the Equal Time Point (ETP) to the last suitable
	// airfield in degrees Celsius.
	LsafTempDev float64 `json:"lsafTempDev"`
	// Time to fly from the Equal Time Point (ETP) to the last suitable airfield
	// expressed in HH:MM format.
	LsafTime string `json:"lsafTime"`
	// Amount of planned fuel on board when the point is reached in pounds.
	PlannedFuel float64 `json:"plannedFuel"`
	// Name of the point group, usually Extended Operations (ETOPS), Critical Fuel
	// Point, and Equal Time Point (ETP) sections.
	PointGroupName string `json:"pointGroupName"`
	// Specifies which Point Group case requires the most fuel.
	WorstFuelCase string `json:"worstFuelCase"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AvgFuelFlow        respjson.Field
		EtopsAvgWindFactor respjson.Field
		EtopsDistance      respjson.Field
		EtopsReqFuel       respjson.Field
		EtopsTempDev       respjson.Field
		EtopsTime          respjson.Field
		FlightPlanPoints   respjson.Field
		FromTakeoffTime    respjson.Field
		FsafAvgWindFactor  respjson.Field
		FsafDistance       respjson.Field
		FsafReqFuel        respjson.Field
		FsafTempDev        respjson.Field
		FsafTime           respjson.Field
		FuelCalcAlt        respjson.Field
		FuelCalcSpd        respjson.Field
		LsafAvgWindFactor  respjson.Field
		LsafDistance       respjson.Field
		LsafName           respjson.Field
		LsafReqFuel        respjson.Field
		LsafTempDev        respjson.Field
		LsafTime           respjson.Field
		PlannedFuel        respjson.Field
		PointGroupName     respjson.Field
		WorstFuelCase      respjson.Field
		ExtraFields        map[string]respjson.Field
		raw                string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullFlightPlanPointGroup) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullFlightPlanPointGroup) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Array of point data for this Point Group.
type FlightPlanFullFlightPlanPointGroupFlightPlanPoint struct {
	// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with
	// millisecond precision.
	FppEta time.Time `json:"fppEta" format:"date-time"`
	// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	FppLat float64 `json:"fppLat"`
	// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	FppLon float64 `json:"fppLon"`
	// Fuel required at this point to execute an Equal Time Point (ETP) or Extended
	// Operations (ETOPS) plan in pounds.
	FppReqFuel float64 `json:"fppReqFuel"`
	// Name of this point.
	PointName string `json:"pointName"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		FppEta      respjson.Field
		FppLat      respjson.Field
		FppLon      respjson.Field
		FppReqFuel  respjson.Field
		PointName   respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullFlightPlanPointGroupFlightPlanPoint) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullFlightPlanPointGroupFlightPlanPoint) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of waypoints associated with this flight plan.
type FlightPlanFullFlightPlanWaypoint struct {
	// Points are designated by type as either a comment point or a waypoint. A comment
	// point conveys important information about the point for pilots but is not
	// entered into a flight management system. A waypoint is a point that is entered
	// into a flight management system and/or filed with Air Traffic Control.
	Type string `json:"type,required"`
	// Name of the point. The name of a comment point identifies important information
	// about that point, e.g. Top of Climb. The name of a waypoint identifies the
	// location of that point.
	WaypointName string `json:"waypointName,required"`
	// The air-to-air Tactical Air Navigation (TACAN) channels used by the
	// receiver/tanker during air refueling.
	AaTacanChannel string `json:"aaTacanChannel"`
	// The air distance of this leg in nautical miles.
	AirDistance float64 `json:"airDistance"`
	// The flight path flown for this leg.
	Airway string `json:"airway"`
	// Altitude of a level, point, or object measured in feet above mean sea level.
	Alt float64 `json:"alt"`
	// The ID of the air refueling track/anchor or fixed track.
	ArID string `json:"arId"`
	// Point identifying an air refueling track/anchor or fixed track.
	Arpt string `json:"arpt"`
	// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with
	// millisecond precision.
	Ata time.Time `json:"ata" format:"date-time"`
	// The average calibrated airspeed (CAS) for this leg in knots.
	AvgCalAirspeed float64 `json:"avgCalAirspeed"`
	// The average drift angle for this leg in degrees from true north.
	AvgDriftAng float64 `json:"avgDriftAng"`
	// The average ground speed for this leg in knots.
	AvgGroundSpeed float64 `json:"avgGroundSpeed"`
	// The average true airspeed (TAS) for this leg in knots.
	AvgTrueAirspeed float64 `json:"avgTrueAirspeed"`
	// The average wind direction for this leg in degrees from true north.
	AvgWindDir float64 `json:"avgWindDir"`
	// The average wind speed for this leg in knots.
	AvgWindSpeed float64 `json:"avgWindSpeed"`
	// The day low level altitude in feet above sea level for the leg ending at this
	// waypoint.
	DayLowAlt float64 `json:"dayLowAlt"`
	// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with
	// millisecond precision.
	Eta time.Time `json:"eta" format:"date-time"`
	// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative
	// value for offload).
	ExchangedFuel float64 `json:"exchangedFuel"`
	// The leg fuel flow in pounds per hour.
	FuelFlow float64 `json:"fuelFlow"`
	// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
	IceCat string `json:"iceCat"`
	// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	Lat float64 `json:"lat"`
	// The planned alternate leg based on user-defined constraints, International Civil
	// Aviation Organization (ICAO) code preferred.
	LegAlternate string `json:"legAlternate"`
	// The percent degrade due to drag for this aircraft for this leg.
	LegDragIndex float64 `json:"legDragIndex"`
	// The fuel degrade percentage used for this leg.
	LegFuelDegrade float64 `json:"legFuelDegrade"`
	// The average Mach speed for this leg.
	LegMach float64 `json:"legMach"`
	// The mission index value for this leg. The mission index is the ratio of
	// time-related cost of aircraft operation to the cost of fuel.
	LegMsnIndex float64 `json:"legMsnIndex"`
	// The wind factor for this leg in knots. A positive value indicates a headwind,
	// while a negative value indicates a tailwind.
	LegWindFac float64 `json:"legWindFac"`
	// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// The magnetic course at leg midpoint in degrees from true north.
	MagCourse float64 `json:"magCourse"`
	// The magnetic heading at leg midpoint in degrees from true north.
	MagHeading float64 `json:"magHeading"`
	// The magnetic variation for this leg in degrees.
	MagVar float64 `json:"magVar"`
	// Navigational Aid (NAVAID) identification code.
	Navaid string `json:"navaid"`
	// The night low level altitude in feet above sea level for the leg ending at this
	// waypoint.
	NightLowAlt float64 `json:"nightLowAlt"`
	// The night vision goggle low level altitude in feet above sea level for the leg
	// ending at this waypoint.
	NvgLowAlt float64 `json:"nvgLowAlt"`
	// The wind direction at this specific point in degrees from true north.
	PointWindDir float64 `json:"pointWindDir"`
	// The wind velocity at this specific point in knots.
	PointWindSpeed float64 `json:"pointWindSpeed"`
	// The primary UHF radio frequency used for the air refueling track or anchor in
	// megahertz.
	PriFreq float64 `json:"priFreq"`
	// The secondary UHF radio frequency used for the air refueling track or anchor in
	// megahertz.
	SecFreq float64 `json:"secFreq"`
	// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
	TacanChannel string `json:"tacanChannel"`
	// Average temperature deviation from standard day profile for this leg in degrees
	// Celsius.
	TempDev float64 `json:"tempDev"`
	// The thunderstorm intensity classification for this flight (LIGHT, MODERATE,
	// etc).
	ThunderCat string `json:"thunderCat"`
	// The total air distance to this waypoint in nautical miles.
	TotalAirDistance float64 `json:"totalAirDistance"`
	// The total distance flown to this waypoint calculated from point of departure in
	// nautical miles.
	TotalFlownDistance float64 `json:"totalFlownDistance"`
	// The total distance remaining from this waypoint to the point of arrival in
	// nautical miles.
	TotalRemDistance float64 `json:"totalRemDistance"`
	// The total fuel remaining at this waypoint in pounds.
	TotalRemFuel float64 `json:"totalRemFuel"`
	// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
	TotalTime string `json:"totalTime"`
	// The total time remaining from this waypoint to the point of arrival expressed as
	// HH:MM.
	TotalTimeRem string `json:"totalTimeRem"`
	// The total fuel used to this waypoint from point of departure in pounds.
	TotalUsedFuel float64 `json:"totalUsedFuel"`
	// The total weight of the aircraft at this waypoint in pounds.
	TotalWeight float64 `json:"totalWeight"`
	// The true course at leg midpoint in degrees from true north.
	TrueCourse float64 `json:"trueCourse"`
	// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
	TurbCat string `json:"turbCat"`
	// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in
	// megahertz.
	VorFreq float64 `json:"vorFreq"`
	// The waypoint number on the route. Comment points do not get a waypoint number.
	WaypointNum int64 `json:"waypointNum"`
	// The zone/leg distance flown in nautical miles.
	ZoneDistance float64 `json:"zoneDistance"`
	// The amount of fuel used on this zone/leg in pounds.
	ZoneFuel float64 `json:"zoneFuel"`
	// The time to fly this zone/leg in minutes.
	ZoneTime float64 `json:"zoneTime"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type               respjson.Field
		WaypointName       respjson.Field
		AaTacanChannel     respjson.Field
		AirDistance        respjson.Field
		Airway             respjson.Field
		Alt                respjson.Field
		ArID               respjson.Field
		Arpt               respjson.Field
		Ata                respjson.Field
		AvgCalAirspeed     respjson.Field
		AvgDriftAng        respjson.Field
		AvgGroundSpeed     respjson.Field
		AvgTrueAirspeed    respjson.Field
		AvgWindDir         respjson.Field
		AvgWindSpeed       respjson.Field
		DayLowAlt          respjson.Field
		Eta                respjson.Field
		ExchangedFuel      respjson.Field
		FuelFlow           respjson.Field
		IceCat             respjson.Field
		Lat                respjson.Field
		LegAlternate       respjson.Field
		LegDragIndex       respjson.Field
		LegFuelDegrade     respjson.Field
		LegMach            respjson.Field
		LegMsnIndex        respjson.Field
		LegWindFac         respjson.Field
		Lon                respjson.Field
		MagCourse          respjson.Field
		MagHeading         respjson.Field
		MagVar             respjson.Field
		Navaid             respjson.Field
		NightLowAlt        respjson.Field
		NvgLowAlt          respjson.Field
		PointWindDir       respjson.Field
		PointWindSpeed     respjson.Field
		PriFreq            respjson.Field
		SecFreq            respjson.Field
		TacanChannel       respjson.Field
		TempDev            respjson.Field
		ThunderCat         respjson.Field
		TotalAirDistance   respjson.Field
		TotalFlownDistance respjson.Field
		TotalRemDistance   respjson.Field
		TotalRemFuel       respjson.Field
		TotalTime          respjson.Field
		TotalTimeRem       respjson.Field
		TotalUsedFuel      respjson.Field
		TotalWeight        respjson.Field
		TrueCourse         respjson.Field
		TurbCat            respjson.Field
		VorFreq            respjson.Field
		WaypointNum        respjson.Field
		ZoneDistance       respjson.Field
		ZoneFuel           respjson.Field
		ZoneTime           respjson.Field
		ExtraFields        map[string]respjson.Field
		raw                string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullFlightPlanWaypoint) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullFlightPlanWaypoint) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Model representation of a location, which is a specific fixed point on the earth
// and is used to denote the locations of fixed sensors, operating units, etc.
type LocationAbridged struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode LocationAbridgedDataMode `json:"dataMode,required"`
	// Location name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Altitude of the location, in kilometers.
	Altitude float64 `json:"altitude"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the location, auto-generated by the system.
	IDLocation string `json:"idLocation"`
	// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
	// south of equator).
	Lat float64 `json:"lat"`
	// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		Altitude              respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		IDLocation            respjson.Field
		Lat                   respjson.Field
		Lon                   respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r LocationAbridged) RawJSON() string { return r.JSON.raw }
func (r *LocationAbridged) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type LocationAbridgedDataMode string

const (
	LocationAbridgedDataModeReal      LocationAbridgedDataMode = "REAL"
	LocationAbridgedDataModeTest      LocationAbridgedDataMode = "TEST"
	LocationAbridgedDataModeSimulated LocationAbridgedDataMode = "SIMULATED"
	LocationAbridgedDataModeExercise  LocationAbridgedDataMode = "EXERCISE"
)

// Model representation of a location, which is a specific fixed point on the earth
// and is used to denote the locations of fixed sensors, operating units, etc.
type LocationFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode LocationFullDataMode `json:"dataMode,required"`
	// Location name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Altitude of the location, in kilometers.
	Altitude float64 `json:"altitude"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the location, auto-generated by the system.
	IDLocation string `json:"idLocation"`
	// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
	// south of equator).
	Lat float64 `json:"lat"`
	// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		Altitude              respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		IDLocation            respjson.Field
		Lat                   respjson.Field
		Lon                   respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r LocationFull) RawJSON() string { return r.JSON.raw }
func (r *LocationFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type LocationFullDataMode string

const (
	LocationFullDataModeReal      LocationFullDataMode = "REAL"
	LocationFullDataModeTest      LocationFullDataMode = "TEST"
	LocationFullDataModeSimulated LocationFullDataMode = "SIMULATED"
	LocationFullDataModeExercise  LocationFullDataMode = "EXERCISE"
)

// Collection providing maximum on ground (MOG) information for specific aircraft
// at the site associated with this SiteOperations record.
type MaximumOnGroundFull struct {
	// The Model Design Series (MDS) designation of the aircraft to which this maximum
	// on ground (MOG) data pertains.
	AircraftMds string `json:"aircraftMDS"`
	// Maximum on ground (MOG) number of contingent aircraft based on spacing and
	// manpower, for the aircraft type specified.
	ContingencyMog int64 `json:"contingencyMOG"`
	// The name of the person who made the most recent change to this maximum on ground
	// data.
	MogLastChangedBy string `json:"mogLastChangedBy"`
	// The datetime of the most recent change made to this maximum on ground data, in
	// ISO 8601 UTC format with millisecond precision.
	MogLastChangedDate time.Time `json:"mogLastChangedDate" format:"date-time"`
	// Maximum on ground (MOG) number of parking wide-body aircraft based on spacing
	// and manpower, for the aircraft type specified.
	WideParkingMog int64 `json:"wideParkingMOG"`
	// Maximum on ground (MOG) number of working wide-body aircraft based on spacing
	// and manpower, for the aircraft type specified.
	WideWorkingMog int64 `json:"wideWorkingMOG"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AircraftMds        respjson.Field
		ContingencyMog     respjson.Field
		MogLastChangedBy   respjson.Field
		MogLastChangedDate respjson.Field
		WideParkingMog     respjson.Field
		WideWorkingMog     respjson.Field
		ExtraFields        map[string]respjson.Field
		raw                string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r MaximumOnGroundFull) RawJSON() string { return r.JSON.raw }
func (r *MaximumOnGroundFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Model representation of client generated notification data. Contains a message
// type and message body field to store notification information.
type NotificationFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode NotificationFullDataMode `json:"dataMode,required"`
	// The message body content as a text string, XML, JSON, etc. If JSON is used for
	// the msgBody, it should be 'inline' with the notification message JSON (without
	// quotation marks or escape characters). Size of the msg body cannot be over 1MB.
	MsgBody string `json:"msgBody,required"`
	// Source provided message type.
	MsgType string `json:"msgType,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The date and time the notification was created, auto-generated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// The user that created the notification.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Optional array of provider/source specific tags for this data, used for
	// implementing data owner conditional access controls to restrict access to the
	// data.
	Tags []string `json:"tags"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		MsgBody               respjson.Field
		MsgType               respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		SourceDl              respjson.Field
		Tags                  respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r NotificationFull) RawJSON() string { return r.JSON.raw }
func (r *NotificationFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type NotificationFullDataMode string

const (
	NotificationFullDataModeReal      NotificationFullDataMode = "REAL"
	NotificationFullDataModeTest      NotificationFullDataMode = "TEST"
	NotificationFullDataModeSimulated NotificationFullDataMode = "SIMULATED"
	NotificationFullDataModeExercise  NotificationFullDataMode = "EXERCISE"
)

// These services provide spacecraft positional data derived from on-board
// navigational sensors. Navigational points are provided in kilometers and in a
// user specified reference frame, with ECI J2K being preferred.
type OnboardnavigationFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnboardnavigationFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Start time of the sensor data, in ISO 8601 UTC format.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Arrays of spacecraft delta position (X, Y, Z), in km, in the specified
	// referenceFrame, between the onboard state and the last accepted sensor position.
	DeltaPos [][]float64 `json:"deltaPos"`
	// End time of the sensor data, in ISO 8601 UTC format.
	EndTime time.Time `json:"endTime" format:"date-time"`
	// Unique identifier of the parent EphemerisSet, if this data is correlated with an
	// Ephemeris. If multiple nav sensor records are required, this ID may be
	// associated with each of those records if each is synced to the ephemeris points.
	EsID string `json:"esId"`
	// Unique identifier of the primary satellite on-orbit object.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the last onboard state vector.
	IDStateVector string `json:"idStateVector"`
	// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
	// based on the onboard magnetometer, at each epoch.
	Mag [][]float64 `json:"mag"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the data source to indicate the target object of
	// this record. This may be an internal identifier and not necessarily map to a
	// valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// The reference frame in which the sensor derived positions are provided. If the
	// referenceFrame is null it is assumed to be J2000. Note that this frame is
	// assumed to apply to all of the sensor data in this record. If onboard sensors
	// process positional estimates in different frames then separate records should be
	// generated.
	//
	// Any of "J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF".
	ReferenceFrame OnboardnavigationFullReferenceFrame `json:"referenceFrame"`
	// Satellite/catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo"`
	// The last load time of the current star catalog onboard this spacecraft.
	StarCatLoadTime time.Time `json:"starCatLoadTime" format:"date-time"`
	// The name or identifier the star catalog in use.
	StarCatName string `json:"starCatName"`
	// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
	// based on the onboard star tracker, at each epoch.
	StarTracker [][]float64 `json:"starTracker"`
	// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
	// based on the onboard sun sensor, at each epoch.
	SunSensor [][]float64 `json:"sunSensor"`
	// Array of epochs of the observations, in ISO 8601 UTC format. The epochs are
	// assumed to correspond to all sensor data in this record. If sensors do not share
	// a common epoch then separate records should be generated.
	Ts []time.Time `json:"ts" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		StartTime             respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DeltaPos              respjson.Field
		EndTime               respjson.Field
		EsID                  respjson.Field
		IDOnOrbit             respjson.Field
		IDStateVector         respjson.Field
		Mag                   respjson.Field
		OnOrbit               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		ReferenceFrame        respjson.Field
		SatNo                 respjson.Field
		StarCatLoadTime       respjson.Field
		StarCatName           respjson.Field
		StarTracker           respjson.Field
		SunSensor             respjson.Field
		Ts                    respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnboardnavigationFull) RawJSON() string { return r.JSON.raw }
func (r *OnboardnavigationFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnboardnavigationFullDataMode string

const (
	OnboardnavigationFullDataModeReal      OnboardnavigationFullDataMode = "REAL"
	OnboardnavigationFullDataModeTest      OnboardnavigationFullDataMode = "TEST"
	OnboardnavigationFullDataModeSimulated OnboardnavigationFullDataMode = "SIMULATED"
	OnboardnavigationFullDataModeExercise  OnboardnavigationFullDataMode = "EXERCISE"
)

// The reference frame in which the sensor derived positions are provided. If the
// referenceFrame is null it is assumed to be J2000. Note that this frame is
// assumed to apply to all of the sensor data in this record. If onboard sensors
// process positional estimates in different frames then separate records should be
// generated.
type OnboardnavigationFullReferenceFrame string

const (
	OnboardnavigationFullReferenceFrameJ2000   OnboardnavigationFullReferenceFrame = "J2000"
	OnboardnavigationFullReferenceFrameEfgTdr  OnboardnavigationFullReferenceFrame = "EFG/TDR"
	OnboardnavigationFullReferenceFrameEcrEcef OnboardnavigationFullReferenceFrame = "ECR/ECEF"
	OnboardnavigationFullReferenceFrameTeme    OnboardnavigationFullReferenceFrame = "TEME"
	OnboardnavigationFullReferenceFrameItrf    OnboardnavigationFullReferenceFrame = "ITRF"
	OnboardnavigationFullReferenceFrameGcrf    OnboardnavigationFullReferenceFrame = "GCRF"
)

type OnorbitAntennaFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitAntennaFullDataMode `json:"dataMode,required"`
	// ID of the antenna.
	IDAntenna string `json:"idAntenna,required"`
	// ID of the on-orbit object.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Model representation of information on on-orbit/spacecraft communication
	// antennas. A spacecraft may have multiple antennas and each antenna can have
	// multiple 'details' records compiled by different sources.
	Antenna AntennaFull `json:"antenna"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDAntenna             respjson.Field
		IDOnOrbit             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Antenna               respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitAntennaFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitAntennaFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitAntennaFullDataMode string

const (
	OnorbitAntennaFullDataModeReal      OnorbitAntennaFullDataMode = "REAL"
	OnorbitAntennaFullDataModeTest      OnorbitAntennaFullDataMode = "TEST"
	OnorbitAntennaFullDataModeSimulated OnorbitAntennaFullDataMode = "SIMULATED"
	OnorbitAntennaFullDataModeExercise  OnorbitAntennaFullDataMode = "EXERCISE"
)

type OnorbitBatteryFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitBatteryFullDataMode `json:"dataMode,required"`
	// ID of the battery.
	IDBattery string `json:"idBattery,required"`
	// ID of the on-orbit object.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Model representation of specific spacecraft battery types.
	Battery BatteryFull `json:"battery"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The number of batteries on the spacecraft of the type identified by idBattery.
	Quantity int64 `json:"quantity"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDBattery             respjson.Field
		IDOnOrbit             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Battery               respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Quantity              respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitBatteryFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitBatteryFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitBatteryFullDataMode string

const (
	OnorbitBatteryFullDataModeReal      OnorbitBatteryFullDataMode = "REAL"
	OnorbitBatteryFullDataModeTest      OnorbitBatteryFullDataMode = "TEST"
	OnorbitBatteryFullDataModeSimulated OnorbitBatteryFullDataMode = "SIMULATED"
	OnorbitBatteryFullDataModeExercise  OnorbitBatteryFullDataMode = "EXERCISE"
)

// Contains details of the OnOrbit object.
type OnorbitDetailsFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitDetailsFullDataMode `json:"dataMode,required"`
	// UUID of the parent Onorbit record.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Mass of fuel and disposables at launch time in kilograms.
	AdditionalMass float64 `json:"additionalMass"`
	// The radius used for long-term debris environment projection analyses that is not
	// as conservative as COLA Radius, in meters.
	AdeptRadius float64 `json:"adeptRadius"`
	// The total beginning of life delta V of the spacecraft, in meters per second.
	BolDeltaV float64 `json:"bolDeltaV"`
	// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
	BolFuelMass float64 `json:"bolFuelMass"`
	// Average cross sectional area of the bus in meters squared.
	BusCrossSection float64 `json:"busCrossSection"`
	// Type of the bus on the spacecraft.
	BusType string `json:"busType"`
	// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b +
	// c\*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.)
	// in meters.
	ColaRadius float64 `json:"colaRadius"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Average cross sectional area in meters squared.
	CrossSection float64 `json:"crossSection"`
	// The estimated total current mass of the spacecraft, in kilograms.
	CurrentMass float64 `json:"currentMass"`
	// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
	DeltaVUnc float64 `json:"deltaVUnc"`
	// Array of the estimated mass of each deployable object, in kilograms. Must
	// contain the same number of elements as the value of numDeployable.
	DepEstMasses []float64 `json:"depEstMasses"`
	// Array of the 1-sigma uncertainty of the mass for each deployable object, in
	// kilograms. Must contain the same number of elements as the value of
	// numDeployable.
	DepMassUncs []float64 `json:"depMassUncs"`
	// Array of satellite deployable objects. Must contain the same number of elements
	// as the value of numDeployable.
	DepNames []string `json:"depNames"`
	// GEO drift rate, if applicable in degrees per day.
	DriftRate float64 `json:"driftRate"`
	// Spacecraft dry mass (without fuel or disposables) in kilograms.
	DryMass float64 `json:"dryMass"`
	// Estimated maximum burn duration for the object, in seconds.
	EstDeltaVDuration float64 `json:"estDeltaVDuration"`
	// Estimated remaining fuel for the object in kilograms.
	FuelRemaining float64 `json:"fuelRemaining"`
	// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees
	// (East of Prime Meridian). Prime Meridian is 0.
	GeoSlot float64 `json:"geoSlot"`
	// The name of the source who last provided an observation for this idOnOrbit.
	LastObSource string `json:"lastObSource"`
	// Time of last reported observation for this object in ISO 8601 UTC with
	// microsecond precision.
	LastObTime time.Time `json:"lastObTime" format:"date-time"`
	// Nominal mass of spacecraft and fuel at launch time, in kilograms.
	LaunchMass float64 `json:"launchMass"`
	// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
	LaunchMassMax float64 `json:"launchMassMax"`
	// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
	LaunchMassMin float64 `json:"launchMassMin"`
	// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft
	// may have propulsion capability but may not be maneuverable due to lack of fuel,
	// anomalous condition, or other operational constraints.
	Maneuverable bool `json:"maneuverable"`
	// Maximum delta V available for this on-orbit spacecraft, in meters per second.
	MaxDeltaV float64 `json:"maxDeltaV"`
	// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel
	// arrays) in meters.
	MaxRadius float64 `json:"maxRadius"`
	// Array of the type of missions the spacecraft performs. Must contain the same
	// number of elements as the value of numMission.
	MissionTypes []string `json:"missionTypes"`
	// The number of sub-satellites or deployable objects on the spacecraft.
	NumDeployable int64 `json:"numDeployable"`
	// The number of distinct missions the spacecraft performs.
	NumMission int64 `json:"numMission"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Current/latest radar cross section in meters squared.
	Rcs float64 `json:"rcs"`
	// Maximum radar cross section in meters squared.
	RcsMax float64 `json:"rcsMax"`
	// Mean radar cross section in meters squared.
	RcsMean float64 `json:"rcsMean"`
	// Minimum radar cross section in meters squared.
	RcsMin float64 `json:"rcsMin"`
	// The reference source, sources, or URL from which the data in this record was
	// obtained.
	RefSource string `json:"refSource"`
	// Spacecraft deployed area of solar array in meters squared.
	SolarArrayArea float64 `json:"solarArrayArea"`
	// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
	TotalMassUnc float64 `json:"totalMassUnc"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Current/latest visual magnitude in M.
	Vismag float64 `json:"vismag"`
	// Maximum visual magnitude in M.
	VismagMax float64 `json:"vismagMax"`
	// Mean visual magnitude in M.
	VismagMean float64 `json:"vismagMean"`
	// Minimum visual magnitude in M.
	VismagMin float64 `json:"vismagMin"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDOnOrbit             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AdditionalMass        respjson.Field
		AdeptRadius           respjson.Field
		BolDeltaV             respjson.Field
		BolFuelMass           respjson.Field
		BusCrossSection       respjson.Field
		BusType               respjson.Field
		ColaRadius            respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CrossSection          respjson.Field
		CurrentMass           respjson.Field
		DeltaVUnc             respjson.Field
		DepEstMasses          respjson.Field
		DepMassUncs           respjson.Field
		DepNames              respjson.Field
		DriftRate             respjson.Field
		DryMass               respjson.Field
		EstDeltaVDuration     respjson.Field
		FuelRemaining         respjson.Field
		GeoSlot               respjson.Field
		LastObSource          respjson.Field
		LastObTime            respjson.Field
		LaunchMass            respjson.Field
		LaunchMassMax         respjson.Field
		LaunchMassMin         respjson.Field
		Maneuverable          respjson.Field
		MaxDeltaV             respjson.Field
		MaxRadius             respjson.Field
		MissionTypes          respjson.Field
		NumDeployable         respjson.Field
		NumMission            respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Rcs                   respjson.Field
		RcsMax                respjson.Field
		RcsMean               respjson.Field
		RcsMin                respjson.Field
		RefSource             respjson.Field
		SolarArrayArea        respjson.Field
		TotalMassUnc          respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		Vismag                respjson.Field
		VismagMax             respjson.Field
		VismagMean            respjson.Field
		VismagMin             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitDetailsFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitDetailsFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitDetailsFullDataMode string

const (
	OnorbitDetailsFullDataModeReal      OnorbitDetailsFullDataMode = "REAL"
	OnorbitDetailsFullDataModeTest      OnorbitDetailsFullDataMode = "TEST"
	OnorbitDetailsFullDataModeSimulated OnorbitDetailsFullDataMode = "SIMULATED"
	OnorbitDetailsFullDataModeExercise  OnorbitDetailsFullDataMode = "EXERCISE"
)

// Model object representing on-orbit objects or satellites in the system.
type OnorbitFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitFullDataMode `json:"dataMode,required"`
	// Satellite/Catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Alternate name of the on-orbit object.
	AltName string `json:"altName"`
	// Read-only collection of antennas on this on-orbit object.
	Antennas []OnorbitAntennaFull `json:"antennas"`
	// Read-only collection of batteries on this on-orbit object.
	Batteries []OnorbitBatteryFull `json:"batteries"`
	// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
	// State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
	// Heliocentric, Interplanetary, Lagrangian, Docked).
	//
	// Any of "Unknown", "On-Orbit", "Decayed", "Cataloged Without State", "Launch
	// Nominal", "Analyst Satellite", "Cislunar", "Lunar", "Hyperbolic",
	// "Heliocentric", "Interplanetary", "Lagrangian", "Docked".
	Category OnorbitFullCategory `json:"category"`
	// Common name of the on-orbit object.
	CommonName string `json:"commonName"`
	// Constellation to which this satellite belongs.
	Constellation string `json:"constellation"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Date of decay.
	DecayDate time.Time `json:"decayDate" format:"date-time"`
	// Read-only entity details (only returned/used on detail queries).
	EntityCollection []OnorbitFullEntityCollection `json:"entityCollection"`
	// For the public catalog, the idOnOrbit is typically the satellite number as a
	// string, but may be a UUID for analyst or other unknown or untracked satellites,
	// auto-generated by the system.
	IDOnOrbit string `json:"idOnOrbit"`
	// International Designator, typically of the format YYYYLLLAAA, where YYYY is the
	// launch year, LLL is the sequential launch number of that year, and AAA is an
	// optional launch piece designator for the launch.
	IntlDes string `json:"intlDes"`
	// Date of launch.
	LaunchDate time.Time `json:"launchDate" format:"date"`
	// Id of the associated launchSite entity.
	LaunchSiteID string `json:"launchSiteId"`
	// Estimated lifetime of the on-orbit payload, if known.
	LifetimeYears int64 `json:"lifetimeYears"`
	// Mission number of the on-orbit object.
	MissionNumber string `json:"missionNumber"`
	// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
	// UNKNOWN.
	//
	// Any of "ROCKET BODY", "DEBRIS", "PAYLOAD", "PLATFORM", "MANNED", "UNKNOWN".
	ObjectType OnorbitFullObjectType `json:"objectType"`
	// Read-only collection of details for this on-orbit object.
	OnorbitDetails []OnorbitDetailsFull `json:"onorbitDetails"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Read-only collection of solar arrays on this on-orbit object.
	SolarArrays []OnorbitSolarArrayFull `json:"solarArrays"`
	// Read-only collection of thrusters (engines) on this on-orbit object.
	Thrusters []OnorbitThrusterFull `json:"thrusters"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		SatNo                 respjson.Field
		Source                respjson.Field
		AltName               respjson.Field
		Antennas              respjson.Field
		Batteries             respjson.Field
		Category              respjson.Field
		CommonName            respjson.Field
		Constellation         respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DecayDate             respjson.Field
		EntityCollection      respjson.Field
		IDOnOrbit             respjson.Field
		IntlDes               respjson.Field
		LaunchDate            respjson.Field
		LaunchSiteID          respjson.Field
		LifetimeYears         respjson.Field
		MissionNumber         respjson.Field
		ObjectType            respjson.Field
		OnorbitDetails        respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		SolarArrays           respjson.Field
		Thrusters             respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitFullDataMode string

const (
	OnorbitFullDataModeReal      OnorbitFullDataMode = "REAL"
	OnorbitFullDataModeTest      OnorbitFullDataMode = "TEST"
	OnorbitFullDataModeSimulated OnorbitFullDataMode = "SIMULATED"
	OnorbitFullDataModeExercise  OnorbitFullDataMode = "EXERCISE"
)

// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
// State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
// Heliocentric, Interplanetary, Lagrangian, Docked).
type OnorbitFullCategory string

const (
	OnorbitFullCategoryUnknown               OnorbitFullCategory = "Unknown"
	OnorbitFullCategoryOnOrbit               OnorbitFullCategory = "On-Orbit"
	OnorbitFullCategoryDecayed               OnorbitFullCategory = "Decayed"
	OnorbitFullCategoryCatalogedWithoutState OnorbitFullCategory = "Cataloged Without State"
	OnorbitFullCategoryLaunchNominal         OnorbitFullCategory = "Launch Nominal"
	OnorbitFullCategoryAnalystSatellite      OnorbitFullCategory = "Analyst Satellite"
	OnorbitFullCategoryCislunar              OnorbitFullCategory = "Cislunar"
	OnorbitFullCategoryLunar                 OnorbitFullCategory = "Lunar"
	OnorbitFullCategoryHyperbolic            OnorbitFullCategory = "Hyperbolic"
	OnorbitFullCategoryHeliocentric          OnorbitFullCategory = "Heliocentric"
	OnorbitFullCategoryInterplanetary        OnorbitFullCategory = "Interplanetary"
	OnorbitFullCategoryLagrangian            OnorbitFullCategory = "Lagrangian"
	OnorbitFullCategoryDocked                OnorbitFullCategory = "Docked"
)

// An entity is a generic representation of any object within a space/SSA system
// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
// entity can have an operating unit, a location (if terrestrial), and statuses.
type OnorbitFullEntityCollection struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Unique entity name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
	// LASEREMITTER, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
	//
	// Any of "AIRCRAFT", "BUS", "COMM", "IR", "LASEREMITTER", "NAVIGATION", "ONORBIT",
	// "RFEMITTER", "SCIENTIFIC", "SENSOR", "SITE", "VESSEL".
	Type string `json:"type,required"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the record.
	IDEntity string `json:"idEntity"`
	// Unique identifier of the entity location, if terrestrial/fixed.
	IDLocation string `json:"idLocation"`
	// Onorbit identifier if this entity is part of an on-orbit object. For the public
	// catalog, the idOnOrbit is typically the satellite number as a string, but may be
	// a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the associated operating unit object.
	IDOperatingUnit string `json:"idOperatingUnit"`
	// Model representation of a location, which is a specific fixed point on the earth
	// and is used to denote the locations of fixed sensors, operating units, etc.
	Location LocationFull `json:"location"`
	// Model representation of a unit or organization which operates or controls a
	// space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
	// belong to an organization.
	OperatingUnit OperatingunitFull `json:"operatingUnit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Type of organization which owns this entity (e.g. Commercial, Government,
	// Academic, Consortium, etc).
	//
	// Any of "Commercial", "Government", "Academic", "Consortium", "Other".
	OwnerType string `json:"ownerType"`
	// Read-only collection of RF bands utilized by this entity for communication
	// and/or operation.
	RfBands []RfBandFull `json:"rfBands"`
	// Read-only collection of statuses which can be collected by multiple sources.
	StatusCollection []StatusFull `json:"statusCollection"`
	// Boolean indicating if this entity is taskable.
	Taskable bool `json:"taskable"`
	// Terrestrial identifier of this entity, if applicable.
	TerrestrialID string `json:"terrestrialId"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// List of URLs to additional details/documents for this entity.
	URLs []string `json:"urls"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		Type                  respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		IDEntity              respjson.Field
		IDLocation            respjson.Field
		IDOnOrbit             respjson.Field
		IDOperatingUnit       respjson.Field
		Location              respjson.Field
		OperatingUnit         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OwnerType             respjson.Field
		RfBands               respjson.Field
		StatusCollection      respjson.Field
		Taskable              respjson.Field
		TerrestrialID         respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		URLs                  respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullEntityCollection) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullEntityCollection) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
// UNKNOWN.
type OnorbitFullObjectType string

const (
	OnorbitFullObjectTypeRocketBody OnorbitFullObjectType = "ROCKET BODY"
	OnorbitFullObjectTypeDebris     OnorbitFullObjectType = "DEBRIS"
	OnorbitFullObjectTypePayload    OnorbitFullObjectType = "PAYLOAD"
	OnorbitFullObjectTypePlatform   OnorbitFullObjectType = "PLATFORM"
	OnorbitFullObjectTypeManned     OnorbitFullObjectType = "MANNED"
	OnorbitFullObjectTypeUnknown    OnorbitFullObjectType = "UNKNOWN"
)

type OnorbitSolarArrayFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitSolarArrayFullDataMode `json:"dataMode,required"`
	// ID of the on-orbit object.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// ID of the SolarArray.
	IDSolarArray string `json:"idSolarArray,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The number of solar arrays on the spacecraft of the type identified by
	// idSolarArray.
	Quantity int64 `json:"quantity"`
	// Model representation of information on on-orbit/spacecraft solar arrays. A
	// spacecraft may have multiple solar arrays and each solar array can have multiple
	// 'details' records compiled by different sources.
	SolarArray SolarArrayFull `json:"solarArray"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDOnOrbit             respjson.Field
		IDSolarArray          respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Quantity              respjson.Field
		SolarArray            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitSolarArrayFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitSolarArrayFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitSolarArrayFullDataMode string

const (
	OnorbitSolarArrayFullDataModeReal      OnorbitSolarArrayFullDataMode = "REAL"
	OnorbitSolarArrayFullDataModeTest      OnorbitSolarArrayFullDataMode = "TEST"
	OnorbitSolarArrayFullDataModeSimulated OnorbitSolarArrayFullDataMode = "SIMULATED"
	OnorbitSolarArrayFullDataModeExercise  OnorbitSolarArrayFullDataMode = "EXERCISE"
)

type OnorbitThrusterFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitThrusterFullDataMode `json:"dataMode,required"`
	// ID of the Engine.
	IDEngine string `json:"idEngine,required"`
	// ID of the on-orbit object.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Known launch vehicle engines and their performance characteristics and limits. A
	// launch vehicle has 1 to many engines per stage.
	Engine Engine `json:"engine"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The number of engines/thrusters on the spacecraft of the type identified by
	// idEngine.
	Quantity int64 `json:"quantity"`
	// The type of thruster associated with this record (e.g. LAE, Hydrazine REA,
	// etc.).
	Type string `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDEngine              respjson.Field
		IDOnOrbit             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Engine                respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Quantity              respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitThrusterFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitThrusterFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitThrusterFullDataMode string

const (
	OnorbitThrusterFullDataModeReal      OnorbitThrusterFullDataMode = "REAL"
	OnorbitThrusterFullDataModeTest      OnorbitThrusterFullDataMode = "TEST"
	OnorbitThrusterFullDataModeSimulated OnorbitThrusterFullDataMode = "SIMULATED"
	OnorbitThrusterFullDataModeExercise  OnorbitThrusterFullDataMode = "EXERCISE"
)

// Status information for OnorbitThruster objects.
type OnorbitthrusterstatusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitthrusterstatusFullDataMode `json:"dataMode,required"`
	// ID of the associated OnorbitThruster record. This ID can be used to obtain
	// additional information on an onorbit thruster object using the 'get by ID'
	// operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster
	// object with idOnorbitThruster = abc would be queried as
	// /udl/onorbitthruster/abc.
	IDOnorbitThruster string `json:"idOnorbitThruster,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Datetime of the thruster status observation in ISO 8601 UTC datetime format with
	// millisecond precision.
	StatusTime time.Time `json:"statusTime,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Estimated available delta-velocity for this thruster, in meters per second.
	EstDeltaV float64 `json:"estDeltaV"`
	// Total fuel mass available for this thruster's type, in kilograms.
	FuelMass float64 `json:"fuelMass"`
	// 1-sigma uncertainty of the total fuel mass available for this thruster type, in
	// kilograms.
	FuelMassUnc float64 `json:"fuelMassUnc"`
	// Specific impulse for this thruster, in seconds.
	Isp float64 `json:"isp"`
	// Maximum available delta-velocity for this thruster, in meters per second.
	MaxDeltaV float64 `json:"maxDeltaV"`
	// Minimum available delta-velocity for this thruster, in meters per second.
	MinDeltaV float64 `json:"minDeltaV"`
	// Identifier of this thruster.
	Name string `json:"name"`
	// Flag indicating if this thruster is operational.
	Operational bool `json:"operational"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Average available propellant mass for this thruster's type, in kilograms.
	PropMassAvg float64 `json:"propMassAvg"`
	// Maximum available propellant mass for this thruster's type, in kilograms.
	PropMassMax float64 `json:"propMassMax"`
	// Median available propellant mass for this thruster's type, in kilograms.
	PropMassMedian float64 `json:"propMassMedian"`
	// Minimum available propellant mass for this thruster's type, in kilograms.
	PropMassMin float64 `json:"propMassMin"`
	// Maximum available thrust for this thruster, in newtons.
	ThrustMax float64 `json:"thrustMax"`
	// Total delta-velocity available for this thruster's type, in meters per second.
	TotalDeltaV float64 `json:"totalDeltaV"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDOnorbitThruster     respjson.Field
		Source                respjson.Field
		StatusTime            respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EstDeltaV             respjson.Field
		FuelMass              respjson.Field
		FuelMassUnc           respjson.Field
		Isp                   respjson.Field
		MaxDeltaV             respjson.Field
		MinDeltaV             respjson.Field
		Name                  respjson.Field
		Operational           respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PropMassAvg           respjson.Field
		PropMassMax           respjson.Field
		PropMassMedian        respjson.Field
		PropMassMin           respjson.Field
		ThrustMax             respjson.Field
		TotalDeltaV           respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitthrusterstatusFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitthrusterstatusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitthrusterstatusFullDataMode string

const (
	OnorbitthrusterstatusFullDataModeReal      OnorbitthrusterstatusFullDataMode = "REAL"
	OnorbitthrusterstatusFullDataModeTest      OnorbitthrusterstatusFullDataMode = "TEST"
	OnorbitthrusterstatusFullDataModeSimulated OnorbitthrusterstatusFullDataMode = "SIMULATED"
	OnorbitthrusterstatusFullDataModeExercise  OnorbitthrusterstatusFullDataMode = "EXERCISE"
)

// A collection containing the operational start and stop times scheduled for the
// day of the week specified.
type OperatingHoursFull struct {
	// The Zulu (UTC) operational start time, expressed in ISO 8601 format as HH:MM.
	OpStartTime string `json:"opStartTime"`
	// The Zulu (UTC) operational stop time, expressed in ISO 8601 format as HH:MM.
	OpStopTime string `json:"opStopTime"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		OpStartTime respjson.Field
		OpStopTime  respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OperatingHoursFull) RawJSON() string { return r.JSON.raw }
func (r *OperatingHoursFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Remarks contain amplifying information for a specific service. The information
// may contain context and interpretations for consumer use.
type OperatingUnitRemarkFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OperatingUnitRemarkFullDataMode `json:"dataMode,required"`
	// The ID of the operating unit to which this remark applies.
	IDOperatingUnit string `json:"idOperatingUnit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The text of the remark.
	Text string `json:"text,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Unique identifier of the unit remark record from the originating system.
	AltRmkID string `json:"altRmkId"`
	// The remark type identifier. For example, the Mobility Air Forces (MAF) remark
	// code, defined in the Airfield Suitability and Restriction Report (ASRR).
	Code string `json:"code"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The name of the remark.
	Name string `json:"name"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
	Type string `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDOperatingUnit       respjson.Field
		Source                respjson.Field
		Text                  respjson.Field
		ID                    respjson.Field
		AltRmkID              respjson.Field
		Code                  respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Name                  respjson.Field
		Origin                respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OperatingUnitRemarkFull) RawJSON() string { return r.JSON.raw }
func (r *OperatingUnitRemarkFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OperatingUnitRemarkFullDataMode string

const (
	OperatingUnitRemarkFullDataModeReal      OperatingUnitRemarkFullDataMode = "REAL"
	OperatingUnitRemarkFullDataModeTest      OperatingUnitRemarkFullDataMode = "TEST"
	OperatingUnitRemarkFullDataModeSimulated OperatingUnitRemarkFullDataMode = "SIMULATED"
	OperatingUnitRemarkFullDataModeExercise  OperatingUnitRemarkFullDataMode = "EXERCISE"
)

// Model representation of a unit or organization which operates or controls a
// space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
// belong to an organization.
type OperatingunitFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OperatingunitFullDataMode `json:"dataMode,required"`
	// Name of the operating unit.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic
	// coordinates reside.
	AirDefArea string `json:"airDefArea"`
	// The DoD Standard country code designator for the country or political entity to
	// which the operating unit owes its allegiance. This field will be set to "OTHR"
	// if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
	Allegiance string `json:"allegiance"`
	// Specifies an alternate allegiance code if the data provider code is not part of
	// an official Country Code standard such as ISO-3166 or FIPS. This field will be
	// set to the value provided by the source and should be used for all Queries
	// specifying allegiance.
	AltAllegiance string `json:"altAllegiance"`
	// Specifies an alternate country code if the data provider code is not part of an
	// official Country Code standard such as ISO-3166 or FIPS. This field will be set
	// to the value provided by the source and should be used for all Queries
	// specifying a Country Code.
	AltCountryCode string `json:"altCountryCode"`
	// Unique identifier of the operating unit record from the originating system.
	AltOperatingUnitID string `json:"altOperatingUnitId"`
	// Indicates the importance of the operating unit to the OES or MIR system. This
	// data element is restricted to update by DIA (DB-4). Valid values are: 0 - Does
	// not meet criteria above 1 - Primary importance to system 2 - Secondary
	// importance to system 3 - Tertiary importance to system O - Other. Explain in
	// Remarks.
	ClassRating string `json:"classRating"`
	// The physical manner of being or state of existence of the operating unit. A
	// physical condition that must be considered in the determining of a course of
	// action. The specific usage and enumerations contained in this field may be found
	// in the documentation provided in the referenceDoc field. If referenceDoc not
	// provided, users may consult the data provider.
	Condition string `json:"condition"`
	// Availability of the operating unit relative to its condition. Indicates the
	// reason the operating unit is not fully operational. The specific usage and
	// enumerations contained in this field may be found in the documentation provided
	// in the referenceDoc field. If referenceDoc not provided, users may consult the
	// data provider.
	ConditionAvail string `json:"conditionAvail"`
	// Indicates any of the magnitudes that serve to define the position of a point by
	// reference to a fixed figure, system of lines, etc.
	//
	// Pos. 1-2. Latitude Degrees [00-90]
	//
	// Pos. 3-4. Latitude Minutes [00-59]
	//
	// Pos. 5-6. Latitude Seconds [00-59]
	//
	// Pos. 7-9. Latitude Thousandths Of Seconds [000-999]
	//
	// Pos. 10. Latitude Hemisphere [NS]
	//
	// Pos. 11-13. Longitude Degrees [00-180]
	//
	// Pos. 14-15. Longitude Minutes [00-59]
	//
	// Pos. 16-17. Longitude Seconds [00-59]
	//
	// Pos. 18-20. Longitude Thousandths Of Seconds [000-999]
	//
	// Pos. 21. Longitude Hemisphere [EW]
	//
	// Pos. 1-21. Unknown Latitude and Unknown Longitude [000000000U000000000U]
	Coord string `json:"coord"`
	// A mathematical model of the earth used to calculate coordinates on a map. US
	// Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied
	// countries with local datums. The datum must be specified to ensure accuracy of
	// coordinates. The specific usage and enumerations contained in this field may be
	// found in the documentation provided in the referenceDoc field. If referenceDoc
	// not provided, users may consult the data provider.
	CoordDatum string `json:"coordDatum"`
	// Indicates the plus or minus error assessed against the method used to derive the
	// coordinate.
	CoordDerivAcc float64 `json:"coordDerivAcc"`
	// The DoD Standard country code designator for the country or political entity to
	// which the operating unit geographic coordinates reside . This field will be set
	// to "OTHR" if the source value does not match a UDL country code value
	// (ISO-3166-ALPHA-2).
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// A code describing the amount of operating unit participation in a deployment.
	// The specific usage and enumerations contained in this field may be found in the
	// documentation provided in the referenceDoc field. If referenceDoc not provided,
	// users may consult the data provider.
	DeployStatus string `json:"deployStatus"`
	// Description of the operating unit.
	Description string `json:"description"`
	// Combat status of a divisional or equivalent operating unit. Currently, this data
	// element applies only to operating units of the Former Soviet Union. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	DivCat string `json:"divCat"`
	// Organizational level of the operating unit. The specific usage and enumerations
	// contained in this field may be found in the documentation provided in the
	// referenceDoc field. If referenceDoc not provided, users may consult the data
	// provider.
	Echelon string `json:"echelon"`
	// Indicates the major group or level to which an echelon belongs. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	EchelonTier string `json:"echelonTier"`
	// Ground elevation of the geographic coordinates referenced to (above or below)
	// Mean Sea Level (MSL) vertical datum.
	ElevMsl float64 `json:"elevMsl"`
	// Indicates the confidence level expressed as a percent that a specific geometric
	// spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned
	// to within a specified vertical accuracy.
	ElevMslConfLvl int64 `json:"elevMslConfLvl"`
	// Indicates the plus or minus error assessed against the method used to derive the
	// elevation.
	ElevMslDerivAcc float64 `json:"elevMslDerivAcc"`
	// The Intelligence Confidence Level or the Reliability/degree of confidence that
	// the analyst has assigned to the data within this record. The numerical range is
	// from 1 to 9 with 1 representing the highest confidence level.
	Eval int64 `json:"eval"`
	// The country code of the observed flag flown.
	FlagFlown string `json:"flagFlown"`
	// Naval fleet to which an operating unit is assigned. The specific usage and
	// enumerations contained in this field may be found in the documentation provided
	// in the referenceDoc field. If referenceDoc not provided, users may consult the
	// data provider.
	FleetID string `json:"fleetId"`
	// An aggregation of military units within a single service (i.e., ARMY, AIR FORCE,
	// etc.) which operates under a single authority to accomplish a common mission.
	// The specific usage and enumerations contained in this field may be found in the
	// documentation provided in the referenceDoc field. If referenceDoc not provided,
	// users may consult the data provider.
	Force string `json:"force"`
	// The specific name for a given force. For example, Force = ADF (Air Defense
	// Force) and Force Name = Army Air Defense Force.
	ForceName string `json:"forceName"`
	// Functional Production Area (FPA) under the Shared Production Program (SPP).
	// Producers are defined per country per FPA. The specific usage and enumerations
	// contained in this field may be found in the documentation provided in the
	// referenceDoc field. If referenceDoc not provided, users may consult the data
	// provider.
	Fpa string `json:"fpa"`
	// Principal combat-related role that an operating unit is organized, structured
	// and equipped to perform. Or, the specialized military or paramilitary branch in
	// which an individual serves, their specialization. The specific usage and
	// enumerations contained in this field may be found in the documentation provided
	// in the referenceDoc field. If referenceDoc not provided, users may consult the
	// data provider.
	FunctRole string `json:"functRole"`
	// The distance between Mean Sea Level and a referenced ellipsoid.
	GeoidalMslSep float64 `json:"geoidalMslSep"`
	// Unique identifier of the contact for this operating unit.
	IDContact string `json:"idContact"`
	// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER,
	// NEUTRAL, PENDING, SUSPECT, UNKNOWN):
	//
	// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics,
	// behavior, and/or origin.
	//
	// FRIEND: Track object supporting friendly forces and belonging to a declared
	// friendly nation or entity.
	//
	// HOSTILE: Track object belonging to an opposing nation, party, group, or entity
	// deemed to contribute to a threat to friendly forces or their mission due to its
	// behavior, characteristics, nationality, or origin.
	//
	// FAKER: Friendly track, object, or entity acting as an exercise hostile.
	//
	// JOKER: Friendly track, object, or entity acting as an exercise suspect.
	//
	// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or
	// origin indicate that it is neither supporting nor opposing friendly forces or
	// their mission.
	//
	// PENDING: Track object which has not been evaluated.
	//
	// SUSPECT: Track object deemed potentially hostile due to the object
	// characteristics, behavior, nationality, and/or origin.
	//
	// UNKNOWN: Track object which has been evaluated and does not meet criteria for
	// any standard identity.
	Ident string `json:"ident"`
	// Unique identifier of the location record for this operating unit.
	IDLocation string `json:"idLocation"`
	// Unique identifier of the record, auto-generated by the system.
	IDOperatingUnit string `json:"idOperatingUnit"`
	// Unique identifier of the organization record for this operating unit.
	IDOrganization string `json:"idOrganization"`
	// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
	// south of equator).
	Lat float64 `json:"lat"`
	// Model representation of a location, which is a specific fixed point on the earth
	// and is used to denote the locations of fixed sensors, operating units, etc.
	Location LocationFull `json:"location"`
	// Location name for the coordinates.
	LocName string `json:"locName"`
	// Indicates the reason that the operating unit is at that location. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	LocReason string `json:"locReason"`
	// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// This field contains a value indicating whether the record is a master unit
	// record (True) or a detail record (False). Master records contain basic
	// information that does not change over time for each unit that has been selected
	// to be projected.
	MasterUnit bool `json:"masterUnit"`
	// The Military Grid Reference System is the geocoordinate standard used by NATO
	// militaries for locating points on Earth. The MGRS is derived from the Universal
	// Transverse Mercator (UTM) grid system and the Universal Polar Stereographic
	// (UPS) grid system, but uses a different labeling convention. The MGRS is used as
	// geocode for the entire Earth. Example of an milgrid coordinate, or grid
	// reference, would be 4QFJ12345678, which consists of three parts: 4Q (grid zone
	// designator, GZD) FJ (the 100,000-meter square identifier) 12345678 (numerical
	// location; easting is 1234 and northing is 5678, in this case specifying a
	// location with 10 m resolution).
	MilGrid string `json:"milGrid"`
	// Indicates the grid system used in the development of the milGrid coordinates.
	// Values are:
	//
	// # UPS - Universal Polar System
	//
	// UTM - Universal Transverse Mercator
	MilGridSys string `json:"milGridSys"`
	// Indicates the principal type of mission that an operating unit is organized and
	// equipped to perform. The specific usage and enumerations contained in this field
	// may be found in the documentation provided in the referenceDoc field. If
	// referenceDoc not provided, users may consult the data provider.
	MsnPrimary string `json:"msnPrimary"`
	// Indicates the principal specialty type of mission that an operating unit is
	// organized and equipped to perform. The specific usage and enumerations contained
	// in this field may be found in the documentation provided in the referenceDoc
	// field. If referenceDoc not provided, users may consult the data provider.
	MsnPrimarySpecialty string `json:"msnPrimarySpecialty"`
	// Remarks contain amplifying information for a specific service. The information
	// may contain context and interpretations for consumer use.
	OperatingUnitRemarks []OperatingUnitRemarkFull `json:"operatingUnitRemarks"`
	// The Degree to which an operating unit is ready to perform the overall
	// operational mission(s) for which it was organized and equipped. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	OperStatus string `json:"operStatus"`
	// An organization such as a corporation, manufacturer, consortium, government,
	// etc. An organization may have parent and child organizations as well as link to
	// a former organization if this org previously existed as another organization.
	Organization OrganizationFull `json:"organization"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// Political subdivision in which the geographic coordinates reside. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	PolSubdiv string `json:"polSubdiv"`
	// Validity and currency of the data in the record to be used in conjunction with
	// the other elements in the record as defined by SOPs. Values are: A - Active I -
	// Inactive K - Acknowledged L - Local Q - A nominated (NOM) or Data Change Request
	// (DCR) record R - Production reduced by CMD decision W - Working Record.
	RecStatus string `json:"recStatus"`
	// The reference documentiation that specifies the usage and enumerations contained
	// in this record. If referenceDoc not provided, users may consult the data
	// provider.
	ReferenceDoc string `json:"referenceDoc"`
	// Responsible Producer - Organization that is responsible for the maintenance of
	// the record.
	ResProd string `json:"resProd"`
	// Date on which the data in the record was last reviewed by the responsible
	// analyst for accuracy and currency. This date cannot be greater than the current
	// date.
	ReviewDate time.Time `json:"reviewDate" format:"date"`
	// This field contains a value indicating whether the record is a stylized
	// operating unit record (True) or a regular operating unit record (False). A
	// stylized operating unit is a type of operating unit with one set of equipment
	// that can be assigned to one or more superiors. A stylized operating unit is
	// generally useful for lower echelon operating units where the number of operating
	// units and types of equipment are equal for multiple organizations. In lieu of
	// creating unique operating unit records for each operating unit, a template is
	// created for the operating unit and its equipment. This template enables the user
	// to assign the operating unit to multiple organizations.
	StylizedUnit bool `json:"stylizedUnit"`
	// A standard scheme for symbol coding enabling the transfer, display and use of
	// symbols and graphics among information systems, as per MIL-STD 2525B, and
	// supported by the element AFFILIATION.
	SymCode string `json:"symCode"`
	// An optional identifier for this operating unit that may be composed from items
	// such as the originating organization, allegiance, one-up number, etc.
	UnitIdentifier string `json:"unitIdentifier"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Universal Transverse Mercator (UTM) grid coordinates. Pos. 1-2, UTM Zone Column
	// [01-60 Pos. 3, UTM Zone Row [C-HJ-NP-X] Pos. 4, UTM False Easting [0-9] Pos.
	// 5-9, UTM Meter Easting [0-9][0-9][0-9][0-9][0-9] Pos. 10-11, UTM False Northing
	// [0-9][0-9] Pos. 12-16, UTM Meter Northing [0-9][0-9][0-9][0-9][0-9].
	Utm string `json:"utm"`
	// World Aeronautical Chart identifier for the area in which a designated operating
	// unit is located.
	Wac string `json:"wac"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		AirDefArea            respjson.Field
		Allegiance            respjson.Field
		AltAllegiance         respjson.Field
		AltCountryCode        respjson.Field
		AltOperatingUnitID    respjson.Field
		ClassRating           respjson.Field
		Condition             respjson.Field
		ConditionAvail        respjson.Field
		Coord                 respjson.Field
		CoordDatum            respjson.Field
		CoordDerivAcc         respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DeployStatus          respjson.Field
		Description           respjson.Field
		DivCat                respjson.Field
		Echelon               respjson.Field
		EchelonTier           respjson.Field
		ElevMsl               respjson.Field
		ElevMslConfLvl        respjson.Field
		ElevMslDerivAcc       respjson.Field
		Eval                  respjson.Field
		FlagFlown             respjson.Field
		FleetID               respjson.Field
		Force                 respjson.Field
		ForceName             respjson.Field
		Fpa                   respjson.Field
		FunctRole             respjson.Field
		GeoidalMslSep         respjson.Field
		IDContact             respjson.Field
		Ident                 respjson.Field
		IDLocation            respjson.Field
		IDOperatingUnit       respjson.Field
		IDOrganization        respjson.Field
		Lat                   respjson.Field
		Location              respjson.Field
		LocName               respjson.Field
		LocReason             respjson.Field
		Lon                   respjson.Field
		MasterUnit            respjson.Field
		MilGrid               respjson.Field
		MilGridSys            respjson.Field
		MsnPrimary            respjson.Field
		MsnPrimarySpecialty   respjson.Field
		OperatingUnitRemarks  respjson.Field
		OperStatus            respjson.Field
		Organization          respjson.Field
		Origin                respjson.Field
		PolSubdiv             respjson.Field
		RecStatus             respjson.Field
		ReferenceDoc          respjson.Field
		ResProd               respjson.Field
		ReviewDate            respjson.Field
		StylizedUnit          respjson.Field
		SymCode               respjson.Field
		UnitIdentifier        respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		Utm                   respjson.Field
		Wac                   respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OperatingunitFull) RawJSON() string { return r.JSON.raw }
func (r *OperatingunitFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OperatingunitFullDataMode string

const (
	OperatingunitFullDataModeReal      OperatingunitFullDataMode = "REAL"
	OperatingunitFullDataModeTest      OperatingunitFullDataMode = "TEST"
	OperatingunitFullDataModeSimulated OperatingunitFullDataMode = "SIMULATED"
	OperatingunitFullDataModeExercise  OperatingunitFullDataMode = "EXERCISE"
)

// Collection providing relevant information in the event of deviations/exceptions
// to normal operations.
type OperationalDeviationFull struct {
	// The Model Design Series (MDS) designation of the aircraft affected by this
	// operational deviation.
	AffectedAircraftMds string `json:"affectedAircraftMDS"`
	// The maximum on ground (MOG) number for aircraft affected by this operational
	// deviation.
	AffectedMog int64 `json:"affectedMOG"`
	// On ground time for aircraft affected by this operational deviation.
	AircraftOnGroundTime string `json:"aircraftOnGroundTime"`
	// Rest time for crew affected by this operational deviation.
	CrewRestTime string `json:"crewRestTime"`
	// The name of the person who made the most recent change to this
	// OperationalDeviation data.
	OdLastChangedBy string `json:"odLastChangedBy"`
	// The datetime of the most recent change made to this OperationalDeviation data,
	// in ISO 8601 UTC format with millisecond precision.
	OdLastChangedDate time.Time `json:"odLastChangedDate" format:"date-time"`
	// Text remark regarding this operational deviation.
	OdRemark string `json:"odRemark"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AffectedAircraftMds  respjson.Field
		AffectedMog          respjson.Field
		AircraftOnGroundTime respjson.Field
		CrewRestTime         respjson.Field
		OdLastChangedBy      respjson.Field
		OdLastChangedDate    respjson.Field
		OdRemark             respjson.Field
		ExtraFields          map[string]respjson.Field
		raw                  string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OperationalDeviationFull) RawJSON() string { return r.JSON.raw }
func (r *OperationalDeviationFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of planning information associated with this SiteOperations record.
type OperationalPlanningFull struct {
	// The end date of this operational planning, in ISO8601 UTC format with
	// millisecond precision.
	OpEndDate time.Time `json:"opEndDate" format:"date-time"`
	// The name of the person who made the most recent change made to this
	// OperationalPlanning data.
	OpLastChangedBy string `json:"opLastChangedBy"`
	// The datetime of the most recent change made to this OperationalPlanning data, in
	// ISO8601 UTC format with millisecond precision.
	OpLastChangedDate time.Time `json:"opLastChangedDate" format:"date-time"`
	// Remark text regarding this operation planning.
	OpRemark string `json:"opRemark"`
	// The person, unit, organization, etc. responsible for this operation planning.
	OpSource string `json:"opSource"`
	// The start date of this operational planning, in ISO8601 UTC format with
	// millisecond precision.
	OpStartDate time.Time `json:"opStartDate" format:"date-time"`
	// The status of this operational planning.
	OpStatus string `json:"opStatus"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		OpEndDate         respjson.Field
		OpLastChangedBy   respjson.Field
		OpLastChangedDate respjson.Field
		OpRemark          respjson.Field
		OpSource          respjson.Field
		OpStartDate       respjson.Field
		OpStatus          respjson.Field
		ExtraFields       map[string]respjson.Field
		raw               string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OperationalPlanningFull) RawJSON() string { return r.JSON.raw }
func (r *OperationalPlanningFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Model representation of additional detailed organization data as collected by a
// particular source.
type OrganizationDetailsFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OrganizationDetailsFullDataMode `json:"dataMode,required"`
	// Unique identifier of the parent organization.
	IDOrganization string `json:"idOrganization,required"`
	// Organization details name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Street number of the organization.
	Address1 string `json:"address1"`
	// Field for additional organization address information such as PO Box and unit
	// number.
	Address2 string `json:"address2"`
	// Contains the third line of address information for an organization.
	Address3 string `json:"address3"`
	// Designated broker for this organization.
	Broker string `json:"broker"`
	// For organizations of type CORPORATION, the name of the Chief Executive Officer.
	Ceo string `json:"ceo"`
	// For organizations of type CORPORATION, the name of the Chief Financial Officer.
	Cfo string `json:"cfo"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// For organizations of type CORPORATION, the name of the Chief Technology Officer.
	Cto string `json:"cto"`
	// Organization description.
	Description string `json:"description"`
	// For organizations of type CORPORATION, the company EBITDA value as of
	// financialYearEndDate in US Dollars.
	Ebitda float64 `json:"ebitda"`
	// Listed contact email address for the organization.
	Email string `json:"email"`
	// For organizations of type CORPORATION, notes on company financials.
	FinancialNotes string `json:"financialNotes"`
	// For organizations of type CORPORATION, the effective financial year end date for
	// revenue, EBITDA, and profit values.
	FinancialYearEndDate time.Time `json:"financialYearEndDate" format:"date-time"`
	// Satellite fleet planning notes for this organization.
	FleetPlanNotes string `json:"fleetPlanNotes"`
	// Former organization ID (if this organization previously existed as another
	// organization).
	FormerOrgID string `json:"formerOrgId"`
	// Total number of FTEs in this organization.
	Ftes int64 `json:"ftes"`
	// Administrative boundaries of the first sub-national level. Level 1 is simply the
	// largest demarcation under whatever demarcation criteria has been determined by
	// the governing body. For example, this may be a state or province.
	GeoAdminLevel1 string `json:"geoAdminLevel1"`
	// Administrative boundaries of the second sub-national level. Level 2 is simply
	// the second largest demarcation under whatever demarcation criteria has been
	// determined by the governing body. For example, this may be a county or district.
	GeoAdminLevel2 string `json:"geoAdminLevel2"`
	// Administrative boundaries of the third sub-national level. Level 3 is simply the
	// third largest demarcation under whatever demarcation criteria has been
	// determined by the governing body. For example, this may be a city or township.
	GeoAdminLevel3 string `json:"geoAdminLevel3"`
	// Mass ranking for this organization.
	MassRanking int64 `json:"massRanking"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Parent organization ID of this organization if it is a child organization.
	ParentOrgID string `json:"parentOrgId"`
	// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both
	// included in the postal address of the organization.
	PostalCode string `json:"postalCode"`
	// For organizations of type CORPORATION, total annual profit as of
	// financialYearEndDate in US Dollars.
	Profit float64 `json:"profit"`
	// For organizations of type CORPORATION, total annual revenue as of
	// financialYearEndDate in US Dollars.
	Revenue float64 `json:"revenue"`
	// Revenue ranking for this organization.
	RevenueRanking int64 `json:"revenueRanking"`
	// The name of the risk manager for the organization.
	RiskManager string `json:"riskManager"`
	// Notes on the services provided by the organization.
	ServicesNotes string `json:"servicesNotes"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDOrganization        respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Address1              respjson.Field
		Address2              respjson.Field
		Address3              respjson.Field
		Broker                respjson.Field
		Ceo                   respjson.Field
		Cfo                   respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Cto                   respjson.Field
		Description           respjson.Field
		Ebitda                respjson.Field
		Email                 respjson.Field
		FinancialNotes        respjson.Field
		FinancialYearEndDate  respjson.Field
		FleetPlanNotes        respjson.Field
		FormerOrgID           respjson.Field
		Ftes                  respjson.Field
		GeoAdminLevel1        respjson.Field
		GeoAdminLevel2        respjson.Field
		GeoAdminLevel3        respjson.Field
		MassRanking           respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		ParentOrgID           respjson.Field
		PostalCode            respjson.Field
		Profit                respjson.Field
		Revenue               respjson.Field
		RevenueRanking        respjson.Field
		RiskManager           respjson.Field
		ServicesNotes         respjson.Field
		Tags                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OrganizationDetailsFull) RawJSON() string { return r.JSON.raw }
func (r *OrganizationDetailsFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OrganizationDetailsFullDataMode string

const (
	OrganizationDetailsFullDataModeReal      OrganizationDetailsFullDataMode = "REAL"
	OrganizationDetailsFullDataModeTest      OrganizationDetailsFullDataMode = "TEST"
	OrganizationDetailsFullDataModeSimulated OrganizationDetailsFullDataMode = "SIMULATED"
	OrganizationDetailsFullDataModeExercise  OrganizationDetailsFullDataMode = "EXERCISE"
)

// An organization such as a corporation, manufacturer, consortium, government,
// etc. An organization may have parent and child organizations as well as link to
// a former organization if this org previously existed as another organization.
type OrganizationFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OrganizationFullDataMode `json:"dataMode,required"`
	// Organization name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).
	Type string `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Boolean indicating if this organization is currently active.
	Active bool `json:"active"`
	// Subtype or category of the organization (e.g. Private company, stock market
	// quoted company, subsidiary, goverment department/agency, etc).
	Category string `json:"category"`
	// Country of the physical location of the organization. This value is typically
	// the ISO 3166 Alpha-2 two-character country code. However, it can also represent
	// various consortiums that do not appear in the ISO document. The code must
	// correspond to an existing country in the UDL’s country API. Call
	// udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
	// alternate code values that exist for the specified country code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Organization description.
	Description string `json:"description"`
	// Optional externally provided identifier for this row.
	ExternalID string `json:"externalId"`
	// Country of registration or ownership of the organization. This value is
	// typically the ISO 3166 Alpha-2 two-character country code, however it can also
	// represent various consortiums that do not appear in the ISO document. The code
	// must correspond to an existing country in the UDL’s country API. Call
	// udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
	// alternate code values that exist for the specified country code.
	Nationality string `json:"nationality"`
	// Read-only collection of additional OrganizationDetails by various sources for
	// this organization, ignored on create/update. These details must be created
	// separately via the /udl/organizationdetails operations.
	OrganizationDetails []OrganizationDetailsFull `json:"organizationDetails"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		Active                respjson.Field
		Category              respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Description           respjson.Field
		ExternalID            respjson.Field
		Nationality           respjson.Field
		OrganizationDetails   respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OrganizationFull) RawJSON() string { return r.JSON.raw }
func (r *OrganizationFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OrganizationFullDataMode string

const (
	OrganizationFullDataModeReal      OrganizationFullDataMode = "REAL"
	OrganizationFullDataModeTest      OrganizationFullDataMode = "TEST"
	OrganizationFullDataModeSimulated OrganizationFullDataMode = "SIMULATED"
	OrganizationFullDataModeExercise  OrganizationFullDataMode = "EXERCISE"
)

type ParamDescriptorResp struct {
	ClassificationMarking string `json:"classificationMarking"`
	Derived               bool   `json:"derived"`
	Description           string `json:"description"`
	ElemMatch             bool   `json:"elemMatch"`
	Format                string `json:"format"`
	HistQuerySupported    bool   `json:"histQuerySupported"`
	HistTupleSupported    bool   `json:"histTupleSupported"`
	Name                  string `json:"name"`
	Required              bool   `json:"required"`
	RestQuerySupported    bool   `json:"restQuerySupported"`
	RestTupleSupported    bool   `json:"restTupleSupported"`
	Type                  string `json:"type"`
	UnitOfMeasure         string `json:"unitOfMeasure"`
	UtcDate               bool   `json:"utcDate"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		Derived               respjson.Field
		Description           respjson.Field
		ElemMatch             respjson.Field
		Format                respjson.Field
		HistQuerySupported    respjson.Field
		HistTupleSupported    respjson.Field
		Name                  respjson.Field
		Required              respjson.Field
		RestQuerySupported    respjson.Field
		RestTupleSupported    respjson.Field
		Type                  respjson.Field
		UnitOfMeasure         respjson.Field
		UtcDate               respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r ParamDescriptorResp) RawJSON() string { return r.JSON.raw }
func (r *ParamDescriptorResp) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection detailing operational pathways at the Site associated with this
// SiteOperations record.
type PathwayFull struct {
	// Text defining this pathway from its constituent parts.
	PwDefinition string `json:"pwDefinition"`
	// The name of the person who made the most recent change to this Pathway data.
	PwLastChangedBy string `json:"pwLastChangedBy"`
	// The datetime of the most recent change made to this Pathway data, in ISO 8601
	// UTC format with millisecond precision.
	PwLastChangedDate time.Time `json:"pwLastChangedDate" format:"date-time"`
	// The type of paths that constitute this pathway.
	PwType string `json:"pwType"`
	// The intended use of this pathway.
	PwUsage string `json:"pwUsage"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		PwDefinition      respjson.Field
		PwLastChangedBy   respjson.Field
		PwLastChangedDate respjson.Field
		PwType            respjson.Field
		PwUsage           respjson.Field
		ExtraFields       map[string]respjson.Field
		raw               string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PathwayFull) RawJSON() string { return r.JSON.raw }
func (r *PathwayFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type RelatedDocumentFull struct {
	// List of data sources related to this document.
	DataSourceRefs []SofDataSourceRefFull `json:"dataSourceRefs"`
	// The document id of the related document.
	DocumentID string `json:"documentId"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DataSourceRefs respjson.Field
		DocumentID     respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r RelatedDocumentFull) RawJSON() string { return r.JSON.raw }
func (r *RelatedDocumentFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Details on a particular Radio Frequency (RF) band, also known as a carrier,
// which may be in use by any type of Entity for communications or operations.
type RfBandFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode RfBandFullDataMode `json:"dataMode,required"`
	// Unique identifier of the parent Entity which uses this band.
	IDEntity string `json:"idEntity,required"`
	// RF Band name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Name of the band of this RF range (e.g.
	// X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more
	// details and descriptions of each band name.
	Band string `json:"band"`
	// RF Band frequency range bandwidth in Mhz.
	Bandwidth float64 `json:"bandwidth"`
	// Angle between the half-power (-3 dB) points of the main lobe of the antenna, in
	// degrees.
	Beamwidth float64 `json:"beamwidth"`
	// Center frequency of RF frequency range, if applicable, in Mhz.
	CenterFreq float64 `json:"centerFreq"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// RF Range edge gain, in dBi.
	EdgeGain float64 `json:"edgeGain"`
	// EIRP is defined as the RMS power input in decibel watts required to a lossless
	// half-wave dipole antenna to give the same maximum power density far from the
	// antenna as the actual transmitter. It is equal to the power input to the
	// transmitter's antenna multiplied by the antenna gain relative to a half-wave
	// dipole. Effective radiated power and effective isotropic radiated power both
	// measure the amount of power a radio transmitter and antenna (or other source of
	// electromagnetic waves) radiates in a specific direction: in the direction of
	// maximum signal strength (the "main lobe") of its radiation pattern.
	Eirp float64 `json:"eirp"`
	// Effective Radiated Power (ERP) is the total power in decibel watts radiated by
	// an actual antenna relative to a half-wave dipole rather than a theoretical
	// isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an
	// isotropic antenna. EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64\*ERP(W).
	// Effective radiated power and effective isotropic radiated power both measure the
	// amount of power a radio transmitter and antenna (or other source of
	// electromagnetic waves) radiates in a specific direction: in the direction of
	// maximum signal strength (the "main lobe") of its radiation pattern.
	Erp float64 `json:"erp"`
	// End/maximum of transmit RF frequency range, if applicable, in Mhz.
	FreqMax float64 `json:"freqMax"`
	// Start/minimum of transmit RF frequency range, if applicable, in Mhz.
	FreqMin float64 `json:"freqMin"`
	// RF Band mode (e.g. TX, RX).
	//
	// Any of "TX", "RX".
	Mode RfBandFullMode `json:"mode"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// RF Range maximum gain, in dBi.
	PeakGain float64 `json:"peakGain"`
	// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to
	// Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L -
	// (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface,
	// R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's
	// surface.
	//
	// Any of "H", "V", "R", "L".
	Polarization RfBandFullPolarization `json:"polarization"`
	// Purpose or use of the RF Band -- COMM = communications, TTC =
	// Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
	//
	// Any of "COMM", "TTC", "OPS", "OTHER".
	Purpose RfBandFullPurpose `json:"purpose"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDEntity              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Band                  respjson.Field
		Bandwidth             respjson.Field
		Beamwidth             respjson.Field
		CenterFreq            respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EdgeGain              respjson.Field
		Eirp                  respjson.Field
		Erp                   respjson.Field
		FreqMax               respjson.Field
		FreqMin               respjson.Field
		Mode                  respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PeakGain              respjson.Field
		Polarization          respjson.Field
		Purpose               respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r RfBandFull) RawJSON() string { return r.JSON.raw }
func (r *RfBandFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type RfBandFullDataMode string

const (
	RfBandFullDataModeReal      RfBandFullDataMode = "REAL"
	RfBandFullDataModeTest      RfBandFullDataMode = "TEST"
	RfBandFullDataModeSimulated RfBandFullDataMode = "SIMULATED"
	RfBandFullDataModeExercise  RfBandFullDataMode = "EXERCISE"
)

// RF Band mode (e.g. TX, RX).
type RfBandFullMode string

const (
	RfBandFullModeTx RfBandFullMode = "TX"
	RfBandFullModeRx RfBandFullMode = "RX"
)

// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to
// Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L -
// (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface,
// R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's
// surface.
type RfBandFullPolarization string

const (
	RfBandFullPolarizationH RfBandFullPolarization = "H"
	RfBandFullPolarizationV RfBandFullPolarization = "V"
	RfBandFullPolarizationR RfBandFullPolarization = "R"
	RfBandFullPolarizationL RfBandFullPolarization = "L"
)

// Purpose or use of the RF Band -- COMM = communications, TTC =
// Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
type RfBandFullPurpose string

const (
	RfBandFullPurposeComm  RfBandFullPurpose = "COMM"
	RfBandFullPurposeTtc   RfBandFullPurpose = "TTC"
	RfBandFullPurposeOps   RfBandFullPurpose = "OPS"
	RfBandFullPurposeOther RfBandFullPurpose = "OTHER"
)

type SofDataSourceRefFull struct {
	// Data source id.
	DataSourceID string `json:"dataSourceId"`
	// end position.
	EndPosition string `json:"endPosition"`
	// paragraph number.
	ParagraphNumber string `json:"paragraphNumber"`
	// sentence number.
	SentenceNumber string `json:"sentenceNumber"`
	// start position.
	StartPosition string `json:"startPosition"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DataSourceID    respjson.Field
		EndPosition     respjson.Field
		ParagraphNumber respjson.Field
		SentenceNumber  respjson.Field
		StartPosition   respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SofDataSourceRefFull) RawJSON() string { return r.JSON.raw }
func (r *SofDataSourceRefFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Model representation of Information on spacecraft SolarArrayDetails. A
// SolarArray may have multiple details records compiled by various sources.
type SolarArrayDetailsFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode SolarArrayDetailsFullDataMode `json:"dataMode,required"`
	// Unique identifier of the parent SolarArray.
	IDSolarArray string `json:"idSolarArray,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Solar Array area in square meters.
	Area float64 `json:"area"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Solar array description/notes.
	Description string `json:"description"`
	// Solar array junction technology (e.g. Triple).
	JunctionTechnology string `json:"junctionTechnology"`
	// An organization such as a corporation, manufacturer, consortium, government,
	// etc. An organization may have parent and child organizations as well as link to
	// a former organization if this org previously existed as another organization.
	ManufacturerOrg OrganizationFull `json:"manufacturerOrg"`
	// Unique identifier of the organization that manufactures the solar array.
	ManufacturerOrgID string `json:"manufacturerOrgId"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Solar Array span in meters.
	Span float64 `json:"span"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Solar array technology (e.g. Ga-As).
	Technology string `json:"technology"`
	// Type of solar array (e.g. U Shaped).
	Type string `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDSolarArray          respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Area                  respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Description           respjson.Field
		JunctionTechnology    respjson.Field
		ManufacturerOrg       respjson.Field
		ManufacturerOrgID     respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Span                  respjson.Field
		Tags                  respjson.Field
		Technology            respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SolarArrayDetailsFull) RawJSON() string { return r.JSON.raw }
func (r *SolarArrayDetailsFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type SolarArrayDetailsFullDataMode string

const (
	SolarArrayDetailsFullDataModeReal      SolarArrayDetailsFullDataMode = "REAL"
	SolarArrayDetailsFullDataModeTest      SolarArrayDetailsFullDataMode = "TEST"
	SolarArrayDetailsFullDataModeSimulated SolarArrayDetailsFullDataMode = "SIMULATED"
	SolarArrayDetailsFullDataModeExercise  SolarArrayDetailsFullDataMode = "EXERCISE"
)

// Model representation of information on on-orbit/spacecraft solar arrays. A
// spacecraft may have multiple solar arrays and each solar array can have multiple
// 'details' records compiled by different sources.
type SolarArrayFull struct {
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode SolarArrayFullDataMode `json:"dataMode,required"`
	// Solar Array name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Read-only collection of additional SolarArrayDetails by various sources for this
	// organization, ignored on create/update. These details must be created separately
	// via the /udl/solararraydetails operations.
	SolarArrayDetails []SolarArrayDetailsFull `json:"solarArrayDetails"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DataMode          respjson.Field
		Name              respjson.Field
		Source            respjson.Field
		ID                respjson.Field
		CreatedAt         respjson.Field
		CreatedBy         respjson.Field
		Origin            respjson.Field
		OrigNetwork       respjson.Field
		SolarArrayDetails respjson.Field
		UpdatedAt         respjson.Field
		UpdatedBy         respjson.Field
		ExtraFields       map[string]respjson.Field
		raw               string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SolarArrayFull) RawJSON() string { return r.JSON.raw }
func (r *SolarArrayFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type SolarArrayFullDataMode string

const (
	SolarArrayFullDataModeReal      SolarArrayFullDataMode = "REAL"
	SolarArrayFullDataModeTest      SolarArrayFullDataMode = "TEST"
	SolarArrayFullDataModeSimulated SolarArrayFullDataMode = "SIMULATED"
	SolarArrayFullDataModeExercise  SolarArrayFullDataMode = "EXERCISE"
)

// SortiePPR is a regulatory requirement where operators must obtain permissions to
// full operational access to a runway, taxiway, or airport service.
type SortiePprFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode SortiePprFullDataMode `json:"dataMode,required"`
	// Unique identifier of the Aircraft Sortie associated with this prior permission
	// required (PPR) record.
	IDSortie string `json:"idSortie,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC
	// format with millisecond precision.
	EndTime time.Time `json:"endTime" format:"date-time"`
	// Optional ID from external systems. This field has no meaning within UDL and is
	// provided as a convenience for systems that require tracking of an internal
	// system generated ID.
	ExternalID string `json:"externalId"`
	// Identifier of the prior permission required (PPR) grantor.
	Grantor string `json:"grantor"`
	// The prior permission required (PPR) number issued by the airfield for a sortie.
	Number string `json:"number"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Remarks concerning the prior permission required (PPR) for a sortie.
	Remarks string `json:"remarks"`
	// The username of the prior permission required (PPR) requestor.
	Requestor string `json:"requestor"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC
	// format with millisecond precision.
	StartTime time.Time `json:"startTime" format:"date-time"`
	// Type of prior permission required (PPR) for a sortie (M - Military or C -
	// Civilian). Enum: [M, C].
	//
	// Any of "M", "C".
	Type SortiePprFullType `json:"type"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDSortie              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EndTime               respjson.Field
		ExternalID            respjson.Field
		Grantor               respjson.Field
		Number                respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Remarks               respjson.Field
		Requestor             respjson.Field
		SourceDl              respjson.Field
		StartTime             respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SortiePprFull) RawJSON() string { return r.JSON.raw }
func (r *SortiePprFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type SortiePprFullDataMode string

const (
	SortiePprFullDataModeReal      SortiePprFullDataMode = "REAL"
	SortiePprFullDataModeTest      SortiePprFullDataMode = "TEST"
	SortiePprFullDataModeSimulated SortiePprFullDataMode = "SIMULATED"
	SortiePprFullDataModeExercise  SortiePprFullDataMode = "EXERCISE"
)

// Type of prior permission required (PPR) for a sortie (M - Military or C -
// Civilian). Enum: [M, C].
type SortiePprFullType string

const (
	SortiePprFullTypeM SortiePprFullType = "M"
	SortiePprFullTypeC SortiePprFullType = "C"
)

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
type StateVectorFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode StateVectorFullDataMode `json:"dataMode,required"`
	// Time of validity for state vector in ISO 8601 UTC datetime format, with
	// microsecond precision.
	Epoch time.Time `json:"epoch,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// The actual time span used for the OD of the object, expressed in days.
	ActualOdSpan float64 `json:"actualODSpan"`
	// Optional algorithm used to produce this record.
	Algorithm string `json:"algorithm"`
	// The reference frame of the alternate1 (Alt1) cartesian orbital state.
	Alt1ReferenceFrame string `json:"alt1ReferenceFrame"`
	// The reference frame of the alternate2 (Alt2) cartesian orbital state.
	Alt2ReferenceFrame string `json:"alt2ReferenceFrame"`
	// The actual area of the object at it's largest cross-section, expressed in
	// meters^2.
	Area float64 `json:"area"`
	// First derivative of drag/ballistic coefficient (m2/kg-s).
	BDot float64 `json:"bDot"`
	// Model parameter value for center of mass offset (m).
	CmOffset float64 `json:"cmOffset"`
	// Covariance matrix, in kilometer and second based units, in the specified
	// covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
	// The array values (1-21) represent the lower triangular half of the
	// position-velocity covariance matrix. The size of the covariance matrix is
	// dynamic, depending on whether the covariance for position only or position &
	// velocity. The covariance elements are position dependent within the array with
	// values ordered as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
	//
	// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
	//
	// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
	//
	// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
	//
	// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
	//
	// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
	//
	// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
	//
	// The cov array should contain only the lower left triangle values from top left
	// down to bottom right, in order.
	//
	// If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
	// matrix can be extended with the following order of elements:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
	//
	// DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
	//
	// SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
	//
	// THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
	Cov []float64 `json:"cov"`
	// The method used to generate the covariance during the orbit determination (OD)
	// that produced the state vector, or whether an arbitrary, non-calculated default
	// value was used (CALCULATED, DEFAULT).
	CovMethod string `json:"covMethod"`
	// The reference frame of the covariance matrix elements. If the covReferenceFrame
	// is null it is assumed to be J2000.
	//
	// Any of "J2000", "UVW", "EFG/TDR", "TEME", "GCRF".
	CovReferenceFrame StateVectorFullCovReferenceFrame `json:"covReferenceFrame"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// The effective area of the object exposed to atmospheric drag, expressed in
	// meters^2.
	DragArea float64 `json:"dragArea"`
	// Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
	DragCoeff float64 `json:"dragCoeff"`
	// The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
	// NONE, etc.).
	DragModel string `json:"dragModel"`
	// Model parameter value for energy dissipation rate (EDR) (w/kg).
	Edr float64 `json:"edr"`
	// Start time at which this state vector was the 'current' state vector for its
	// satellite.
	EffectiveFrom time.Time `json:"effectiveFrom" format:"date-time"`
	// End time at which this state vector was no longer the 'current' state vector for
	// its satellite.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// The covariance matrix values represent the lower triangular half of the
	// covariance matrix in terms of equinoctial elements.&nbsp; The size of the
	// covariance matrix is dynamic.&nbsp; The values are outputted in order across
	// each row, i.e.:
	//
	// 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
	//
	// 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// The ordering of values is as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
	// Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
	// B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
	//
	// Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
	//
	// Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
	//
	// L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
	//
	// N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
	//
	// Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
	// 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
	//
	// Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
	// 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
	//
	// B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
	// 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
	//
	// BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
	// 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
	//
	// AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
	// 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
	//
	// T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
	// 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
	// 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
	//
	// C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
	// 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
	// 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
	//
	// C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
	// 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
	// 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
	//
	// :
	//
	// :
	//
	// where C1, C2, etc, are the "consider parameters" that may be added to the
	// covariance matrix.&nbsp; The covariance matrix will be as large as the last
	// element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
	// elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
	// BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
	// will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
	// only the lower left triangle values from top left down to bottom right, in
	// order.
	EqCov []float64 `json:"eqCov"`
	// Integrator error control.
	ErrorControl float64 `json:"errorControl"`
	// Boolean indicating use of fixed step size for this vector.
	FixedStep bool `json:"fixedStep"`
	// Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
	// GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
	// 24Z,24T.
	GeopotentialModel string `json:"geopotentialModel"`
	// Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
	Iau1980Terms int64 `json:"iau1980Terms"`
	// Unique identifier of the satellite on-orbit object, if correlated. For the
	// public catalog, the idOnOrbit is typically the satellite number as a string, but
	// may be a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the OD solution record that produced this state vector.
	// This ID can be used to obtain additional information on an OrbitDetermination
	// object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
	// example, the OrbitDetermination with idOrbitDetermination = abc would be queries
	// as /udl/orbitdetermination/abc.
	IDOrbitDetermination string `json:"idOrbitDetermination"`
	// Unique identifier of the record, auto-generated by the system.
	IDStateVector string `json:"idStateVector"`
	// Integrator Mode.
	IntegratorMode string `json:"integratorMode"`
	// Boolean indicating use of in-track thrust perturbations for this vector.
	InTrackThrust bool `json:"inTrackThrust"`
	// The end of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObEnd time.Time `json:"lastObEnd" format:"date-time"`
	// The start of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObStart time.Time `json:"lastObStart" format:"date-time"`
	// Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
	// second is not known, the time of the previous leap second is used.
	LeapSecondTime time.Time `json:"leapSecondTime" format:"date-time"`
	// Boolean indicating use of lunar/solar perturbations for this vector.
	LunarSolar bool `json:"lunarSolar"`
	// The mass of the object, in kilograms.
	Mass float64 `json:"mass"`
	// The number of observations available for the OD of the object.
	ObsAvailable int64 `json:"obsAvailable"`
	// The number of observations accepted for the OD of the object.
	ObsUsed int64 `json:"obsUsed"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by state vector source to indicate the target
	// onorbit object of this state vector. This may be an internal identifier and not
	// necessarily map to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
	Partials string `json:"partials"`
	// The pedigree of state vector, or methods used for its generation to include
	// state update/orbit determination, propagation from another state, or a state
	// from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
	// CONJUNCTION, FLIGHT_PLAN).
	Pedigree string `json:"pedigree"`
	// Polar Wander Motion X (arc seconds).
	PolarMotionX float64 `json:"polarMotionX"`
	// Polar Wander Motion Y (arc seconds).
	PolarMotionY float64 `json:"polarMotionY"`
	// One sigma position uncertainty, in kilometers.
	PosUnc float64 `json:"posUnc"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The recommended OD time span calculated for the object, expressed in days.
	RecOdSpan float64 `json:"recODSpan"`
	// The reference frame of the cartesian orbital states. If the referenceFrame is
	// null it is assumed to be J2000.
	//
	// Any of "J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF".
	ReferenceFrame StateVectorFullReferenceFrame `json:"referenceFrame"`
	// The percentage of residuals accepted in the OD of the object.
	ResidualsAcc float64 `json:"residualsAcc"`
	// Epoch revolution number.
	RevNo int64 `json:"revNo"`
	// The Weighted Root Mean Squared (RMS) of the differential correction on the
	// target object that produced this vector. WRMS is a quality indicator of the
	// state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
	// Least Squares (BLS) processes.
	Rms float64 `json:"rms"`
	// Satellite/Catalog number of the target OnOrbit object.
	SatNo int64 `json:"satNo"`
	// Array containing the standard deviation of error in target object position, U, V
	// and W direction respectively (km).
	SigmaPosUvw []float64 `json:"sigmaPosUVW"`
	// Array containing the standard deviation of error in target object velocity, U, V
	// and W direction respectively (km/sec).
	SigmaVelUvw []float64 `json:"sigmaVelUVW"`
	// Average solar flux geomagnetic index.
	SolarFluxApAvg float64 `json:"solarFluxAPAvg"`
	// F10 (10.7 cm) solar flux value.
	SolarFluxF10 float64 `json:"solarFluxF10"`
	// F10 (10.7 cm) solar flux 81-day average value.
	SolarFluxF10Avg float64 `json:"solarFluxF10Avg"`
	// Boolean indicating use of solar radiation pressure perturbations for this
	// vector.
	SolarRadPress bool `json:"solarRadPress"`
	// Area-to-mass ratio coefficient for solar radiation pressure.
	SolarRadPressCoeff float64 `json:"solarRadPressCoeff"`
	// Boolean indicating use of solid earth tide perturbations for this vector.
	SolidEarthTides bool `json:"solidEarthTides"`
	// Optional array of UDL data (observation) UUIDs used to build this state vector.
	// See the associated sourcedDataTypes array for the specific types of observations
	// for the positionally corresponding UUIDs in this array (the two arrays must
	// match in size).
	SourcedData []string `json:"sourcedData"`
	// Optional array of UDL observation data types used to build this state vector
	// (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
	// UUIDs of observations for the positionally corresponding data types in this
	// array (the two arrays must match in size).
	//
	// Any of "EO", "RADAR", "RF", "DOA", "ELSET", "SV".
	SourcedDataTypes []string `json:"sourcedDataTypes"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The effective area of the object exposed to solar radiation pressure, expressed
	// in meters^2.
	SrpArea float64 `json:"srpArea"`
	// Integrator step mode (AUTO, TIME, or S).
	StepMode string `json:"stepMode"`
	// Initial integration step size (seconds).
	StepSize float64 `json:"stepSize"`
	// Initial step size selection (AUTO or MANUAL).
	StepSizeSelection string `json:"stepSizeSelection"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
	// in seconds.
	TaiUtc float64 `json:"taiUtc"`
	// Model parameter value for thrust acceleration (m/s2).
	ThrustAccel float64 `json:"thrustAccel"`
	// The number of sensor tracks available for the OD of the object.
	TracksAvail int64 `json:"tracksAvail"`
	// The number of sensor tracks accepted for the OD of the object.
	TracksUsed int64 `json:"tracksUsed"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Boolean indicating this state vector was unable to be correlated to a known
	// object. This flag should only be set to true by data providers after an attempt
	// to correlate to an OnOrbit object was made and failed. If unable to correlate,
	// the 'origObjectId' field may be populated with an internal data provider
	// specific identifier.
	Uct bool `json:"uct"`
	// Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
	Ut1Rate float64 `json:"ut1Rate"`
	// Universal Time-1 (UT1) minus UTC offset, in seconds.
	Ut1Utc float64 `json:"ut1Utc"`
	// One sigma velocity uncertainty, in kilometers/second.
	VelUnc float64 `json:"velUnc"`
	// Cartesian X acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xaccel float64 `json:"xaccel"`
	// Cartesian X position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xpos float64 `json:"xpos"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt1 float64 `json:"xposAlt1"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt2 float64 `json:"xposAlt2"`
	// Cartesian X velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xvel float64 `json:"xvel"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt1 float64 `json:"xvelAlt1"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt2 float64 `json:"xvelAlt2"`
	// Cartesian Y acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yaccel float64 `json:"yaccel"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Ypos float64 `json:"ypos"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt1 float64 `json:"yposAlt1"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt2 float64 `json:"yposAlt2"`
	// Cartesian Y velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yvel float64 `json:"yvel"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt1 float64 `json:"yvelAlt1"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt2 float64 `json:"yvelAlt2"`
	// Cartesian Z acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zaccel float64 `json:"zaccel"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zpos float64 `json:"zpos"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt1 float64 `json:"zposAlt1"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt2 float64 `json:"zposAlt2"`
	// Cartesian Z velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zvel float64 `json:"zvel"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt1 float64 `json:"zvelAlt1"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt2 float64 `json:"zvelAlt2"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Epoch                 respjson.Field
		Source                respjson.Field
		ActualOdSpan          respjson.Field
		Algorithm             respjson.Field
		Alt1ReferenceFrame    respjson.Field
		Alt2ReferenceFrame    respjson.Field
		Area                  respjson.Field
		BDot                  respjson.Field
		CmOffset              respjson.Field
		Cov                   respjson.Field
		CovMethod             respjson.Field
		CovReferenceFrame     respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Descriptor            respjson.Field
		DragArea              respjson.Field
		DragCoeff             respjson.Field
		DragModel             respjson.Field
		Edr                   respjson.Field
		EffectiveFrom         respjson.Field
		EffectiveUntil        respjson.Field
		EqCov                 respjson.Field
		ErrorControl          respjson.Field
		FixedStep             respjson.Field
		GeopotentialModel     respjson.Field
		Iau1980Terms          respjson.Field
		IDOnOrbit             respjson.Field
		IDOrbitDetermination  respjson.Field
		IDStateVector         respjson.Field
		IntegratorMode        respjson.Field
		InTrackThrust         respjson.Field
		LastObEnd             respjson.Field
		LastObStart           respjson.Field
		LeapSecondTime        respjson.Field
		LunarSolar            respjson.Field
		Mass                  respjson.Field
		ObsAvailable          respjson.Field
		ObsUsed               respjson.Field
		OnOrbit               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		Partials              respjson.Field
		Pedigree              respjson.Field
		PolarMotionX          respjson.Field
		PolarMotionY          respjson.Field
		PosUnc                respjson.Field
		RawFileUri            respjson.Field
		RecOdSpan             respjson.Field
		ReferenceFrame        respjson.Field
		ResidualsAcc          respjson.Field
		RevNo                 respjson.Field
		Rms                   respjson.Field
		SatNo                 respjson.Field
		SigmaPosUvw           respjson.Field
		SigmaVelUvw           respjson.Field
		SolarFluxApAvg        respjson.Field
		SolarFluxF10          respjson.Field
		SolarFluxF10Avg       respjson.Field
		SolarRadPress         respjson.Field
		SolarRadPressCoeff    respjson.Field
		SolidEarthTides       respjson.Field
		SourcedData           respjson.Field
		SourcedDataTypes      respjson.Field
		SourceDl              respjson.Field
		SrpArea               respjson.Field
		StepMode              respjson.Field
		StepSize              respjson.Field
		StepSizeSelection     respjson.Field
		Tags                  respjson.Field
		TaiUtc                respjson.Field
		ThrustAccel           respjson.Field
		TracksAvail           respjson.Field
		TracksUsed            respjson.Field
		TransactionID         respjson.Field
		Uct                   respjson.Field
		Ut1Rate               respjson.Field
		Ut1Utc                respjson.Field
		VelUnc                respjson.Field
		Xaccel                respjson.Field
		Xpos                  respjson.Field
		XposAlt1              respjson.Field
		XposAlt2              respjson.Field
		Xvel                  respjson.Field
		XvelAlt1              respjson.Field
		XvelAlt2              respjson.Field
		Yaccel                respjson.Field
		Ypos                  respjson.Field
		YposAlt1              respjson.Field
		YposAlt2              respjson.Field
		Yvel                  respjson.Field
		YvelAlt1              respjson.Field
		YvelAlt2              respjson.Field
		Zaccel                respjson.Field
		Zpos                  respjson.Field
		ZposAlt1              respjson.Field
		ZposAlt2              respjson.Field
		Zvel                  respjson.Field
		ZvelAlt1              respjson.Field
		ZvelAlt2              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r StateVectorFull) RawJSON() string { return r.JSON.raw }
func (r *StateVectorFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type StateVectorFullDataMode string

const (
	StateVectorFullDataModeReal      StateVectorFullDataMode = "REAL"
	StateVectorFullDataModeTest      StateVectorFullDataMode = "TEST"
	StateVectorFullDataModeSimulated StateVectorFullDataMode = "SIMULATED"
	StateVectorFullDataModeExercise  StateVectorFullDataMode = "EXERCISE"
)

// The reference frame of the covariance matrix elements. If the covReferenceFrame
// is null it is assumed to be J2000.
type StateVectorFullCovReferenceFrame string

const (
	StateVectorFullCovReferenceFrameJ2000  StateVectorFullCovReferenceFrame = "J2000"
	StateVectorFullCovReferenceFrameUvw    StateVectorFullCovReferenceFrame = "UVW"
	StateVectorFullCovReferenceFrameEfgTdr StateVectorFullCovReferenceFrame = "EFG/TDR"
	StateVectorFullCovReferenceFrameTeme   StateVectorFullCovReferenceFrame = "TEME"
	StateVectorFullCovReferenceFrameGcrf   StateVectorFullCovReferenceFrame = "GCRF"
)

// The reference frame of the cartesian orbital states. If the referenceFrame is
// null it is assumed to be J2000.
type StateVectorFullReferenceFrame string

const (
	StateVectorFullReferenceFrameJ2000   StateVectorFullReferenceFrame = "J2000"
	StateVectorFullReferenceFrameEfgTdr  StateVectorFullReferenceFrame = "EFG/TDR"
	StateVectorFullReferenceFrameEcrEcef StateVectorFullReferenceFrame = "ECR/ECEF"
	StateVectorFullReferenceFrameTeme    StateVectorFullReferenceFrame = "TEME"
	StateVectorFullReferenceFrameItrf    StateVectorFullReferenceFrame = "ITRF"
	StateVectorFullReferenceFrameGcrf    StateVectorFullReferenceFrame = "GCRF"
)

// Status for a particular Entity. An entity may have multiple status records
// collected by various sources.
type StatusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode StatusFullDataMode `json:"dataMode,required"`
	// Unique identifier of the parent entity.
	IDEntity string `json:"idEntity,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The declassification date of this data, in ISO 8601 UTC format.
	DeclassificationDate time.Time `json:"declassificationDate" format:"date-time"`
	// Declassification string of this data.
	DeclassificationString string `json:"declassificationString"`
	// The sources or SCG references from which the classification of this data is
	// derived.
	DerivedFrom string `json:"derivedFrom"`
	// Comments describing the status creation and or updates to an entity.
	Notes string `json:"notes"`
	// Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
	//
	// Any of "FMC", "NMC", "PMC", "UNK".
	OpsCap StatusFullOpsCap `json:"opsCap"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF
	// ACTIVE, STANDBY).
	//
	// Any of "UNKNOWN", "DEAD", "ACTIVE", "RF ACTIVE", "STANDBY".
	State               StatusFullState `json:"state"`
	SubStatusCollection []SubStatusFull `json:"subStatusCollection"`
	// System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
	//
	// Any of "FMC", "NMC", "PMC", "UNK".
	SysCap StatusFullSysCap `json:"sysCap"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking  respjson.Field
		DataMode               respjson.Field
		IDEntity               respjson.Field
		Source                 respjson.Field
		ID                     respjson.Field
		CreatedAt              respjson.Field
		CreatedBy              respjson.Field
		DeclassificationDate   respjson.Field
		DeclassificationString respjson.Field
		DerivedFrom            respjson.Field
		Notes                  respjson.Field
		OpsCap                 respjson.Field
		Origin                 respjson.Field
		OrigNetwork            respjson.Field
		State                  respjson.Field
		SubStatusCollection    respjson.Field
		SysCap                 respjson.Field
		UpdatedAt              respjson.Field
		UpdatedBy              respjson.Field
		ExtraFields            map[string]respjson.Field
		raw                    string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r StatusFull) RawJSON() string { return r.JSON.raw }
func (r *StatusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type StatusFullDataMode string

const (
	StatusFullDataModeReal      StatusFullDataMode = "REAL"
	StatusFullDataModeTest      StatusFullDataMode = "TEST"
	StatusFullDataModeSimulated StatusFullDataMode = "SIMULATED"
	StatusFullDataModeExercise  StatusFullDataMode = "EXERCISE"
)

// Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
type StatusFullOpsCap string

const (
	StatusFullOpsCapFmc StatusFullOpsCap = "FMC"
	StatusFullOpsCapNmc StatusFullOpsCap = "NMC"
	StatusFullOpsCapPmc StatusFullOpsCap = "PMC"
	StatusFullOpsCapUnk StatusFullOpsCap = "UNK"
)

// Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF
// ACTIVE, STANDBY).
type StatusFullState string

const (
	StatusFullStateUnknown  StatusFullState = "UNKNOWN"
	StatusFullStateDead     StatusFullState = "DEAD"
	StatusFullStateActive   StatusFullState = "ACTIVE"
	StatusFullStateRfActive StatusFullState = "RF ACTIVE"
	StatusFullStateStandby  StatusFullState = "STANDBY"
)

// System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
type StatusFullSysCap string

const (
	StatusFullSysCapFmc StatusFullSysCap = "FMC"
	StatusFullSysCapNmc StatusFullSysCap = "NMC"
	StatusFullSysCapPmc StatusFullSysCap = "PMC"
	StatusFullSysCapUnk StatusFullSysCap = "UNK"
)

// Additional sub-system or capability status for the parent entity.
type SubStatusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode SubStatusFullDataMode `json:"dataMode,required"`
	// Descriptions and/or comments associated with the sub-status.
	Notes string `json:"notes,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
	//
	// Any of "FMC", "NMC", "PMC", "UNK".
	Status SubStatusFullStatus `json:"status,required"`
	// Id of the parent status.
	StatusID string `json:"statusId,required"`
	// Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
	//
	// Any of "mwCap", "ssCap", "mdCap".
	Type SubStatusFullType `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Notes                 respjson.Field
		Source                respjson.Field
		Status                respjson.Field
		StatusID              respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r SubStatusFull) RawJSON() string { return r.JSON.raw }
func (r *SubStatusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type SubStatusFullDataMode string

const (
	SubStatusFullDataModeReal      SubStatusFullDataMode = "REAL"
	SubStatusFullDataModeTest      SubStatusFullDataMode = "TEST"
	SubStatusFullDataModeSimulated SubStatusFullDataMode = "SIMULATED"
	SubStatusFullDataModeExercise  SubStatusFullDataMode = "EXERCISE"
)

// Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
type SubStatusFullStatus string

const (
	SubStatusFullStatusFmc SubStatusFullStatus = "FMC"
	SubStatusFullStatusNmc SubStatusFullStatus = "NMC"
	SubStatusFullStatusPmc SubStatusFullStatus = "PMC"
	SubStatusFullStatusUnk SubStatusFullStatus = "UNK"
)

// Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
type SubStatusFullType string

const (
	SubStatusFullTypeMwCap SubStatusFullType = "mwCap"
	SubStatusFullTypeSSCap SubStatusFullType = "ssCap"
	SubStatusFullTypeMdCap SubStatusFullType = "mdCap"
)

// Collection documenting operational waivers that have been issued for the Site
// associated with this record.
type WaiverFull struct {
	// The expiration date of this waiver, in ISO8601 UTC format with millisecond
	// precision.
	ExpirationDate time.Time `json:"expirationDate" format:"date-time"`
	// Boolean indicating whether or not this waiver has expired.
	HasExpired bool `json:"hasExpired"`
	// The issue date of this waiver, in ISO8601 UTC format with millisecond precision.
	IssueDate time.Time `json:"issueDate" format:"date-time"`
	// The name of the person who issued this waiver.
	IssuerName string `json:"issuerName"`
	// The name of the person requesting this waiver.
	RequesterName string `json:"requesterName"`
	// The phone number of the person requesting this waiver.
	RequesterPhoneNumber string `json:"requesterPhoneNumber"`
	// The unit requesting this waiver.
	RequestingUnit string `json:"requestingUnit"`
	// Description of the entities to which this waiver applies.
	WaiverAppliesTo string `json:"waiverAppliesTo"`
	// The description of this waiver.
	WaiverDescription string `json:"waiverDescription"`
	// The name of the person who made the most recent change to this Waiver data.
	WaiverLastChangedBy string `json:"waiverLastChangedBy"`
	// The datetime of the most recent change made to this waiver data, in ISO8601 UTC
	// format with millisecond precision.
	WaiverLastChangedDate time.Time `json:"waiverLastChangedDate" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ExpirationDate        respjson.Field
		HasExpired            respjson.Field
		IssueDate             respjson.Field
		IssuerName            respjson.Field
		RequesterName         respjson.Field
		RequesterPhoneNumber  respjson.Field
		RequestingUnit        respjson.Field
		WaiverAppliesTo       respjson.Field
		WaiverDescription     respjson.Field
		WaiverLastChangedBy   respjson.Field
		WaiverLastChangedDate respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r WaiverFull) RawJSON() string { return r.JSON.raw }
func (r *WaiverFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

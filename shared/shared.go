// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package shared

import (
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/respjson"
)

// aliased to make [param.APIUnion] private when embedding
type paramUnion = param.APIUnion

// aliased to make [param.APIObject] private when embedding
type paramObj = param.APIObject

// The information in an Air Transport Mission contains unique identification,
// description of the mission objective, aircraft and crew assignments, mission
// alias, embarkation/debarkation cargo locations, priority, and other mission
// characteristics.
type AirTransportMissionFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AirTransportMissionFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The Air Battle Plan used to coordinate and integrate air assets for this
	// mission.
	Abp string `json:"abp"`
	// The Aircraft Sortie Records linked to this mission. Do not set this field to
	// send data to the UDL. This field is set by the UDL when returning full Air
	// Transport Mission records.
	AircraftSorties []unifieddatalibrary.AircraftsortieFull `json:"aircraftSorties"`
	// Mission alias.
	Alias string `json:"alias"`
	// The unit the mission is allocated to.
	AllocatedUnit string `json:"allocatedUnit"`
	// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces
	// (MAF) Encode/Decode procedures.
	AmcMissionID string `json:"amcMissionId"`
	// The Aircraft and Personnel Automated Clearance System (APACS) system identifier
	// used to process and approve clearance requests.
	ApacsID string `json:"apacsId"`
	// The call sign assigned to this mission according to the Air Tasking Order (ATO).
	AtoCallSign string `json:"atoCallSign"`
	// The mission number according to the Air Tasking Order (ATO).
	AtoMissionID string `json:"atoMissionId"`
	// The call sign for this mission.
	CallSign string `json:"callSign"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Flag indicating this is a close watch mission.
	Cw bool `json:"cw"`
	// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft
	// clearance requests.
	DipWorksheetName string `json:"dipWorksheetName"`
	// The International Civil Aviation Organization (ICAO) site code of first cargo
	// pick up.
	FirstPickUp string `json:"firstPickUp"`
	// Global Decision Support System (GDSS) mission unique identifier.
	GdssMissionID string `json:"gdssMissionId"`
	// Collection of Hazardous Material information planned to be associated with this
	// Air Transport Mission.
	HazMat []AirTransportMissionFullHazMat `json:"hazMat"`
	// Highest Joint Chiefs of Staff priority of this mission.
	JcsPriority string `json:"jcsPriority"`
	// The International Civil Aviation Organization (ICAO) site code of last cargo
	// drop off.
	LastDropOff string `json:"lastDropOff"`
	// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
	LoadCategoryType string `json:"loadCategoryType"`
	// Mode-1 interrogation response (mission code), indicating mission or aircraft
	// type.
	M1 string `json:"m1"`
	// Mode-2 interrogation response (military identification code).
	M2 string `json:"m2"`
	// Mode-3/A interrogation response (aircraft identification), provides a 4-digit
	// octal identification code for the aircraft, assigned by the air traffic
	// controller. Mode-3/A is shared military/civilian use.
	M3a string `json:"m3a"`
	// Numbered Air Force (NAF) organization that owns the mission.
	Naf string `json:"naf"`
	// Air Mobility Command (AMC) mission identifier of the next air transport mission.
	// Provides a method for AMC to link air transport missions together
	// chronologically for tasking and planning purposes.
	NextAmcMissionID string `json:"nextAMCMissionId"`
	// Unique identifier of the next mission provided by the originating source.
	// Provides a method for the data provider to link air transport missions together
	// chronologically for tasking and planning purposes.
	NextMissionID string `json:"nextMissionId"`
	// Designates the location responsible for mission transportation, logistics, or
	// distribution activities for an Area of Responsibility (AOR) within USTRANSCOM.
	Node string `json:"node"`
	// A description of this mission's objective.
	Objective string `json:"objective"`
	// The name of the operation that this mission supports.
	Operation string `json:"operation"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The mission identifier provided by the originating source.
	OrigMissionID string `json:"origMissionId"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Air Mobility Command (AMC) mission identifier of the previous air transport
	// mission. Provides a method for AMC to link air transport missions together
	// chronologically for tasking and planning purposes.
	PrevAmcMissionID string `json:"prevAMCMissionId"`
	// Unique identifier of the previous air transport mission provided by the
	// originating source. Provides a method for the data provider to link air
	// transport missions together chronologically for tasking and planning purposes.
	PrevMissionID string `json:"prevMissionId"`
	// A description of this mission's purpose (e.g. why this mission needs to happen,
	// what is the mission supporting, etc.).
	Purpose string `json:"purpose"`
	// Information related to the planning, load, status, and deployment or dispatch of
	// one aircraft to carry out a mission.
	Remarks []AirTransportMissionFullRemark `json:"remarks"`
	// Collection of Requirements planned to be associated with this Air Transport
	// Mission.
	Requirements []AirTransportMissionFullRequirement `json:"requirements"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The number of minutes a mission is off schedule based on the source system's
	// business rules. Positive numbers are early, negative numbers are late.
	SourceSysDeviation float64 `json:"sourceSysDeviation"`
	// Current state of the mission.
	State string `json:"state"`
	// The type of mission (e.g. SAAM, CHNL, etc.).
	Type string `json:"type"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Abp                   respjson.Field
		AircraftSorties       respjson.Field
		Alias                 respjson.Field
		AllocatedUnit         respjson.Field
		AmcMissionID          respjson.Field
		ApacsID               respjson.Field
		AtoCallSign           respjson.Field
		AtoMissionID          respjson.Field
		CallSign              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Cw                    respjson.Field
		DipWorksheetName      respjson.Field
		FirstPickUp           respjson.Field
		GdssMissionID         respjson.Field
		HazMat                respjson.Field
		JcsPriority           respjson.Field
		LastDropOff           respjson.Field
		LoadCategoryType      respjson.Field
		M1                    respjson.Field
		M2                    respjson.Field
		M3a                   respjson.Field
		Naf                   respjson.Field
		NextAmcMissionID      respjson.Field
		NextMissionID         respjson.Field
		Node                  respjson.Field
		Objective             respjson.Field
		Operation             respjson.Field
		Origin                respjson.Field
		OrigMissionID         respjson.Field
		OrigNetwork           respjson.Field
		PrevAmcMissionID      respjson.Field
		PrevMissionID         respjson.Field
		Purpose               respjson.Field
		Remarks               respjson.Field
		Requirements          respjson.Field
		SourceDl              respjson.Field
		SourceSysDeviation    respjson.Field
		State                 respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTransportMissionFull) RawJSON() string { return r.JSON.raw }
func (r *AirTransportMissionFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AirTransportMissionFullDataMode string

const (
	AirTransportMissionFullDataModeReal      AirTransportMissionFullDataMode = "REAL"
	AirTransportMissionFullDataModeTest      AirTransportMissionFullDataMode = "TEST"
	AirTransportMissionFullDataModeSimulated AirTransportMissionFullDataMode = "SIMULATED"
	AirTransportMissionFullDataModeExercise  AirTransportMissionFullDataMode = "EXERCISE"
)

// Collection of Hazardous Material information planned to be associated with this
// Air Transport Mission.
type AirTransportMissionFullHazMat struct {
	// Comma delimited list of Note IDs for Item Class Segregation groups, specific to
	// GDSS systems.
	ApplicableNotes string `json:"applicableNotes"`
	// Compatibility group code used to specify the controls for the transportation and
	// storage of hazardous materials according to the Hazardous Materials Regulations
	// issued by the U.S. Department of Transportation.
	Cgc string `json:"cgc"`
	// Comma delimited list of Note IDs for compatibility groups, specific to GDSS
	// systems.
	Cgn string `json:"cgn"`
	// Class and division of the hazardous material according to the Hazardous
	// Materials Regulations issued by the U.S. Department of Transportation.
	ClassDiv float64 `json:"classDiv"`
	// The hazMat identifier provided by the originating source.
	ExtHazMatID string `json:"extHazMatId"`
	// United Nations proper shipping name of the hazardous material according to the
	// Hazardous Materials Regulations issued by the U.S. Department of Transportation.
	ItemName string `json:"itemName"`
	// Net explosive weight of the hazardous material, in kilograms.
	NetExpWt float64 `json:"netExpWt"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// hazardous material is unloaded.
	OffIcao string `json:"offICAO"`
	// Itinerary number that identifies where the hazardous material is unloaded.
	OffItin int64 `json:"offItin"`
	// The International Civil Aviation Organization (ICAO) code of the site where the
	// hazardous material is loaded.
	OnIcao string `json:"onICAO"`
	// Itinerary number that identifies where the hazardous material is loaded.
	OnItin int64 `json:"onItin"`
	// Number of pieces of hazardous cargo.
	Pieces int64 `json:"pieces"`
	// Flag indicating if hazardous material is associated with this air transport
	// mission. Possible values are P (planned to be associated with the mission) or A
	// (actually associated with the mission). Enum: [P, A].
	Planned string `json:"planned"`
	// United Nations number or North America number that identifies hazardous
	// materials according to the Hazardous Materials Regulations issued by the U.S.
	// Department of Transportation.
	UnNum string `json:"unNum"`
	// Total weight of hazardous cargo, including non-explosive parts, in kilograms.
	Weight float64 `json:"weight"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ApplicableNotes respjson.Field
		Cgc             respjson.Field
		Cgn             respjson.Field
		ClassDiv        respjson.Field
		ExtHazMatID     respjson.Field
		ItemName        respjson.Field
		NetExpWt        respjson.Field
		OffIcao         respjson.Field
		OffItin         respjson.Field
		OnIcao          respjson.Field
		OnItin          respjson.Field
		Pieces          respjson.Field
		Planned         respjson.Field
		UnNum           respjson.Field
		Weight          respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTransportMissionFullHazMat) RawJSON() string { return r.JSON.raw }
func (r *AirTransportMissionFullHazMat) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of Remarks associated with this Air Transport Mission.
type AirTransportMissionFullRemark struct {
	// Date the remark was published, in ISO 8601 UTC format, with millisecond
	// precision.
	Date time.Time `json:"date" format:"date-time"`
	// Global Decision Support System (GDSS) remark identifier.
	GdssRemarkID string `json:"gdssRemarkId"`
	// If the remark is sortie specific, this is the number of the sortie it applies
	// to.
	ItineraryNum int64 `json:"itineraryNum"`
	// Text of the remark.
	Text string `json:"text"`
	// Remark type.
	Type string `json:"type"`
	// User who published the remark.
	User string `json:"user"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Date         respjson.Field
		GdssRemarkID respjson.Field
		ItineraryNum respjson.Field
		Text         respjson.Field
		Type         respjson.Field
		User         respjson.Field
		ExtraFields  map[string]respjson.Field
		raw          string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTransportMissionFullRemark) RawJSON() string { return r.JSON.raw }
func (r *AirTransportMissionFullRemark) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of Requirements planned to be associated with this Air Transport
// Mission.
type AirTransportMissionFullRequirement struct {
	// Total weight of the bulk cargo, in kilograms.
	BulkWeight float64 `json:"bulkWeight"`
	// Earliest available date the cargo can be picked up, in ISO 8601 UTC format with
	// millisecond precision.
	Ead time.Time `json:"ead" format:"date-time"`
	// Global Decision Support System (GDSS) mission requirement identifier.
	GdssReqID string `json:"gdssReqId"`
	// Latest available date the cargo may be delivered, in ISO 8601 UTC format with
	// millisecond precision.
	Lad time.Time `json:"lad" format:"date-time"`
	// Number of ambulatory patients tasked for the mission.
	NumAmbulatory int64 `json:"numAmbulatory"`
	// Number of attendants tasked for the mission.
	NumAttendant int64 `json:"numAttendant"`
	// Number of litter patients tasked for the mission.
	NumLitter int64 `json:"numLitter"`
	// Number of passengers associated with the mission.
	NumPax int64 `json:"numPax"`
	// Identifier of the offload itinerary location.
	OffloadID int64 `json:"offloadId"`
	// Offload location code.
	OffloadLoCode string `json:"offloadLOCode"`
	// Identifier of the onload itinerary location.
	OnloadID int64 `json:"onloadId"`
	// Onload location code.
	OnloadLoCode string `json:"onloadLOCode"`
	// Identification number of the Operation Plan (OPLAN) associated with this
	// mission.
	Oplan string `json:"oplan"`
	// Total weight of the outsize cargo, in kilograms.
	OutsizeWeight float64 `json:"outsizeWeight"`
	// Total weight of the oversized cargo, in kilograms.
	OversizeWeight float64 `json:"oversizeWeight"`
	// Project name.
	ProjName string `json:"projName"`
	// Transportation requirement number.
	TransReqNum string `json:"transReqNum"`
	// Unit line number.
	Uln string `json:"uln"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BulkWeight     respjson.Field
		Ead            respjson.Field
		GdssReqID      respjson.Field
		Lad            respjson.Field
		NumAmbulatory  respjson.Field
		NumAttendant   respjson.Field
		NumLitter      respjson.Field
		NumPax         respjson.Field
		OffloadID      respjson.Field
		OffloadLoCode  respjson.Field
		OnloadID       respjson.Field
		OnloadLoCode   respjson.Field
		Oplan          respjson.Field
		OutsizeWeight  respjson.Field
		OversizeWeight respjson.Field
		ProjName       respjson.Field
		TransReqNum    respjson.Field
		Uln            respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AirTransportMissionFullRequirement) RawJSON() string { return r.JSON.raw }
func (r *AirTransportMissionFullRequirement) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Aircraft readiness and status data. Contains the dynamic data associated with
// the specific aircraft status, either in-flight or on-ground, including remaining
// fuel, mission readiness, and inventory, etc.
type AircraftstatusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AircraftstatusFullDataMode `json:"dataMode,required"`
	// Unique identifier of the aircraft.
	IDAircraft string `json:"idAircraft,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// List of additional operational systems on this aircraft beyond what is normally
	// available.
	AdditionalSys []string `json:"additionalSys"`
	// The status of the air-to-air weapon release system (OPERATIONAL,
	// NON-OPERATIONAL, OFF).
	//
	// Any of "OPERATIONAL", "NON-OPERATIONAL", "OFF".
	AirToAirStatus AircraftstatusFullAirToAirStatus `json:"airToAirStatus"`
	// The status of the air-to-ground weapon release system (OPERATIONAL,
	// NON-OPERATIONAL, OFF).
	//
	// Any of "OPERATIONAL", "NON-OPERATIONAL", "OFF".
	AirToGroundStatus AircraftstatusFullAirToGroundStatus `json:"airToGroundStatus"`
	// Aircraft alpha status code that indicates the aircraft maintenance status
	// estimated by the pilot.
	AlphaStatusCode string `json:"alphaStatusCode"`
	// Alternate Aircraft Identifier provided by source.
	AltAircraftID string `json:"altAircraftId"`
	// The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED,
	// DECONTAMINATED, UNKNOWN, etc.).
	ContaminationStatus string `json:"contaminationStatus"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The International Civil Aviation Organization (ICAO) code at which this aircraft
	// is currently located or has most recently departed, if airborne.
	CurrentIcao string `json:"currentICAO"`
	// The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED,
	// AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
	CurrentState string `json:"currentState"`
	// The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC
	// format with millisecond precision.
	EarliestTaEndTime time.Time `json:"earliestTAEndTime" format:"date-time"`
	// The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format
	// with millisecond precision. This is the estimated time when the issue will be
	// resolved.
	Etic time.Time `json:"etic" format:"date-time"`
	// Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the
	// aircraft.
	FlightPhase string `json:"flightPhase"`
	// The mass of fuel remaining on the aircraft, in kilograms.
	Fuel int64 `json:"fuel"`
	// Used in conjunction with the fuel field to indicate either burnable or offload
	// fuel.
	FuelFunction string `json:"fuelFunction"`
	// The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL,
	// OTHER, REQUESTED, etc.).
	FuelStatus string `json:"fuelStatus"`
	// US Air Force geographic location code of the airfield where the aircraft is
	// located.
	GeoLoc string `json:"geoLoc"`
	// The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR,
	// etc.).
	GroundStatus string `json:"groundStatus"`
	// Flag indicating that the aircraft is capable of making at least one gun pass.
	GunCapable bool `json:"gunCapable"`
	// The upper bound of the estimated number of gun rounds available.
	GunRdsMax int64 `json:"gunRdsMax"`
	// The lower bound of the estimated number of gun rounds available.
	GunRdsMin int64 `json:"gunRdsMin"`
	// The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
	GunRdsType string `json:"gunRdsType"`
	// If not airborne, the unique identifier of the installation currently hosting the
	// aircraft.
	IDAirfield string `json:"idAirfield"`
	// Unique identifier of the Point of Interest (POI) record related to this aircraft
	// status. This will generally represent the location of an aircraft on the ground.
	IDPoi string `json:"idPOI"`
	// Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9
	// SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).
	// Intended as, but not constrained to, MIL-STD-6016 environment dependent
	// specific/store type designations. This array must be the same length as
	// inventoryMin and inventoryMax.
	Inventory []string `json:"inventory"`
	// Array of the upper bound quantity for each of the inventory items. The values in
	// this array must correspond to position index in the inventory array. This array
	// must be the same length as inventory and inventoryMin.
	InventoryMax []int64 `json:"inventoryMax"`
	// Array of the lower bound quantity for each of the inventory items. The values in
	// this array must correspond to position index in the inventory array. This array
	// must be the same length as inventory and inventoryMax.
	InventoryMin []int64 `json:"inventoryMin"`
	// Date when the military aircraft inspection was last performed, in ISO 8601 UTC
	// format with millisecond precision.
	LastInspectionDate time.Time `json:"lastInspectionDate" format:"date-time"`
	// The name or ID of the external user that updated this status.
	LastUpdatedBy string `json:"lastUpdatedBy"`
	// Military aircraft maintenance point of contact for this aircraft.
	MaintPoc string `json:"maintPoc"`
	// Indicates the priority of the maintenance effort.
	MaintPriority string `json:"maintPriority"`
	// The maintenance status of the aircraft.
	MaintStatus string `json:"maintStatus"`
	// Indicates the maintenance discrepancy that drives the current maintenance
	// status.
	MaintStatusDriver string `json:"maintStatusDriver"`
	// The time of the last maintenance status update, in ISO 8601 UTC format with
	// millisecond precision.
	MaintStatusUpdate time.Time `json:"maintStatusUpdate" format:"date-time"`
	// The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
	MissionReadiness string `json:"missionReadiness"`
	// Maintenance pacing remarks assocociated with this aircraft.
	MxRemark string `json:"mxRemark"`
	// The International Civil Aviation Organization (ICAO) code of the next
	// destination of this aircraft.
	NextIcao string `json:"nextICAO"`
	// Optional notes/comments concerning this aircraft status.
	Notes string `json:"notes"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The parking location of this aircraft.
	ParkLocation string `json:"parkLocation"`
	// The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
	ParkLocationSystem string `json:"parkLocationSystem"`
	// The International Civil Aviation Organization (ICAO) code at which this aircraft
	// was previously located.
	PreviousIcao string `json:"previousICAO"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The turnaround start time, in ISO 8601 UTC format with millisecond precision.
	TaStartTime time.Time `json:"taStartTime" format:"date-time"`
	// Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC
	// format with millisecond precision. This is the estimated time when the course of
	// action to resolve the issue will be determined.
	TroubleshootEtic time.Time `json:"troubleshootEtic" format:"date-time"`
	// List of unavailable systems that would normally be on this aircraft.
	UnavailableSys []string `json:"unavailableSys"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDAircraft            respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AdditionalSys         respjson.Field
		AirToAirStatus        respjson.Field
		AirToGroundStatus     respjson.Field
		AlphaStatusCode       respjson.Field
		AltAircraftID         respjson.Field
		ContaminationStatus   respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CurrentIcao           respjson.Field
		CurrentState          respjson.Field
		EarliestTaEndTime     respjson.Field
		Etic                  respjson.Field
		FlightPhase           respjson.Field
		Fuel                  respjson.Field
		FuelFunction          respjson.Field
		FuelStatus            respjson.Field
		GeoLoc                respjson.Field
		GroundStatus          respjson.Field
		GunCapable            respjson.Field
		GunRdsMax             respjson.Field
		GunRdsMin             respjson.Field
		GunRdsType            respjson.Field
		IDAirfield            respjson.Field
		IDPoi                 respjson.Field
		Inventory             respjson.Field
		InventoryMax          respjson.Field
		InventoryMin          respjson.Field
		LastInspectionDate    respjson.Field
		LastUpdatedBy         respjson.Field
		MaintPoc              respjson.Field
		MaintPriority         respjson.Field
		MaintStatus           respjson.Field
		MaintStatusDriver     respjson.Field
		MaintStatusUpdate     respjson.Field
		MissionReadiness      respjson.Field
		MxRemark              respjson.Field
		NextIcao              respjson.Field
		Notes                 respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		ParkLocation          respjson.Field
		ParkLocationSystem    respjson.Field
		PreviousIcao          respjson.Field
		SourceDl              respjson.Field
		TaStartTime           respjson.Field
		TroubleshootEtic      respjson.Field
		UnavailableSys        respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AircraftstatusFull) RawJSON() string { return r.JSON.raw }
func (r *AircraftstatusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AircraftstatusFullDataMode string

const (
	AircraftstatusFullDataModeReal      AircraftstatusFullDataMode = "REAL"
	AircraftstatusFullDataModeTest      AircraftstatusFullDataMode = "TEST"
	AircraftstatusFullDataModeSimulated AircraftstatusFullDataMode = "SIMULATED"
	AircraftstatusFullDataModeExercise  AircraftstatusFullDataMode = "EXERCISE"
)

// The status of the air-to-air weapon release system (OPERATIONAL,
// NON-OPERATIONAL, OFF).
type AircraftstatusFullAirToAirStatus string

const (
	AircraftstatusFullAirToAirStatusOperational    AircraftstatusFullAirToAirStatus = "OPERATIONAL"
	AircraftstatusFullAirToAirStatusNonOperational AircraftstatusFullAirToAirStatus = "NON-OPERATIONAL"
	AircraftstatusFullAirToAirStatusOff            AircraftstatusFullAirToAirStatus = "OFF"
)

// The status of the air-to-ground weapon release system (OPERATIONAL,
// NON-OPERATIONAL, OFF).
type AircraftstatusFullAirToGroundStatus string

const (
	AircraftstatusFullAirToGroundStatusOperational    AircraftstatusFullAirToGroundStatus = "OPERATIONAL"
	AircraftstatusFullAirToGroundStatusNonOperational AircraftstatusFullAirToGroundStatus = "NON-OPERATIONAL"
	AircraftstatusFullAirToGroundStatusOff            AircraftstatusFullAirToGroundStatus = "OFF"
)

// Self-reported information obtained from Automatic Identification System (AIS)
// equipment. This contains information such as unique identification, status,
// position, course, and speed. The AIS is an automatic tracking system that uses
// transceivers on ships and is used by vessel traffic services. Although
// technically and operationally distinct, the AIS system is analogous to ADS-B
// that performs a similar function for aircraft. AIS is intended to assist a
// vessel's watchstanding officers and allow maritime authorities to track and
// monitor vessel movements. AIS integrates a standardized VHF transceiver with a
// positioning system such as Global Positioning System receiver, with other
// electronic navigation sensors, such as gyrocompass or rate of turn indicator.
// Vessels fitted with AIS transceivers can be tracked by AIS base stations located
// along coast lines or, when out of range of terrestrial networks, through a
// growing number of satellites that are fitted with special AIS receivers which
// are capable of deconflicting a large number of signatures.
type AIsFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AIsFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The reference dimensions of the vessel, reported as [A, B, C, D], in meters.
	// Where the array values represent the distance fore (A), aft (B), to port (C),
	// and to starboard (D) of the navigation antenna. Array with values A = C = 0 and
	// B, D > 0 indicate the length (B) and width (D) of the vessel without antenna
	// position reference.
	AntennaRefDimensions []float64 `json:"antennaRefDimensions"`
	// The average speed, in kilometers/hour, calculated for the subject vessel during
	// the latest voyage (port to port).
	AvgSpeed float64 `json:"avgSpeed"`
	// A uniquely designated identifier for the vessel's transmitter station.
	CallSign string `json:"callSign"`
	// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN
	// AIS cargo definitions. Users should refer to USCG Navigation Center
	// documentation for specific definitions associated with ship and cargo types.
	// USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
	CargoType string `json:"cargoType"`
	// The course-over-ground reported by the vessel, in degrees.
	Course float64 `json:"course"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The US Geographic Unique Identifier of the current port hosting the vessel.
	CurrentPortGuid string `json:"currentPortGUID"`
	// The UN Location Code of the current port hosting the vessel.
	CurrentPortLocode string `json:"currentPortLOCODE"`
	// The destination of the vessel according to the AIS transmission.
	Destination string `json:"destination"`
	// The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC
	// format.
	DestinationEta time.Time `json:"destinationETA" format:"date-time"`
	// The remaining distance, in kilometers, for the vessel to reach the reported
	// destination.
	DistanceToGo float64 `json:"distanceToGo"`
	// The distance, in kilometers, that the vessel has travelled since departing the
	// last port.
	DistanceTravelled float64 `json:"distanceTravelled"`
	// The maximum static draught, in meters, of the vessel according to the AIS
	// transmission.
	Draught float64 `json:"draught"`
	// The activity that the vessel is engaged in. This entry applies only when the
	// shipType = Other.
	EngagedIn string `json:"engagedIn"`
	// The Estimated Time of Arrival of the vessel at the destination port, according
	// to MarineTraffic calculations, in ISO 8601 UTC format.
	EtaCalculated time.Time `json:"etaCalculated" format:"date-time"`
	// The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC
	// format.
	EtaUpdated time.Time `json:"etaUpdated" format:"date-time"`
	// Unique identifier of the Track.
	IDTrack string `json:"idTrack"`
	// Unique identifier of the vessel.
	IDVessel string `json:"idVessel"`
	// The International Maritime Organization Number of the vessel. IMON is a
	// seven-digit number that uniquely identifies the vessel.
	Imon int64 `json:"imon"`
	// The US Geographic Unique Identifier of the last port visited by the vessel.
	LastPortGuid string `json:"lastPortGUID"`
	// The UN Location Code of the last port visited by the vessel.
	LastPortLocode string `json:"lastPortLOCODE"`
	// WGS-84 latitude of the vessel position, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	Lat float64 `json:"lat"`
	// The overall length of the vessel, in meters. A value of 511 indicates a vessel
	// length of 511 meters or greater.
	Length float64 `json:"length"`
	// WGS-84 longitude of the vessel position, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// The maximum speed, in kilometers/hour, reported by the subject vessel during the
	// latest voyage (port to port).
	MaxSpeed float64 `json:"maxSpeed"`
	// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number
	// that identifies the transmitter station of the vessel.
	Mmsi int64 `json:"mmsi"`
	// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored,
	// Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation
	// status definitions. Users should refer to USCG Navigation Center documentation
	// for specific definitions associated with navigation status. USCG NAVCEN
	// documentation may be found at https://www.navcen.uscg.gov.
	NavStatus string `json:"navStatus"`
	// The US Geographic Unique Identifier of the next destination port of the vessel.
	NextPortGuid string `json:"nextPortGUID"`
	// The UN Location Code of the next destination port of the vessel.
	NextPortLocode string `json:"nextPortLOCODE"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.).
	// Intended as, but not constrained to, the USCG NAVCEN electronic position fixing
	// device definitions. Users should refer to USCG Navigation Center documentation
	// for specific device type information. USCG NAVCEN documentation may be found at
	// https://www.navcen.uscg.gov.
	PosDeviceType string `json:"posDeviceType"`
	// Flag indicating high reported position accuracy (less than or equal to 10
	// meters). A value of 0/false indicates low accuracy (greater than 10 meters).
	PosHiAccuracy bool `json:"posHiAccuracy"`
	// Flag indicating high reported position latency (greater than 5 seconds). A value
	// of 0/false indicates low latency (less than 5 seconds).
	PosHiLatency bool `json:"posHiLatency"`
	// The Rate-of-Turn for the vessel, in degrees/minute. Positive value indicates
	// that the vessel is turning right.
	RateOfTurn float64 `json:"rateOfTurn"`
	// Further description or explanation of the vessel or type.
	ShipDescription string `json:"shipDescription"`
	// The name of the vessel. Vessel names that exceed the AIS 20 character are
	// shortened (not truncated) to 15 character-spaces, followed by an underscore and
	// the last 4 characters-spaces of the vessel full name.
	ShipName string `json:"shipName"`
	// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.). See the
	// engagedIn and specialCraft entries for additional information on certain types
	// of vessels.
	ShipType string `json:"shipType"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The type of special craft designation of the vessel. This entry applies only
	// when the shipType = Special Craft.
	SpecialCraft string `json:"specialCraft"`
	// Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway
	// Navigation).
	SpecialManeuver bool `json:"specialManeuver"`
	// The speed-over-ground reported by the vessel, in kilometers/hour.
	Speed float64 `json:"speed"`
	// The true heading reported by the vessel, in degrees.
	TrueHeading float64 `json:"trueHeading"`
	// The flag of the subject vessel according to AIS transmission.
	VesselFlag string `json:"vesselFlag"`
	// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth
	// of 63 meters or greater.
	Width float64 `json:"width"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		Ts                    respjson.Field
		ID                    respjson.Field
		AntennaRefDimensions  respjson.Field
		AvgSpeed              respjson.Field
		CallSign              respjson.Field
		CargoType             respjson.Field
		Course                respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CurrentPortGuid       respjson.Field
		CurrentPortLocode     respjson.Field
		Destination           respjson.Field
		DestinationEta        respjson.Field
		DistanceToGo          respjson.Field
		DistanceTravelled     respjson.Field
		Draught               respjson.Field
		EngagedIn             respjson.Field
		EtaCalculated         respjson.Field
		EtaUpdated            respjson.Field
		IDTrack               respjson.Field
		IDVessel              respjson.Field
		Imon                  respjson.Field
		LastPortGuid          respjson.Field
		LastPortLocode        respjson.Field
		Lat                   respjson.Field
		Length                respjson.Field
		Lon                   respjson.Field
		MaxSpeed              respjson.Field
		Mmsi                  respjson.Field
		NavStatus             respjson.Field
		NextPortGuid          respjson.Field
		NextPortLocode        respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PosDeviceType         respjson.Field
		PosHiAccuracy         respjson.Field
		PosHiLatency          respjson.Field
		RateOfTurn            respjson.Field
		ShipDescription       respjson.Field
		ShipName              respjson.Field
		ShipType              respjson.Field
		SourceDl              respjson.Field
		SpecialCraft          respjson.Field
		SpecialManeuver       respjson.Field
		Speed                 respjson.Field
		TrueHeading           respjson.Field
		VesselFlag            respjson.Field
		Width                 respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AIsFull) RawJSON() string { return r.JSON.raw }
func (r *AIsFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AIsFullDataMode string

const (
	AIsFullDataModeReal      AIsFullDataMode = "REAL"
	AIsFullDataModeTest      AIsFullDataMode = "TEST"
	AIsFullDataModeSimulated AIsFullDataMode = "SIMULATED"
	AIsFullDataModeExercise  AIsFullDataMode = "EXERCISE"
)

// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and
// meta data indicating the specifics of the orientation of an on-orbit object.
// Attitude is typically distributed in a flat file containing details of the
// attitude generation as well as a large collection of individual points at
// varying time steps. AttitudeSet is analogous to this flat file.
type AttitudesetFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AttitudesetFullDataMode `json:"dataMode,required"`
	// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond
	// precision. If this set is constituted by a single epoch attitude message then
	// endTime should match the startTime.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Reference frame 1 of the quaternion or Euler angle transformation utilized in
	// this attitude parameter or attitude ephemeris. The UDL convention is that
	// transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
	// instrument name may be provided with the assumption the consumer understands the
	// location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
	// THRUSTERx, etc.).
	Frame1 string `json:"frame1,required"`
	// Reference frame 2 of the quaternion or Euler angle transformation utilized in
	// this attitude parameter or attitude ephemeris. The UDL convention is that
	// transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
	// instrument name may be provided with the assumption the consumer understands the
	// location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
	// THRUSTERx, etc.).
	Frame2 string `json:"frame2,required"`
	// Number of attitude records contained in this set.
	NumPoints int64 `json:"numPoints,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO
	// 8601 UTC format, with microsecond precision. If this set is constituted by a
	// single attitude parameter message then startTime is the epoch.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// The type of attitude message or messages associated with this set.
	//
	// AEM = Attitude Ephemeris Message, specifying the attitude state of a single
	// object at multiple epochs.
	//
	// APM = Attitude Parameters Message, specifying the attitude state of a single
	// object at a single epoch.
	Type string `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.
	// For example, a spacecraft Attitude Ephemeris Set might include a reference to an
	// Attitude Parameter Message defining the sensor to body frame transformation for
	// a sensor onboard the spacecraft, which allows for calculation of the sensor
	// orientation in frame2 of the attitude ephemeris.
	AsRef []string `json:"asRef"`
	// Collection of attitude data associated with this Attitude Set.
	AttitudeList []unifieddatalibrary.AttitudedataFull `json:"attitudeList"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the parent (positional) Ephemeris Set, if this data is
	// correlated with an Ephemeris.
	EsID string `json:"esId"`
	// The rotation sequence of the Euler angles in which attitude reference frame
	// transformation occurs (from left to right). One, two, or three axis rotations
	// are supported and are represented by one, two, or three characters respectively.
	// Repeated axis rotations are also supported, however, these rotations should not
	// be sequential. The numeric sequence values correspond to the body angles/rates
	// as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate. Valid
	// sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12,
	// 13, 21, 23, 31, 32, 1, 2, and 3.
	//
	// The following represent examples of possible rotation sequences: A single
	// rotation about the Y-axis can be expressed as '2', a double rotation with X-Z
	// sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can
	// be expressed as '312'.
	EulerRotSeq string `json:"eulerRotSeq"`
	// Unique identifier of the on-orbit satellite to which this attitude set applies.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the sensor to which this attitude set applies IF this set
	// is reporting a single sensor orientation.
	IDSensor string `json:"idSensor"`
	// Recommended interpolation method for estimating attitude ephemeris data.
	Interpolator string `json:"interpolator"`
	// Recommended polynomial interpolation degree.
	InterpolatorDegree int64 `json:"interpolatorDegree"`
	// Optional notes/comments for this attitude set.
	Notes string `json:"notes"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the record source to indicate the target object
	// of this attitude set. This may be an internal identifier and not necessarily map
	// to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Optional identifier provided by the record source to indicate the sensor
	// identifier to which this attitude set applies IF this set is reporting a single
	// sensor orientation. This may be an internal identifier and not necessarily a
	// valid sensor ID.
	OrigSensorID string `json:"origSensorId"`
	// Initial precession angle (ECI J2000 frame) in degrees.
	PrecAngleInit float64 `json:"precAngleInit"`
	// Satellite/catalog number of the on-orbit object to which this attitude set
	// applies.
	SatNo int64 `json:"satNo"`
	// Initial spin angle (ECI J2000 frame) in degrees.
	SpinAngleInit float64 `json:"spinAngleInit"`
	// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris
	// Messages (AEM) that employ a fixed step size.
	StepSize int64 `json:"stepSize"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		EndTime               respjson.Field
		Frame1                respjson.Field
		Frame2                respjson.Field
		NumPoints             respjson.Field
		Source                respjson.Field
		StartTime             respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		AsRef                 respjson.Field
		AttitudeList          respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EsID                  respjson.Field
		EulerRotSeq           respjson.Field
		IDOnOrbit             respjson.Field
		IDSensor              respjson.Field
		Interpolator          respjson.Field
		InterpolatorDegree    respjson.Field
		Notes                 respjson.Field
		OnOrbit               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		OrigSensorID          respjson.Field
		PrecAngleInit         respjson.Field
		SatNo                 respjson.Field
		SpinAngleInit         respjson.Field
		StepSize              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AttitudesetFull) RawJSON() string { return r.JSON.raw }
func (r *AttitudesetFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AttitudesetFullDataMode string

const (
	AttitudesetFullDataModeReal      AttitudesetFullDataMode = "REAL"
	AttitudesetFullDataModeTest      AttitudesetFullDataMode = "TEST"
	AttitudesetFullDataModeSimulated AttitudesetFullDataMode = "SIMULATED"
	AttitudesetFullDataModeExercise  AttitudesetFullDataMode = "EXERCISE"
)

// Collect Requests support several types of individual requests, or
// planned/scheduled tasks on sensors and/or orbital objects. Options are provided
// to accomodate most common sensor contact and collection applications, including
// single sensor-object tasking, search operations, and TT&C support. Multiple
// requests originating from a plan or schedule may be associated to a sensor plan
// if desired.
type CollectRequestFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode CollectRequestFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The start time or earliest time of the collect or contact request window, in ISO
	// 8601 UTC format.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT,
	// POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).
	Type string `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Height above WGS-84 ellipsoid (HAE), in kilometers. If an accompanying stopAlt
	// is provided, then alt value can be assumed to be the starting altitude of a
	// volume definition.
	Alt float64 `json:"alt"`
	// The argument of perigee is the angle, in degrees, formed between the perigee and
	// the ascending node.
	ArgOfPerigee float64 `json:"argOfPerigee"`
	// The expected or directed azimuth angle, in degrees, for search or target
	// acquisition.
	Az float64 `json:"az"`
	// CollectResponses associated to request id. Read-only details (only used on
	// detail queries, not to be provided on create/update operations).
	CollectResponse []CollectResponseFull `json:"collectResponse"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The customer for this request.
	Customer string `json:"customer"`
	// The expected or directed declination angle, in degrees, for search or target
	// acquisition.
	Dec float64 `json:"dec"`
	// The duration of the collect request, in seconds. If both duration and endTime
	// are provided, the endTime is assumed to take precedence.
	Duration int64 `json:"duration"`
	// The dwell ID associated with this request. A dwell ID is dwell point specific
	// and a DWELL request consist of many dwell point requests.
	DwellID string `json:"dwellId"`
	// The orbital eccentricity of an astronomical object is a parameter that
	// determines the amount by which its orbit around another body deviates from a
	// perfect circle.
	Eccentricity float64 `json:"eccentricity"`
	// The expected or directed elevation angle, in degrees, for search or target
	// acquisition.
	El float64 `json:"el"`
	// An element set is a collection of Keplerian orbital elements describing an orbit
	// of a particular satellite. The data is used along with an orbit propagator in
	// order to predict the motion of a satellite. The element set, or elset for short,
	// consists of identification data, the classical elements and drag parameters.
	Elset CollectRequestFullElset `json:"elset"`
	// The end time of the collect or contact request window, in ISO 8601 UTC format.
	// If no endTime or duration is provided it is assumed the request is either
	// ongoing or that the request is for a specified number of tracks (numTracks). If
	// both duration and endTime are provided, the endTime is assumed to take
	// precedence.
	EndTime time.Time `json:"endTime" format:"date-time"`
	// Epoch time, in ISO 8601 UTC format, of the orbital elements.
	Epoch time.Time `json:"epoch" format:"date-time"`
	// ID of the UDL Ephemeris Set of the object associated with this request.
	EsID string `json:"esId"`
	// The extent of the azimuth angle, in degrees, from center azimuth to define a
	// spatial volume.
	ExtentAz float64 `json:"extentAz"`
	// The extent of the elevation angle, in degrees, from center elevation to define a
	// spatial volume.
	ExtentEl float64 `json:"extentEl"`
	// The extent of the range, in km, from center range to define a spatial volume.
	ExtentRange float64 `json:"extentRange"`
	// Optional ID from external systems. This field has no meaning within UDL and is
	// provided as a convenience for systems that require tracking of an internal
	// system generated ID.
	ExternalID string `json:"externalId"`
	// For optical sensors, the frame rate of the camera, in Hz.
	FrameRate float64 `json:"frameRate"`
	// The estimated or expected emission frequency of the target, in MHz.
	Freq float64 `json:"freq"`
	// The maximum frequency of interest, in MHz.
	FreqMax float64 `json:"freqMax"`
	// The minimum frequency of interest, in MHz. If only minimum frequency is provided
	// it is assumed to be minimum reportable frequency.
	FreqMin float64 `json:"freqMin"`
	// ID of the UDL Elset of the object associated with this request.
	IDElset string `json:"idElset"`
	// ID of the UDL Manifold Elset of the object associated with this request. A
	// Manifold Elset provides theoretical Keplerian orbital elements belonging to an
	// object of interest's manifold describing a possible/theoretical orbit for an
	// object of interest for tasking purposes.
	IDManifold string `json:"idManifold"`
	// Unique identifier of the target on-orbit object for this request.
	IDOnOrbit string `json:"idOnOrbit"`
	// The unique ID of the collect request record from which this request originated.
	// This may be used for cases of sensor-to-sensor tasking, such as tip/cue
	// operations.
	IDParentReq string `json:"idParentReq"`
	// Unique identifier of the parent plan or schedule associated with this request.
	// If null, this request is assumed not associated with a plan or schedule.
	IDPlan string `json:"idPlan"`
	// Unique identifier of the requested/scheduled/planned sensor associated with this
	// request. If both idSensor and origSensorId are null then the request is assumed
	// to be a general request for observations or contact on an object, if specified,
	// or an area/volume. In this case, the requester may specify a desired obType.
	IDSensor string `json:"idSensor"`
	// ID of the UDL State Vector of the object or central vector associated with this
	// request.
	IDStateVector string `json:"idStateVector"`
	// The angle, in degrees, between the equator and the orbit plane when looking from
	// the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90
	// representing posigrade orbits and 90-180 representing retrograde orbits.
	Inclination float64 `json:"inclination"`
	// For optical sensors, the integration time per camera frame, in milliseconds.
	IntegrationTime float64 `json:"integrationTime"`
	// Inter-Range Operations Number. Four-digit identifier used to schedule and
	// identify AFSCN contact support for booster, launch, and on-orbit operations.
	Iron int64 `json:"iron"`
	// The target object irradiance value.
	Irradiance float64 `json:"irradiance"`
	// WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of
	// equator). If an accompanying stopLat is provided, then the lat value can be
	// assumed to be the starting latitude of a volume definition.
	Lat float64 `json:"lat"`
	// WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime
	// Meridian). If an accompanying stopLon is provided, then lon value can be assumed
	// to be the starting longitude of a volume definition.
	Lon float64 `json:"lon"`
	// The timestamp of the external message from which this request originated, if
	// applicable, in ISO8601 UTC format with millisecond precision.
	MsgCreateDate time.Time `json:"msgCreateDate" format:"date-time"`
	// The type of external message from which this request originated.
	MsgType string `json:"msgType"`
	// Notes or comments associated with this request.
	Notes string `json:"notes"`
	// For optical sensors, the requested number of frames to capture at each sensor
	// step.
	NumFrames int64 `json:"numFrames"`
	// The number of requested observations on the target.
	NumObs int64 `json:"numObs"`
	// The number of requested tracks on the target. If numTracks is not provided it is
	// assumed to indicate all possible observations every pass over the request
	// duration or within the request start/end window.
	NumTracks int64 `json:"numTracks"`
	// Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER)
	// requested. This field may correspond to a request of a specific sensor, or to a
	// general non sensor specific request.
	ObType string `json:"obType"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).
	OrbitRegime string `json:"orbitRegime"`
	// The magnitude of rotation, in degrees, between the xAngle direction and locally
	// defined equinoctial plane. A positive value indicates clockwise rotation about
	// the sensor boresight vector.
	OrientAngle float64 `json:"orientAngle"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the data source to indicate the target object of
	// this request. This may be an internal identifier and not necessarily map to a
	// valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Optional identifier provided by the source to indicate the sensor identifier
	// requested/scheduled/planned for this request. This may be an internal identifier
	// and not necessarily a valid sensor ID. If both idSensor and origSensorId are
	// null then the request is assumed to be a general request for observations or
	// contact on an object, if specified, or an area/volume. In this case, the
	// requester may specify a desired obType.
	OrigSensorID string `json:"origSensorId"`
	// Index number (integer) for records within a collection plan or schedule.
	PlanIndex int64 `json:"planIndex"`
	// The RF polarization (H, LHC, RHC, V).
	Polarization string `json:"polarization"`
	// The priority of the collect request (EMERGENCY, FLASH, IMMEDIATE, PRIORITY,
	// ROUTINE).
	Priority string `json:"priority"`
	// The expected or directed right ascension angle, in degrees, for search or target
	// acquisition.
	Ra float64 `json:"ra"`
	// Right ascension of the ascending node, or RAAN is the angle as measured in
	// degrees eastwards (or, as seen from the north, counterclockwise) from the First
	// Point of Aries to the ascending node.
	Raan float64 `json:"raan"`
	// The expected acquisition range or defined center range, in km.
	Range float64 `json:"range"`
	// The Radar Cross-Section of the target, in m^2.
	Rcs float64 `json:"rcs"`
	// The maximum Radar Cross-Section of the target, in m^2.
	RcsMax float64 `json:"rcsMax"`
	// The minimum Radar Cross-Section of the target, in m^2. If only minimum RCS is
	// provided it is assumed to be minimum reportable RCS.
	RcsMin float64 `json:"rcsMin"`
	// The fraction of solar energy reflected from target.
	Reflectance float64 `json:"reflectance"`
	// Satellite/catalog number of the target on-orbit object for this request.
	SatNo int64 `json:"satNo"`
	// Pre-coordinated code, direction, or configuration to be executed by the sensor
	// or site for this collect or contact.
	Scenario string `json:"scenario"`
	// The average of the periapsis and apoapsis distances, in kilometers. For circular
	// orbits, the semimajor axis is the distance between the centers of the bodies.
	SemiMajorAxis float64 `json:"semiMajorAxis"`
	// The spectral model used for the irradiance calculation.
	SpectralModel string `json:"spectralModel"`
	// The maximum inclination, in degrees, to be used in search operations.
	SrchInc float64 `json:"srchInc"`
	// The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN,
	// etc.).
	SrchPattern string `json:"srchPattern"`
	// This service provides operations for querying and manipulation of state vectors
	// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
	// velocity (v) that, together with their time (epoch) (t), uniquely determine the
	// trajectory of the orbiting body in space. J2000 is the preferred coordinate
	// frame for all state vector positions/velocities in UDL, but in some cases data
	// may be in another frame depending on the provider and/or datatype. Please see
	// the 'Discover' tab in the storefront to confirm coordinate frames by data
	// provider.
	StateVector CollectRequestFullStateVector `json:"stateVector"`
	// The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in
	// kilometers. The stopAlt value is only meaningful if a (starting) alt value is
	// provided.
	StopAlt float64 `json:"stopAlt"`
	// The stopping WGS-84 latitude of a volume definition, in degrees. -90 to 90
	// degrees (negative values south of equator). The stopLat value is only meaningful
	// if a (starting) lat value is provided.
	StopLat float64 `json:"stopLat"`
	// The stopping WGS-84 longitude of a volume definition, in degrees. -180 to 180
	// degrees (negative values west of Prime Meridian). The stopLon value is only
	// meaningful if a (starting) lon value is provided.
	StopLon float64 `json:"stopLon"`
	// The (SSN) tasking suffix (A-Z) associated with this request. The suffix defines
	// the amount of observational data and the frequency of collection. Note that
	// suffix definitions are sensor type specific.
	Suffix string `json:"suffix"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// The minimum object (diameter) size, in meters, to be reported.
	TargetSize float64 `json:"targetSize"`
	// The (SSN) tasking category (1-5) associated with this request. The tasking
	// category defines the priority of gathering and transmitting the requested
	// observational data. Note that category definitions are sensor type specific.
	TaskCategory int64 `json:"taskCategory"`
	// The tasking group to which the target object is assigned.
	TaskGroup string `json:"taskGroup"`
	// Task ID associated with this request. A task ID may be associated with a single
	// collect request or may be used to tie together the sub-requests of a full
	// collect, for example a DWELL consisting of many dwell points.
	TaskID string `json:"taskId"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// The true anomaly defines the angular position, in degrees, of the object on it's
	// orbital path as measured from the orbit focal point at epoch. The true anomaly
	// is referenced from perigee.
	TrueAnomoly float64 `json:"trueAnomoly"`
	// Boolean indicating that this collect request is UCT follow-up.
	UctFollowUp bool `json:"uctFollowUp"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// The estimated or expected visual magnitude of the target, in Magnitudes (M).
	VisMag float64 `json:"visMag"`
	// The maximum estimated or expected visual magnitude of the target, in Magnitudes
	// (M).
	VisMagMax float64 `json:"visMagMax"`
	// The minimum estimated or expected visual magnitude of the target, in Magnitudes
	// (M). If only minimum vismag is provided it is assumed to be minimum reportable
	// vismag.
	VisMagMin float64 `json:"visMagMin"`
	// The angular distance, in degrees, in the sensor-x direction from scan center
	// defined by the central vector. The specification of xAngle and yAngle defines a
	// rectangle of width 2*xAngle and height 2*yAngle centered about the central
	// vector.
	XAngle float64 `json:"xAngle"`
	// The angular distance, in degrees, in the sensor-y direction from scan center
	// defined by the central vector. The specification of xAngle and yAngle defines a
	// rectangle of width 2*xAngle and height 2*yAngle centered about the central
	// vector.
	YAngle float64 `json:"yAngle"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		StartTime             respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		Alt                   respjson.Field
		ArgOfPerigee          respjson.Field
		Az                    respjson.Field
		CollectResponse       respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Customer              respjson.Field
		Dec                   respjson.Field
		Duration              respjson.Field
		DwellID               respjson.Field
		Eccentricity          respjson.Field
		El                    respjson.Field
		Elset                 respjson.Field
		EndTime               respjson.Field
		Epoch                 respjson.Field
		EsID                  respjson.Field
		ExtentAz              respjson.Field
		ExtentEl              respjson.Field
		ExtentRange           respjson.Field
		ExternalID            respjson.Field
		FrameRate             respjson.Field
		Freq                  respjson.Field
		FreqMax               respjson.Field
		FreqMin               respjson.Field
		IDElset               respjson.Field
		IDManifold            respjson.Field
		IDOnOrbit             respjson.Field
		IDParentReq           respjson.Field
		IDPlan                respjson.Field
		IDSensor              respjson.Field
		IDStateVector         respjson.Field
		Inclination           respjson.Field
		IntegrationTime       respjson.Field
		Iron                  respjson.Field
		Irradiance            respjson.Field
		Lat                   respjson.Field
		Lon                   respjson.Field
		MsgCreateDate         respjson.Field
		MsgType               respjson.Field
		Notes                 respjson.Field
		NumFrames             respjson.Field
		NumObs                respjson.Field
		NumTracks             respjson.Field
		ObType                respjson.Field
		OnOrbit               respjson.Field
		OrbitRegime           respjson.Field
		OrientAngle           respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		OrigSensorID          respjson.Field
		PlanIndex             respjson.Field
		Polarization          respjson.Field
		Priority              respjson.Field
		Ra                    respjson.Field
		Raan                  respjson.Field
		Range                 respjson.Field
		Rcs                   respjson.Field
		RcsMax                respjson.Field
		RcsMin                respjson.Field
		Reflectance           respjson.Field
		SatNo                 respjson.Field
		Scenario              respjson.Field
		SemiMajorAxis         respjson.Field
		SpectralModel         respjson.Field
		SrchInc               respjson.Field
		SrchPattern           respjson.Field
		StateVector           respjson.Field
		StopAlt               respjson.Field
		StopLat               respjson.Field
		StopLon               respjson.Field
		Suffix                respjson.Field
		Tags                  respjson.Field
		TargetSize            respjson.Field
		TaskCategory          respjson.Field
		TaskGroup             respjson.Field
		TaskID                respjson.Field
		TransactionID         respjson.Field
		TrueAnomoly           respjson.Field
		UctFollowUp           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		VisMag                respjson.Field
		VisMagMax             respjson.Field
		VisMagMin             respjson.Field
		XAngle                respjson.Field
		YAngle                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CollectRequestFull) RawJSON() string { return r.JSON.raw }
func (r *CollectRequestFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type CollectRequestFullDataMode string

const (
	CollectRequestFullDataModeReal      CollectRequestFullDataMode = "REAL"
	CollectRequestFullDataModeTest      CollectRequestFullDataMode = "TEST"
	CollectRequestFullDataModeSimulated CollectRequestFullDataMode = "SIMULATED"
	CollectRequestFullDataModeExercise  CollectRequestFullDataMode = "EXERCISE"
)

// An element set is a collection of Keplerian orbital elements describing an orbit
// of a particular satellite. The data is used along with an orbit propagator in
// order to predict the motion of a satellite. The element set, or elset for short,
// consists of identification data, the classical elements and drag parameters.
type CollectRequestFullElset struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
	Epoch time.Time `json:"epoch,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the
	// solar radiation pressure coefficient(Gamma) over the object Mass. Applicable
	// only with ephemType4.
	Agom float64 `json:"agom"`
	// Optional algorithm used to produce this record.
	Algorithm string `json:"algorithm"`
	// The orbit point furthest from the center of the earth in kilometers. If not
	// provided, apogee will be computed from the TLE according to the following. Using
	// mu, the standard gravitational parameter for the earth (398600.4418), semi-major
	// axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using semi-major axis A,
	// eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for
	// computing the apogee radius from the center of the earth, to compute apogee
	// altitude the radius of the earth should be subtracted (6378.135 km).
	Apogee float64 `json:"apogee"`
	// The argument of perigee is the angle in degrees formed between the perigee and
	// the ascending node. If the perigee would occur at the ascending node, the
	// argument of perigee would be 0.
	ArgOfPerigee float64 `json:"argOfPerigee"`
	// Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
	BallisticCoeff float64 `json:"ballisticCoeff"`
	// The drag term for SGP4 orbital model, used for calculating decay constants for
	// altitude, eccentricity etc, measured in inverse earth radii.
	BStar float64 `json:"bStar"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// The orbital eccentricity of an astronomical object is a parameter that
	// determines the amount by which its orbit around another body deviates from a
	// perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an
	// elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a
	// hyperbolic escape orbit.
	Eccentricity float64 `json:"eccentricity"`
	// Read-only start time at which this elset was the 'current' elset for its
	// satellite. This field and is set by the system automatically and ignored on
	// create/edit operations.
	EffectiveFrom time.Time `json:"effectiveFrom" format:"date-time"`
	// Read-only end time at which this elset was no longer the 'current' elset for its
	// satellite. This field and is set by the system automatically and ignored on
	// create/edit operations.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// The ephemeris type associated with this TLE:
	//
	// 0:&nbsp;SGP (or SGP4 with Kozai mean motion)
	//
	// 1:&nbsp;SGP (Kozai mean motion)
	//
	// 2:&nbsp;SGP4 (Brouver mean motion)
	//
	// 3:&nbsp;SDP4
	//
	// 4:&nbsp;SGP4-XP
	//
	// 5:&nbsp;SDP8
	//
	// 6:&nbsp;SP (osculating mean motion)
	EphemType int64 `json:"ephemType"`
	// Unique identifier of the record, auto-generated by the system.
	IDElset string `json:"idElset"`
	// Unique identifier of the satellite on-orbit object, if correlated. For the
	// public catalog, the idOnOrbit is typically the satellite number as a string, but
	// may be a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the OD solution record that produced this elset. This ID
	// can be used to obtain additional information on an OrbitDetermination object
	// using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
	// example, the OrbitDetermination with idOrbitDetermination = abc would be queried
	// as /udl/orbitdetermination/abc.
	IDOrbitDetermination string `json:"idOrbitDetermination"`
	// The angle between the equator and the orbit when looking from the center of the
	// Earth. If the orbit went exactly around the equator from left to right, then the
	// inclination would be 0. The inclination ranges from 0 to 180 degrees.
	Inclination float64 `json:"inclination"`
	// Read only derived/generated line1 of a legacy TLE (two line element set) format,
	// ignored on create/edit operations.
	Line1 string `json:"line1"`
	// Read only derived/generated line2 of a legacy TLE (two line element set) format,
	// ignored on create/edit operations.
	Line2 string `json:"line2"`
	// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to
	// 360 degrees. The mean anomaly is referenced to the perigee. If the satellite
	// were at the perigee, the mean anomaly would be 0.
	MeanAnomaly float64 `json:"meanAnomaly"`
	// Mean motion is the angular speed required for a body to complete one orbit,
	// assuming constant speed in a circular orbit which completes in the same time as
	// the variable speed, elliptical orbit of the actual body. Measured in revolutions
	// per day.
	MeanMotion float64 `json:"meanMotion"`
	// 2nd derivative of the mean motion with respect to time. Units are revolutions
	// per day cubed.
	MeanMotionDDot float64 `json:"meanMotionDDot"`
	// 1st derivative of the mean motion with respect to time. Units are revolutions
	// per day squared.
	MeanMotionDot float64 `json:"meanMotionDot"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by elset source to indicate the target onorbit
	// object of this elset. This may be an internal identifier and not necessarily map
	// to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// The orbit point nearest to the center of the earth in kilometers. If not
	// provided, perigee will be computed from the TLE according to the following.
	// Using mu, the standard gravitational parameter for the earth (398600.4418),
	// semi-major axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using semi-major axis A,
	// eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are
	// for computing the perigee radius from the center of the earth, to compute
	// perigee altitude the radius of the earth should be subtracted (6378.135 km).
	Perigee float64 `json:"perigee"`
	// Period of the orbit equal to inverse of mean motion, in minutes.
	Period float64 `json:"period"`
	// Right ascension of the ascending node, or RAAN is the angle as measured in
	// degrees eastwards (or, as seen from the north, counterclockwise) from the First
	// Point of Aries to the ascending node, which is where the orbit crosses the
	// equator when traveling north.
	Raan float64 `json:"raan"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The current revolution number. The value is incremented when a satellite crosses
	// the equator on an ascending pass.
	RevNo int64 `json:"revNo"`
	// Satellite/catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo"`
	// The sum of the periapsis and apoapsis distances divided by two. For circular
	// orbits, the semimajor axis is the distance between the centers of the bodies,
	// not the distance of the bodies from the center of mass. Units are kilometers.
	SemiMajorAxis float64 `json:"semiMajorAxis"`
	// Optional array of UDL data (observation) UUIDs used to build this element set.
	// See the associated sourcedDataTypes array for the specific types of observations
	// for the positionally corresponding UUIDs in this array (the two arrays must
	// match in size).
	SourcedData []string `json:"sourcedData"`
	// Optional array of UDL observation data types used to build this element set
	// (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
	// UUIDs of observations for the positionally corresponding data types in this
	// array (the two arrays must match in size).
	//
	// Any of "EO", "RADAR", "RF", "DOA", "ELSET", "SV".
	SourcedDataTypes []string `json:"sourcedDataTypes"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Boolean indicating this Elset was unable to be correlated to a known object.
	// This flag should only be set to true by data providers after an attempt to
	// correlate to an on-orbit object was made and failed. If unable to correlate, the
	// 'origObjectId' field may be populated with an internal data provider specific
	// identifier.
	Uct bool `json:"uct"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Epoch                 respjson.Field
		Source                respjson.Field
		Agom                  respjson.Field
		Algorithm             respjson.Field
		Apogee                respjson.Field
		ArgOfPerigee          respjson.Field
		BallisticCoeff        respjson.Field
		BStar                 respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Descriptor            respjson.Field
		Eccentricity          respjson.Field
		EffectiveFrom         respjson.Field
		EffectiveUntil        respjson.Field
		EphemType             respjson.Field
		IDElset               respjson.Field
		IDOnOrbit             respjson.Field
		IDOrbitDetermination  respjson.Field
		Inclination           respjson.Field
		Line1                 respjson.Field
		Line2                 respjson.Field
		MeanAnomaly           respjson.Field
		MeanMotion            respjson.Field
		MeanMotionDDot        respjson.Field
		MeanMotionDot         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		Perigee               respjson.Field
		Period                respjson.Field
		Raan                  respjson.Field
		RawFileUri            respjson.Field
		RevNo                 respjson.Field
		SatNo                 respjson.Field
		SemiMajorAxis         respjson.Field
		SourcedData           respjson.Field
		SourcedDataTypes      respjson.Field
		SourceDl              respjson.Field
		Tags                  respjson.Field
		TransactionID         respjson.Field
		Uct                   respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CollectRequestFullElset) RawJSON() string { return r.JSON.raw }
func (r *CollectRequestFullElset) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// This service provides operations for querying and manipulation of state vectors
// for OnOrbit objects. State vectors are cartesian vectors of position (r) and
// velocity (v) that, together with their time (epoch) (t), uniquely determine the
// trajectory of the orbiting body in space. J2000 is the preferred coordinate
// frame for all state vector positions/velocities in UDL, but in some cases data
// may be in another frame depending on the provider and/or datatype. Please see
// the 'Discover' tab in the storefront to confirm coordinate frames by data
// provider.
type CollectRequestFullStateVector struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Time of validity for state vector in ISO 8601 UTC datetime format, with
	// microsecond precision.
	Epoch time.Time `json:"epoch,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// The actual time span used for the OD of the object, expressed in days.
	ActualOdSpan float64 `json:"actualODSpan"`
	// Optional algorithm used to produce this record.
	Algorithm string `json:"algorithm"`
	// The reference frame of the alternate1 (Alt1) cartesian orbital state.
	Alt1ReferenceFrame string `json:"alt1ReferenceFrame"`
	// The reference frame of the alternate2 (Alt2) cartesian orbital state.
	Alt2ReferenceFrame string `json:"alt2ReferenceFrame"`
	// The actual area of the object at it's largest cross-section, expressed in
	// meters^2.
	Area float64 `json:"area"`
	// First derivative of drag/ballistic coefficient (m2/kg-s).
	BDot float64 `json:"bDot"`
	// Model parameter value for center of mass offset (m).
	CmOffset float64 `json:"cmOffset"`
	// Covariance matrix, in kilometer and second based units, in the specified
	// covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
	// The array values (1-21) represent the lower triangular half of the
	// position-velocity covariance matrix. The size of the covariance matrix is
	// dynamic, depending on whether the covariance for position only or position &
	// velocity. The covariance elements are position dependent within the array with
	// values ordered as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
	//
	// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
	//
	// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
	//
	// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
	//
	// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
	//
	// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
	//
	// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
	//
	// The cov array should contain only the lower left triangle values from top left
	// down to bottom right, in order.
	//
	// If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
	// matrix can be extended with the following order of elements:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
	//
	// DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
	//
	// SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
	//
	// THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
	Cov []float64 `json:"cov"`
	// The method used to generate the covariance during the orbit determination (OD)
	// that produced the state vector, or whether an arbitrary, non-calculated default
	// value was used (CALCULATED, DEFAULT).
	CovMethod string `json:"covMethod"`
	// The reference frame of the covariance matrix elements. If the covReferenceFrame
	// is null it is assumed to be J2000.
	//
	// Any of "J2000", "UVW".
	CovReferenceFrame string `json:"covReferenceFrame"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional source-provided and searchable metadata or descriptor of the data.
	Descriptor string `json:"descriptor"`
	// The effective area of the object exposed to atmospheric drag, expressed in
	// meters^2.
	DragArea float64 `json:"dragArea"`
	// Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
	DragCoeff float64 `json:"dragCoeff"`
	// The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
	// NONE, etc.).
	DragModel string `json:"dragModel"`
	// Model parameter value for energy dissipation rate (EDR) (w/kg).
	Edr float64 `json:"edr"`
	// Start time at which this state vector was the 'current' state vector for its
	// satellite.
	EffectiveFrom time.Time `json:"effectiveFrom" format:"date-time"`
	// End time at which this state vector was no longer the 'current' state vector for
	// its satellite.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// The covariance matrix values represent the lower triangular half of the
	// covariance matrix in terms of equinoctial elements.&nbsp; The size of the
	// covariance matrix is dynamic.&nbsp; The values are outputted in order across
	// each row, i.e.:
	//
	// 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
	//
	// 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
	//
	// The ordering of values is as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
	// Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
	// B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
	//
	// Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
	//
	// Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
	//
	// L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
	//
	// N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	// 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
	//
	// Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
	// 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
	//
	// Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
	// 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
	//
	// B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
	// 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
	//
	// BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
	// 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
	//
	// AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
	// 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
	//
	// T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
	// 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
	// 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
	//
	// C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
	// 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
	// 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
	//
	// C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
	// 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
	// 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
	//
	// :
	//
	// :
	//
	// where C1, C2, etc, are the "consider parameters" that may be added to the
	// covariance matrix.&nbsp; The covariance matrix will be as large as the last
	// element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
	// elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
	// BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
	// will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
	// only the lower left triangle values from top left down to bottom right, in
	// order.
	EqCov []float64 `json:"eqCov"`
	// Integrator error control.
	ErrorControl float64 `json:"errorControl"`
	// Boolean indicating use of fixed step size for this vector.
	FixedStep bool `json:"fixedStep"`
	// Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
	// GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
	// 24Z,24T.
	GeopotentialModel string `json:"geopotentialModel"`
	// Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
	Iau1980Terms int64 `json:"iau1980Terms"`
	// Unique identifier of the satellite on-orbit object, if correlated. For the
	// public catalog, the idOnOrbit is typically the satellite number as a string, but
	// may be a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the OD solution record that produced this state vector.
	// This ID can be used to obtain additional information on an OrbitDetermination
	// object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
	// example, the OrbitDetermination with idOrbitDetermination = abc would be queries
	// as /udl/orbitdetermination/abc.
	IDOrbitDetermination string `json:"idOrbitDetermination"`
	// Unique identifier of the record, auto-generated by the system.
	IDStateVector string `json:"idStateVector"`
	// Integrator Mode.
	IntegratorMode string `json:"integratorMode"`
	// Boolean indicating use of in-track thrust perturbations for this vector.
	InTrackThrust bool `json:"inTrackThrust"`
	// The end of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObEnd time.Time `json:"lastObEnd" format:"date-time"`
	// The start of the time interval containing the time of the last accepted
	// observation, in ISO 8601 UTC format with microsecond precision. For an exact
	// observation time, the firstObTime and lastObTime are the same.
	LastObStart time.Time `json:"lastObStart" format:"date-time"`
	// Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
	// second is not known, the time of the previous leap second is used.
	LeapSecondTime time.Time `json:"leapSecondTime" format:"date-time"`
	// Boolean indicating use of lunar/solar perturbations for this vector.
	LunarSolar bool `json:"lunarSolar"`
	// The mass of the object, in kilograms.
	Mass float64 `json:"mass"`
	// The number of observations available for the OD of the object.
	ObsAvailable int64 `json:"obsAvailable"`
	// The number of observations accepted for the OD of the object.
	ObsUsed int64 `json:"obsUsed"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by state vector source to indicate the target
	// onorbit object of this state vector. This may be an internal identifier and not
	// necessarily map to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
	Partials string `json:"partials"`
	// The pedigree of state vector, or methods used for its generation to include
	// state update/orbit determination, propagation from another state, or a state
	// from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
	// CONJUNCTION, FLIGHT_PLAN).
	Pedigree string `json:"pedigree"`
	// Polar Wander Motion X (arc seconds).
	PolarMotionX float64 `json:"polarMotionX"`
	// Polar Wander Motion Y (arc seconds).
	PolarMotionY float64 `json:"polarMotionY"`
	// One sigma position uncertainty, in kilometers.
	PosUnc float64 `json:"posUnc"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// The recommended OD time span calculated for the object, expressed in days.
	RecOdSpan float64 `json:"recODSpan"`
	// The reference frame of the cartesian orbital states. If the referenceFrame is
	// null it is assumed to be J2000.
	//
	// Any of "J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF".
	ReferenceFrame string `json:"referenceFrame"`
	// The percentage of residuals accepted in the OD of the object.
	ResidualsAcc float64 `json:"residualsAcc"`
	// Epoch revolution number.
	RevNo int64 `json:"revNo"`
	// The Weighted Root Mean Squared (RMS) of the differential correction on the
	// target object that produced this vector. WRMS is a quality indicator of the
	// state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
	// Least Squares (BLS) processes.
	Rms float64 `json:"rms"`
	// Satellite/Catalog number of the target OnOrbit object.
	SatNo int64 `json:"satNo"`
	// Array containing the standard deviation of error in target object position, U, V
	// and W direction respectively (km).
	SigmaPosUvw []float64 `json:"sigmaPosUVW"`
	// Array containing the standard deviation of error in target object velocity, U, V
	// and W direction respectively (km/sec).
	SigmaVelUvw []float64 `json:"sigmaVelUVW"`
	// Average solar flux geomagnetic index.
	SolarFluxApAvg float64 `json:"solarFluxAPAvg"`
	// F10 (10.7 cm) solar flux value.
	SolarFluxF10 float64 `json:"solarFluxF10"`
	// F10 (10.7 cm) solar flux 81-day average value.
	SolarFluxF10Avg float64 `json:"solarFluxF10Avg"`
	// Boolean indicating use of solar radiation pressure perturbations for this
	// vector.
	SolarRadPress bool `json:"solarRadPress"`
	// Area-to-mass ratio coefficient for solar radiation pressure.
	SolarRadPressCoeff float64 `json:"solarRadPressCoeff"`
	// Boolean indicating use of solid earth tide perturbations for this vector.
	SolidEarthTides bool `json:"solidEarthTides"`
	// Optional array of UDL data (observation) UUIDs used to build this state vector.
	// See the associated sourcedDataTypes array for the specific types of observations
	// for the positionally corresponding UUIDs in this array (the two arrays must
	// match in size).
	SourcedData []string `json:"sourcedData"`
	// Optional array of UDL observation data types used to build this state vector
	// (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
	// UUIDs of observations for the positionally corresponding data types in this
	// array (the two arrays must match in size).
	//
	// Any of "EO", "RADAR", "RF", "DOA", "ELSET", "SV".
	SourcedDataTypes []string `json:"sourcedDataTypes"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// The effective area of the object exposed to solar radiation pressure, expressed
	// in meters^2.
	SrpArea float64 `json:"srpArea"`
	// Integrator step mode (AUTO, TIME, or S).
	StepMode string `json:"stepMode"`
	// Initial integration step size (seconds).
	StepSize float64 `json:"stepSize"`
	// Initial step size selection (AUTO or MANUAL).
	StepSizeSelection string `json:"stepSizeSelection"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
	// in seconds.
	TaiUtc float64 `json:"taiUtc"`
	// Model parameter value for thrust acceleration (m/s2).
	ThrustAccel float64 `json:"thrustAccel"`
	// The number of sensor tracks available for the OD of the object.
	TracksAvail int64 `json:"tracksAvail"`
	// The number of sensor tracks accepted for the OD of the object.
	TracksUsed int64 `json:"tracksUsed"`
	// Optional identifier to track a commercial or marketplace transaction executed to
	// produce this data.
	TransactionID string `json:"transactionId"`
	// Boolean indicating this state vector was unable to be correlated to a known
	// object. This flag should only be set to true by data providers after an attempt
	// to correlate to an OnOrbit object was made and failed. If unable to correlate,
	// the 'origObjectId' field may be populated with an internal data provider
	// specific identifier.
	Uct bool `json:"uct"`
	// Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
	Ut1Rate float64 `json:"ut1Rate"`
	// Universal Time-1 (UT1) minus UTC offset, in seconds.
	Ut1Utc float64 `json:"ut1Utc"`
	// One sigma velocity uncertainty, in kilometers/second.
	VelUnc float64 `json:"velUnc"`
	// Cartesian X acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xaccel float64 `json:"xaccel"`
	// Cartesian X position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xpos float64 `json:"xpos"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt1 float64 `json:"xposAlt1"`
	// Cartesian X position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XposAlt2 float64 `json:"xposAlt2"`
	// Cartesian X velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xvel float64 `json:"xvel"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt1 float64 `json:"xvelAlt1"`
	// Cartesian X velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	XvelAlt2 float64 `json:"xvelAlt2"`
	// Cartesian Y acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yaccel float64 `json:"yaccel"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Ypos float64 `json:"ypos"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt1 float64 `json:"yposAlt1"`
	// Cartesian Y position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YposAlt2 float64 `json:"yposAlt2"`
	// Cartesian Y velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yvel float64 `json:"yvel"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt1 float64 `json:"yvelAlt1"`
	// Cartesian Y velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	YvelAlt2 float64 `json:"yvelAlt2"`
	// Cartesian Z acceleration of target, in kilometers/second^2, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zaccel float64 `json:"zaccel"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zpos float64 `json:"zpos"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt1 float64 `json:"zposAlt1"`
	// Cartesian Z position of the target, in kilometers, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZposAlt2 float64 `json:"zposAlt2"`
	// Cartesian Z velocity of target, in kilometers/second, in the specified
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zvel float64 `json:"zvel"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt1ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt1 float64 `json:"zvelAlt1"`
	// Cartesian Z velocity of the target, in kilometers/second, in the specified
	// alt2ReferenceFrame. Alternate reference frames are optional and are intended to
	// allow a data source to provide an equivalent vector in a different cartesian
	// frame than the primary vector.
	ZvelAlt2 float64 `json:"zvelAlt2"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Epoch                 respjson.Field
		Source                respjson.Field
		ActualOdSpan          respjson.Field
		Algorithm             respjson.Field
		Alt1ReferenceFrame    respjson.Field
		Alt2ReferenceFrame    respjson.Field
		Area                  respjson.Field
		BDot                  respjson.Field
		CmOffset              respjson.Field
		Cov                   respjson.Field
		CovMethod             respjson.Field
		CovReferenceFrame     respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Descriptor            respjson.Field
		DragArea              respjson.Field
		DragCoeff             respjson.Field
		DragModel             respjson.Field
		Edr                   respjson.Field
		EffectiveFrom         respjson.Field
		EffectiveUntil        respjson.Field
		EqCov                 respjson.Field
		ErrorControl          respjson.Field
		FixedStep             respjson.Field
		GeopotentialModel     respjson.Field
		Iau1980Terms          respjson.Field
		IDOnOrbit             respjson.Field
		IDOrbitDetermination  respjson.Field
		IDStateVector         respjson.Field
		IntegratorMode        respjson.Field
		InTrackThrust         respjson.Field
		LastObEnd             respjson.Field
		LastObStart           respjson.Field
		LeapSecondTime        respjson.Field
		LunarSolar            respjson.Field
		Mass                  respjson.Field
		ObsAvailable          respjson.Field
		ObsUsed               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		Partials              respjson.Field
		Pedigree              respjson.Field
		PolarMotionX          respjson.Field
		PolarMotionY          respjson.Field
		PosUnc                respjson.Field
		RawFileUri            respjson.Field
		RecOdSpan             respjson.Field
		ReferenceFrame        respjson.Field
		ResidualsAcc          respjson.Field
		RevNo                 respjson.Field
		Rms                   respjson.Field
		SatNo                 respjson.Field
		SigmaPosUvw           respjson.Field
		SigmaVelUvw           respjson.Field
		SolarFluxApAvg        respjson.Field
		SolarFluxF10          respjson.Field
		SolarFluxF10Avg       respjson.Field
		SolarRadPress         respjson.Field
		SolarRadPressCoeff    respjson.Field
		SolidEarthTides       respjson.Field
		SourcedData           respjson.Field
		SourcedDataTypes      respjson.Field
		SourceDl              respjson.Field
		SrpArea               respjson.Field
		StepMode              respjson.Field
		StepSize              respjson.Field
		StepSizeSelection     respjson.Field
		Tags                  respjson.Field
		TaiUtc                respjson.Field
		ThrustAccel           respjson.Field
		TracksAvail           respjson.Field
		TracksUsed            respjson.Field
		TransactionID         respjson.Field
		Uct                   respjson.Field
		Ut1Rate               respjson.Field
		Ut1Utc                respjson.Field
		VelUnc                respjson.Field
		Xaccel                respjson.Field
		Xpos                  respjson.Field
		XposAlt1              respjson.Field
		XposAlt2              respjson.Field
		Xvel                  respjson.Field
		XvelAlt1              respjson.Field
		XvelAlt2              respjson.Field
		Yaccel                respjson.Field
		Ypos                  respjson.Field
		YposAlt1              respjson.Field
		YposAlt2              respjson.Field
		Yvel                  respjson.Field
		YvelAlt1              respjson.Field
		YvelAlt2              respjson.Field
		Zaccel                respjson.Field
		Zpos                  respjson.Field
		ZposAlt1              respjson.Field
		ZposAlt2              respjson.Field
		Zvel                  respjson.Field
		ZvelAlt1              respjson.Field
		ZvelAlt2              respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CollectRequestFullStateVector) RawJSON() string { return r.JSON.raw }
func (r *CollectRequestFullStateVector) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collect response supports the response and status of individual collect
// requests. Each response is referenced by the UUID of the request, and contains
// information including the status of the request, collection times and types, and
// reference(s) to the observations collected. There may be multiple responses
// associated with a request, either from multiple collectors or to relay status
// changes prior to completion and delivery.
type CollectResponseFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode CollectResponseFullDataMode `json:"dataMode,required"`
	// Unique identifier of the request associated with this response.
	IDRequest string `json:"idRequest,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The actual end time of the collect or contact, in ISO 8601 UTC format.
	ActualEndTime time.Time `json:"actualEndTime" format:"date-time"`
	// The actual start time of the collect or contact, in ISO 8601 UTC format.
	ActualStartTime time.Time `json:"actualStartTime" format:"date-time"`
	// Proposed alternative end time, in ISO 8601 UTC format.
	AltEndTime time.Time `json:"altEndTime" format:"date-time"`
	// Proposed alternative start time, in ISO 8601 UTC format.
	AltStartTime time.Time `json:"altStartTime" format:"date-time"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Error code associated with this request/response.
	ErrCode string `json:"errCode"`
	// UUID from external systems. This field has no meaning within UDL and is provided
	// as a convenience for systems that require tracking of internal system generated
	// ID.
	ExternalID string `json:"externalId"`
	// Unique identifier of the target on-orbit object associated with this response.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the parent plan or schedule associated with the
	// request/response.
	IDPlan string `json:"idPlan"`
	// Unique identifier of the reporting sensor.
	IDSensor string `json:"idSensor"`
	// Notes or comments associated with this response.
	Notes string `json:"notes"`
	// Model object representing on-orbit objects or satellites in the system.
	OnOrbit OnorbitFull `json:"onOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by data source to indicate the target object of
	// this response. This may be an internal identifier and not necessarily a valid
	// satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Optional identifier provided by the collection source to indicate the sensor
	// identifier responding to this collect or contact. This may be an internal
	// identifier and not necessarily a valid sensor ID.
	OrigSensorID string `json:"origSensorId"`
	// Satellite/catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo"`
	// Array of UUIDs of the UDL data record(s) collected in response to the associated
	// request. See the associated 'srcTyps' array for the specific types of data,
	// positionally corresponding to the UUIDs in this array. The 'srcTyps' and
	// 'srcIds' arrays must match in size. The appropriate API operation can be used to
	// retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
	SrcIDs []string `json:"srcIds"`
	// Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or
	// produced in response to the associated request. See the associated 'srcIds'
	// array for the record UUIDs, positionally corresponding to the record types in
	// this array. The 'srcTyps' and 'srcIds' arrays must match in size. The
	// appropriate API operation can be used to retrieve the specified object(s) (e.g.
	// /udl/rfobservation/{uuid}).
	SrcTyps []string `json:"srcTyps"`
	// The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED,
	// FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
	//
	// ACCEPTED: The collect or contact request has been received and accepted.
	//
	// CANCELLED: A previously scheduled collect or contact whose execution was
	// cancelled.
	//
	// COLLECTED: The collect has been accomplished. A collected state implies that
	// additional activity is required for delivery/completion.
	//
	// COMPLETED: The collect or contact has been completed. For many systems completed
	// and delivered constitute an equivalent successful end state.
	//
	// DELIVERED: The collected observation(s) have been delivered to the requestor.
	// For many systems completed and delivered constitute an equivalent successful end
	// state. A DELIVERED state is typically used for systems that exhibit a delay
	// between collect and delivery, such as with space-based systems which require
	// ground contact to deliver observations.
	//
	// FAILED: The collect or contact was attempted and failed, or the delivery of the
	// collected observation(s) failed. A FAILED status may be accompanied by an error
	// code (errCode), if available.
	//
	// PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been
	// accomplished, but the full request is incomplete. A PARTIAL status should
	// ultimately be resolved to an end state.
	//
	// PROPOSED: Indicates that the request was received and alternate collect or
	// contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate
	// is accepted by the requestor the current request should be cancelled and a new
	// request created.
	//
	// REJECTED: The request has been received and rejected by the provider. A REJECTED
	// status may be accompanied by an explanation (notes) of the reason that the
	// request was rejected.
	//
	// SCHEDULED: The request was received and has been scheduled for execution.
	Status string `json:"status"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// Optional task ID associated with the request/response.
	TaskID string `json:"taskId"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDRequest             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		ActualEndTime         respjson.Field
		ActualStartTime       respjson.Field
		AltEndTime            respjson.Field
		AltStartTime          respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		ErrCode               respjson.Field
		ExternalID            respjson.Field
		IDOnOrbit             respjson.Field
		IDPlan                respjson.Field
		IDSensor              respjson.Field
		Notes                 respjson.Field
		OnOrbit               respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OrigObjectID          respjson.Field
		OrigSensorID          respjson.Field
		SatNo                 respjson.Field
		SrcIDs                respjson.Field
		SrcTyps               respjson.Field
		Status                respjson.Field
		Tags                  respjson.Field
		TaskID                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r CollectResponseFull) RawJSON() string { return r.JSON.raw }
func (r *CollectResponseFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type CollectResponseFullDataMode string

const (
	CollectResponseFullDataModeReal      CollectResponseFullDataMode = "REAL"
	CollectResponseFullDataModeTest      CollectResponseFullDataMode = "TEST"
	CollectResponseFullDataModeSimulated CollectResponseFullDataMode = "SIMULATED"
	CollectResponseFullDataModeExercise  CollectResponseFullDataMode = "EXERCISE"
)

// Historical drift rates for GEO Onorbit objects resulting from updates to
// OnorbitDetails driftRate values.
type DriftHistoryAbridged struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode DriftHistoryAbridgedDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// GEO drift rate, if applicable in degrees per day.
	DriftRate float64 `json:"driftRate"`
	// Time the drift rate was replaced with another value and no longer the current
	// value.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// UUID of the parent Onorbit record.
	IDOnOrbit string `json:"idOnOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedBy             respjson.Field
		DriftRate             respjson.Field
		EffectiveUntil        respjson.Field
		IDOnOrbit             respjson.Field
		Origin                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DriftHistoryAbridged) RawJSON() string { return r.JSON.raw }
func (r *DriftHistoryAbridged) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type DriftHistoryAbridgedDataMode string

const (
	DriftHistoryAbridgedDataModeReal      DriftHistoryAbridgedDataMode = "REAL"
	DriftHistoryAbridgedDataModeTest      DriftHistoryAbridgedDataMode = "TEST"
	DriftHistoryAbridgedDataModeSimulated DriftHistoryAbridgedDataMode = "SIMULATED"
	DriftHistoryAbridgedDataModeExercise  DriftHistoryAbridgedDataMode = "EXERCISE"
)

// Historical drift rates for GEO Onorbit objects resulting from updates to
// OnorbitDetails driftRate values.
type DriftHistoryFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode DriftHistoryFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// GEO drift rate, if applicable in degrees per day.
	DriftRate float64 `json:"driftRate"`
	// Time the drift rate was replaced with another value and no longer the current
	// value.
	EffectiveUntil time.Time `json:"effectiveUntil" format:"date-time"`
	// UUID of the parent Onorbit record.
	IDOnOrbit string `json:"idOnOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedBy             respjson.Field
		DriftRate             respjson.Field
		EffectiveUntil        respjson.Field
		IDOnOrbit             respjson.Field
		Origin                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r DriftHistoryFull) RawJSON() string { return r.JSON.raw }
func (r *DriftHistoryFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type DriftHistoryFullDataMode string

const (
	DriftHistoryFullDataModeReal      DriftHistoryFullDataMode = "REAL"
	DriftHistoryFullDataModeTest      DriftHistoryFullDataMode = "TEST"
	DriftHistoryFullDataModeSimulated DriftHistoryFullDataMode = "SIMULATED"
	DriftHistoryFullDataModeExercise  DriftHistoryFullDataMode = "EXERCISE"
)

// Model representation of Earth Orientation Parameters (EOP) produced by the IERS
// (International Earth Rotation and Reference Systems Service). Earth Orientation
// Parameters describe the irregularities of the earth's rotation. Technically,
// they are the parameters which provide the rotation of the ITRS (International
// Terrestrial Reference System) to the ICRS (International Celestial Reference
// System) as a function of time. Universal time -- Universal time (UT1) is the
// time of the earth clock, which performs one revolution in about 24h. It is
// practically proportional to the sidereal time. The excess revolution time is
// called length of day (LOD). Coordinates of the pole -- x and y are the
// coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS
// Reference Pole. The CEP differs from the instantaneous rotation axis by
// quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The
// x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the
// direction 90 degrees West longitude. Celestial pole offsets -- Celestial pole
// offsets are described in the IAU Precession and Nutation models. The observed
// differences with respect to the conventional celestial pole position defined by
// the models are monitored and reported by the IERS. IERS Bulletins A and B
// provide current information on the Earth's orientation in the IERS Reference
// System. This includes Universal Time, coordinates of the terrestrial pole, and
// celestial pole offsets. Bulletin A gives an advanced solution updated weekly;
// the standard solution is given monthly in Bulletin B. Fields suffixed with 'B'
// are Bulletin B values. All solutions are continuous within their respective
// uncertainties. Bulletin A is issued by the IERS Rapid Service/Prediction Centre
// at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the
// IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports
// the latest determinations for polar motion, UT1-UTC, and nutation offsets at
// daily intervals based on a combination of contributed analysis results using
// data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging
// (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging
// (LLR). Predictions for variations a year into the future are also provided.
// Meteorological predictions of variations in Atmospheric Angular Momentum (AAM)
// are used to aid in the prediction of near-term UT1-UTC changes. This publication
// is prepared by the IERS Rapid Service/Prediction Center.
type EopFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EopFullDataMode `json:"dataMode,required"`
	// Effective date/time for the EOP values in ISO8601 UTC format. The values could
	// be current or predicted.
	EopDate time.Time `json:"eopDate,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory
	// of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
	// arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
	DEpsilon float64 `json:"dEpsilon"`
	// The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory
	// of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
	// arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
	DEpsilonB float64 `json:"dEpsilonB"`
	// The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
	DEpsilonUnc float64 `json:"dEpsilonUnc"`
	// The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory
	// of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
	// arc. Note: dPSI is not used when this record represents IAU 2000 data.
	DPsi float64 `json:"dPSI"`
	// The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory
	// of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
	// arc. Note: dPSIB is not used when this record represents IAU 2000 data.
	DPsib float64 `json:"dPSIB"`
	// The estimated uncertainty/error in the dPSI value in milliseconds of arc.
	DPsiUnc float64 `json:"dPSIUnc"`
	// The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A
	// Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is
	// not used when this record represents IAU 1980 data.
	DX float64 `json:"dX"`
	// The Bulletin B celestial pole offset along the X-axis with respect to the IAU
	// 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note:
	// dXB is not used when this record represents IAU 1980 data.
	DXb float64 `json:"dXB"`
	// The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of
	// arc.
	DXUnc float64 `json:"dXUnc"`
	// The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A
	// Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is
	// not used when this record represents IAU 1980 data.
	DY float64 `json:"dY"`
	// The Bulletin B celestial pole offset along the Y-axis with respect to the IAU
	// 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note:
	// dYB is not used when this record represents IAU 1980 data.
	DYb float64 `json:"dYB"`
	// The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of
	// arc.
	DYUnc float64 `json:"dYUnc"`
	// Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the
	// time of the earth clock, which performs one revolution in about 24h. It is
	// practically proportional to the sidereal time. The excess revolution time is
	// called length of day (LOD).
	Lod float64 `json:"lod"`
	// The estimated uncertainty/error in the lod value in seconds.
	LodUnc float64 `json:"lodUnc"`
	// Flag indicating Issued (I), or Predicted (P) for this record's nutation values
	// (dPSI and dEpsilon).
	//
	// Any of "I", "P".
	NutationState EopFullNutationState `json:"nutationState"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Flag indicating Issued (I), or Predicted (P) for this record's polar motion
	// values.
	//
	// Any of "I", "P".
	PolarMotionState EopFullPolarMotionState `json:"polarMotionState"`
	// The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion
	// of the Earth is the motion of the Earth's rotational axis relative to its crust.
	// This is measured with respect to a reference frame in which the solid Earth is
	// fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
	// Measured in arc seconds.
	PolarMotionX float64 `json:"polarMotionX"`
	// Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of
	// the Earth is the motion of the Earth's rotational axis relative to its crust.
	// This is measured with respect to a reference frame in which the solid Earth is
	// fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
	// Measured in arc seconds.
	PolarMotionXb float64 `json:"polarMotionXB"`
	// Estimated uncertainty/error in polarMotionX value in arc seconds.
	PolarMotionXUnc float64 `json:"polarMotionXUnc"`
	// The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion
	// of the Earth is the motion of the Earth's rotational axis relative to its crust.
	// This is measured with respect to a reference frame in which the solid Earth is
	// fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
	// Measured in arc seconds.
	PolarMotionY float64 `json:"polarMotionY"`
	// Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of
	// the Earth is the motion of the Earth's rotational axis relative to its crust.
	// This is measured with respect to a reference frame in which the solid Earth is
	// fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
	// Measured in arc seconds.
	PolarMotionYb float64 `json:"polarMotionYB"`
	// Estimated uncertainty/error in polarMotionY value in arc seconds.
	PolarMotionYUnc float64 `json:"polarMotionYUnc"`
	// The IAU Theory of Precession and Theory of Nutation applied to the data in this
	// record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980
	// Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of
	// Precession and Nutation.
	PrecessionNutationStd string `json:"precessionNutationStd"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri string `json:"rawFileURI"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// The difference between the Bulletin A UT1 and UTC time scales as of eopDate in
	// seconds.
	Ut1Utc float64 `json:"ut1UTC"`
	// The Bulletin B difference between the UT1 and UTC time scales as of eopDate in
	// seconds.
	Ut1Utcb float64 `json:"ut1UTCB"`
	// Flag indicating Issued (I), or Predicted (P) for this record”s Bulletin A
	// UT1-UTC values.
	//
	// Any of "I", "P".
	Ut1UtcState EopFullUt1UtcState `json:"ut1UTCState"`
	// The estimated uncertainty/error in the ut1UTC value in seconds.
	Ut1UtcUnc float64 `json:"ut1UTCUnc"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		EopDate               respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DEpsilon              respjson.Field
		DEpsilonB             respjson.Field
		DEpsilonUnc           respjson.Field
		DPsi                  respjson.Field
		DPsib                 respjson.Field
		DPsiUnc               respjson.Field
		DX                    respjson.Field
		DXb                   respjson.Field
		DXUnc                 respjson.Field
		DY                    respjson.Field
		DYb                   respjson.Field
		DYUnc                 respjson.Field
		Lod                   respjson.Field
		LodUnc                respjson.Field
		NutationState         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PolarMotionState      respjson.Field
		PolarMotionX          respjson.Field
		PolarMotionXb         respjson.Field
		PolarMotionXUnc       respjson.Field
		PolarMotionY          respjson.Field
		PolarMotionYb         respjson.Field
		PolarMotionYUnc       respjson.Field
		PrecessionNutationStd respjson.Field
		RawFileUri            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		Ut1Utc                respjson.Field
		Ut1Utcb               respjson.Field
		Ut1UtcState           respjson.Field
		Ut1UtcUnc             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EopFull) RawJSON() string { return r.JSON.raw }
func (r *EopFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EopFullDataMode string

const (
	EopFullDataModeReal      EopFullDataMode = "REAL"
	EopFullDataModeTest      EopFullDataMode = "TEST"
	EopFullDataModeSimulated EopFullDataMode = "SIMULATED"
	EopFullDataModeExercise  EopFullDataMode = "EXERCISE"
)

// Flag indicating Issued (I), or Predicted (P) for this record's nutation values
// (dPSI and dEpsilon).
type EopFullNutationState string

const (
	EopFullNutationStateI EopFullNutationState = "I"
	EopFullNutationStateP EopFullNutationState = "P"
)

// Flag indicating Issued (I), or Predicted (P) for this record's polar motion
// values.
type EopFullPolarMotionState string

const (
	EopFullPolarMotionStateI EopFullPolarMotionState = "I"
	EopFullPolarMotionStateP EopFullPolarMotionState = "P"
)

// Flag indicating Issued (I), or Predicted (P) for this record”s Bulletin A
// UT1-UTC values.
type EopFullUt1UtcState string

const (
	EopFullUt1UtcStateI EopFullUt1UtcState = "I"
	EopFullUt1UtcStateP EopFullUt1UtcState = "P"
)

// An ephemeris record is a position and velocity vector identifying the location
// and trajectory of an on-orbit object at a specified time. Ephemeris points,
// including covariance, are in kilometer and second based units in a user
// specified reference frame, with ECI J2K being preferred. The EphemerisSet ID
// (esId) links all points associated with an ephemeris set. The 'EphemerisSet'
// record contains details of the underlying data and propagation models used in
// the generation of the ephemeris. Ephemeris points must be retrieved by
// specifying the parent EphemerisSet ID (esId).
type EphemerisFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EphemerisFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Time associated with the Ephemeris Point, in ISO8601 UTC format.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Cartesian X position of target, in km, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xpos float64 `json:"xpos,required"`
	// Cartesian X velocity of target, in km/sec, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xvel float64 `json:"xvel,required"`
	// Cartesian Y position of target, in km, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Ypos float64 `json:"ypos,required"`
	// Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yvel float64 `json:"yvel,required"`
	// Cartesian Z position of target, in km, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zpos float64 `json:"zpos,required"`
	// Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zvel float64 `json:"zvel,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Covariance matrix, in kilometer and second based units, in the specified
	// Ephemeris Set covReferenceFrame. If the covReferenceFrame from the EphemerisSet
	// table is null it is assumed to be J2000. The array values represent the lower
	// triangular half of the position-velocity covariance matrix. The size of the
	// covariance matrix is dynamic, depending on whether the covariance for position
	// only or position & velocity. The covariance elements are position dependent
	// within the array with values ordered as follows:
	//
	// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
	//
	// x&nbsp;&nbsp;&nbsp;&nbsp;1
	//
	// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
	//
	// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
	//
	// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
	//
	// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
	//
	// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;
	// 21
	//
	// The array containing the covariance matrix elements will be of length 6 for
	// position only covariance, or length 21 for position-velocity covariance. The cov
	// array should contain only the lower left triangle values from top left down to
	// bottom right, in order.
	Cov []float64 `json:"cov"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the parent EphemerisSet, auto-generated by the system. The
	// esId (ephemerisSet id) is used to identify all individual ephemeris states
	// associated with a parent ephemerisSet.
	EsID string `json:"esId"`
	// Unique identifier of the on-orbit satellite object.
	IDOnOrbit string `json:"idOnOrbit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// Optional identifier provided by ephemeris source to indicate the target object
	// of this ephemeris. This may be an internal identifier and not necessarily map to
	// a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Xaccel float64 `json:"xaccel"`
	// Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Yaccel float64 `json:"yaccel"`
	// Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet
	// referenceFrame. If referenceFrame is null then J2K should be assumed.
	Zaccel float64 `json:"zaccel"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Source                respjson.Field
		Ts                    respjson.Field
		Xpos                  respjson.Field
		Xvel                  respjson.Field
		Ypos                  respjson.Field
		Yvel                  respjson.Field
		Zpos                  respjson.Field
		Zvel                  respjson.Field
		ID                    respjson.Field
		Cov                   respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EsID                  respjson.Field
		IDOnOrbit             respjson.Field
		Origin                respjson.Field
		OrigObjectID          respjson.Field
		Xaccel                respjson.Field
		Yaccel                respjson.Field
		Zaccel                respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EphemerisFull) RawJSON() string { return r.JSON.raw }
func (r *EphemerisFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EphemerisFullDataMode string

const (
	EphemerisFullDataModeReal      EphemerisFullDataMode = "REAL"
	EphemerisFullDataModeTest      EphemerisFullDataMode = "TEST"
	EphemerisFullDataModeSimulated EphemerisFullDataMode = "SIMULATED"
	EphemerisFullDataModeExercise  EphemerisFullDataMode = "EXERCISE"
)

// Casualty report and evacuation request. Used to report and request support to
// evacuate friendly and enemy casualties.
type EvacFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EvacFullDataMode `json:"dataMode,required"`
	// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	PickupLat float64 `json:"pickupLat,required"`
	// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	PickupLon float64 `json:"pickupLon,required"`
	// The request time, in ISO 8601 UTC format.
	ReqTime time.Time `json:"reqTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// The type of this medevac record (REQUEST, RESPONSE).
	//
	// Any of "REQUEST", "RESPONSE".
	Type EvacFullType `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Identity and medical information on the patient to be evacuated.
	CasualtyInfo []EvacFullCasualtyInfo `json:"casualtyInfo"`
	// Radius of circular area about lat/lon point, in meters (1-sigma, if representing
	// error).
	Ce float64 `json:"ce"`
	// The contact frequency, in Hz, of the agency or zone controller.
	CntctFreq float64 `json:"cntctFreq"`
	// Additional comments for the medevac mission.
	Comments string `json:"comments"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Data defining any enemy intelligence reported by the requestor.
	EnemyData []EvacFullEnemyData `json:"enemyData"`
	// Unique identifier of a weather report associated with this evacuation.
	IDWeatherReport string `json:"idWeatherReport"`
	// Height above lat/lon point, in meters (1-sigma, if representing linear error).
	Le float64 `json:"le"`
	// UUID identifying the medevac mission, which should remain the same on subsequent
	// posts related to the same medevac mission.
	MedevacID string `json:"medevacId"`
	// Flag indicating whether the mission requires medical personnel.
	MedicReq bool `json:"medicReq"`
	// The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
	MissionType string `json:"missionType"`
	// Number of ambulatory personnel requiring evacuation.
	NumAmbulatory int64 `json:"numAmbulatory"`
	// The count of people requiring medevac.
	NumCasualties int64 `json:"numCasualties"`
	// Number of people Killed In Action.
	NumKia int64 `json:"numKIA"`
	// Number of littered personnel requiring evacuation.
	NumLitter int64 `json:"numLitter"`
	// Number of people Wounded In Action.
	NumWia int64 `json:"numWIA"`
	// Amplifying data for the terrain describing important obstacles in or around the
	// zone.
	ObstaclesRemarks string `json:"obstaclesRemarks"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a
	// point height above ellipsoid, and negative values indicate a point height below
	// ellipsoid.
	PickupAlt float64 `json:"pickupAlt"`
	// The expected pickup time, in ISO 8601 UTC format.
	PickupTime time.Time `json:"pickupTime" format:"date-time"`
	// Related document ids.
	RelatedDocs []EvacFullRelatedDoc `json:"relatedDocs"`
	// The call sign of this medevac requestor.
	ReqCallSign string `json:"reqCallSign"`
	// Externally provided Medevac request number (e.g. MED.1.223908).
	ReqNum string `json:"reqNum"`
	// Short description of the terrain features of the pickup location (WOODS, TREES,
	// PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL,
	// SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
	Terrain string `json:"terrain"`
	// Amplifying data for the terrain describing any notable additional terrain
	// features.
	TerrainRemarks string `json:"terrainRemarks"`
	// The call sign of the zone controller.
	ZoneContrCallSign string `json:"zoneContrCallSign"`
	// Flag indicating that the pickup site is hot and hostiles are in the area.
	ZoneHot bool `json:"zoneHot"`
	// The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES,
	// MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER
	// DESIGNATOR, STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS,
	// INFRARED, ILLUMINATION, FRATRICIDE FENCE).
	ZoneMarking string `json:"zoneMarking"`
	// Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE,
	// BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
	ZoneMarkingColor string `json:"zoneMarkingColor"`
	// The name of the zone.
	ZoneName string `json:"zoneName"`
	// The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY
	// IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
	ZoneSecurity string `json:"zoneSecurity"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		PickupLat             respjson.Field
		PickupLon             respjson.Field
		ReqTime               respjson.Field
		Source                respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		CasualtyInfo          respjson.Field
		Ce                    respjson.Field
		CntctFreq             respjson.Field
		Comments              respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EnemyData             respjson.Field
		IDWeatherReport       respjson.Field
		Le                    respjson.Field
		MedevacID             respjson.Field
		MedicReq              respjson.Field
		MissionType           respjson.Field
		NumAmbulatory         respjson.Field
		NumCasualties         respjson.Field
		NumKia                respjson.Field
		NumLitter             respjson.Field
		NumWia                respjson.Field
		ObstaclesRemarks      respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PickupAlt             respjson.Field
		PickupTime            respjson.Field
		RelatedDocs           respjson.Field
		ReqCallSign           respjson.Field
		ReqNum                respjson.Field
		Terrain               respjson.Field
		TerrainRemarks        respjson.Field
		ZoneContrCallSign     respjson.Field
		ZoneHot               respjson.Field
		ZoneMarking           respjson.Field
		ZoneMarkingColor      respjson.Field
		ZoneName              respjson.Field
		ZoneSecurity          respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFull) RawJSON() string { return r.JSON.raw }
func (r *EvacFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EvacFullDataMode string

const (
	EvacFullDataModeReal      EvacFullDataMode = "REAL"
	EvacFullDataModeTest      EvacFullDataMode = "TEST"
	EvacFullDataModeSimulated EvacFullDataMode = "SIMULATED"
	EvacFullDataModeExercise  EvacFullDataMode = "EXERCISE"
)

// The type of this medevac record (REQUEST, RESPONSE).
type EvacFullType string

const (
	EvacFullTypeRequest  EvacFullType = "REQUEST"
	EvacFullTypeResponse EvacFullType = "RESPONSE"
)

type EvacFullCasualtyInfo struct {
	// The patient age, in years.
	Age int64 `json:"age"`
	// Allergy information.
	Allergy []EvacFullCasualtyInfoAllergy `json:"allergy"`
	// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O
	// NEG).
	BloodType string `json:"bloodType"`
	// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES,
	// BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY
	// PART).
	BodyPart string `json:"bodyPart"`
	// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
	// in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
	// degrees, and altitude, in meters, of the burial location. This array must
	// contain a minimum of 2 elements (latitude and longitude), and may contain an
	// optional 3rd element (altitude).
	BurialLocation []float64 `json:"burialLocation"`
	// The call sign of this patient.
	CallSign string `json:"callSign"`
	// Unique identifier for the patient care provider.
	CareProviderUrn string `json:"careProviderUrn"`
	// Optional casualty key.
	CasualtyKey string `json:"casualtyKey"`
	// The type of medical issue resulting in the need to evacuate the patient (NON
	// BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION,
	// BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION,
	// DENIAL, COMBAT STRESS).
	CasualtyType string `json:"casualtyType"`
	// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
	// in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
	// degrees, and altitude, in meters, of the collection point. This array must
	// contain a minimum of 2 elements (latitude and longitude), and may contain an
	// optional 3rd element (altitude).
	CollectionPoint []float64 `json:"collectionPoint"`
	// Additional comments on the patient's casualty information.
	Comments string `json:"comments"`
	// Health condition information.
	Condition []EvacFullCasualtyInfoCondition `json:"condition"`
	// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL,
	// CHEMICAL).
	ContamType string `json:"contamType"`
	// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE
	// WOUNDED, EVACUATE DECEASED, INTERRED).
	Disposition string `json:"disposition"`
	// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD
	// SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL
	// STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
	DispositionType string `json:"dispositionType"`
	// Medical condition causation information.
	Etiology []EvacFullCasualtyInfoEtiology `json:"etiology"`
	// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
	EvacType string `json:"evacType"`
	// The patient sex (MALE, FEMALE).
	Gender string `json:"gender"`
	// Health state information.
	HealthState []EvacFullCasualtyInfoHealthState `json:"healthState"`
	// Injury specifics.
	Injury []EvacFullCasualtyInfoInjury `json:"injury"`
	// Last 4 characters of the patient social security code, or equivalent.
	Last4Ssn string `json:"last4SSN"`
	// Medication specifics.
	Medication []EvacFullCasualtyInfoMedication `json:"medication"`
	// The patient common or legal name.
	Name string `json:"name"`
	// The country code indicating the citizenship of the patient.
	Nationality string `json:"nationality"`
	// The career field of this patient.
	OccSpeciality string `json:"occSpeciality"`
	// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND
	// MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY,
	// HOSTILE CIVILIAN).
	PatientIdentity string `json:"patientIdentity"`
	// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US
	// CIVILIAN, ENEMY POW).
	PatientStatus string `json:"patientStatus"`
	// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4,
	// O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3,
	// E-2, E-1, NONE, CIVILIAN).
	PayGrade string `json:"payGrade"`
	// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE,
	// URGENT SURGERY, CONVENIENCE).
	Priority string `json:"priority"`
	// The method used to generate this medevac report (DEVICE, GROUND COMBAT
	// PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
	ReportGen string `json:"reportGen"`
	// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC
	// format.
	ReportTime time.Time `json:"reportTime" format:"date-time"`
	// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR,
	// UNKNOWN SERVICE).
	Service string `json:"service"`
	// Array specifying if any special equipment is need for each of the evacuation of
	// this patient (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL
	// COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
	SpecMedEquip []string `json:"specMedEquip"`
	// Treatment information.
	Treatment []EvacFullCasualtyInfoTreatment `json:"treatment"`
	// Information obtained for vital signs.
	VitalSignData []EvacFullCasualtyInfoVitalSignData `json:"vitalSignData"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Age             respjson.Field
		Allergy         respjson.Field
		BloodType       respjson.Field
		BodyPart        respjson.Field
		BurialLocation  respjson.Field
		CallSign        respjson.Field
		CareProviderUrn respjson.Field
		CasualtyKey     respjson.Field
		CasualtyType    respjson.Field
		CollectionPoint respjson.Field
		Comments        respjson.Field
		Condition       respjson.Field
		ContamType      respjson.Field
		Disposition     respjson.Field
		DispositionType respjson.Field
		Etiology        respjson.Field
		EvacType        respjson.Field
		Gender          respjson.Field
		HealthState     respjson.Field
		Injury          respjson.Field
		Last4Ssn        respjson.Field
		Medication      respjson.Field
		Name            respjson.Field
		Nationality     respjson.Field
		OccSpeciality   respjson.Field
		PatientIdentity respjson.Field
		PatientStatus   respjson.Field
		PayGrade        respjson.Field
		Priority        respjson.Field
		ReportGen       respjson.Field
		ReportTime      respjson.Field
		Service         respjson.Field
		SpecMedEquip    respjson.Field
		Treatment       respjson.Field
		VitalSignData   respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfo) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfo) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoAllergy struct {
	// Additional comments on the patient's allergy information.
	Comments string `json:"comments"`
	// Type of patient allergy (e.g. PENICILLIN, SULFA, OTHER).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Comments    respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoAllergy) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoAllergy) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoCondition struct {
	// Body part location or body part referenced in condition. Intended as, but not
	// constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
	// LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
	// BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's condition.
	Comments string `json:"comments"`
	// Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
	Time time.Time `json:"time" format:"date-time"`
	// Health condition assessment. Intended as, but not constrained to, K07.1
	// Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM,
	// ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU
	// UNRESPONSIVE, etc.).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BodyPart    respjson.Field
		Comments    respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoCondition) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoCondition) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoEtiology struct {
	// The body part or location affected from the etiology. Intended as, but not
	// constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
	// LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
	// BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's etiology information.
	Comments string `json:"comments"`
	// Datetime of the discovery of the etiology state in ISO 8601 UTC format.
	Time time.Time `json:"time" format:"date-time"`
	// The cause or manner of causation of the medical condition. Intended as, but not
	// constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE,
	// BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN
	// THERMAL, etc.).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BodyPart    respjson.Field
		Comments    respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoEtiology) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoEtiology) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoHealthState struct {
	// Medical color code used to quickly identify various medical state (e.g. AMBER,
	// BLACK, BLUE, GRAY, NORMAL, RED).
	HealthStateCode string `json:"healthStateCode"`
	// Medical confidence factor.
	MedConfFactor int64 `json:"medConfFactor"`
	// Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
	Time time.Time `json:"time" format:"date-time"`
	// Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION,
	// LIFE SIGN, RADIATION, SHOCK, THERMAL).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		HealthStateCode respjson.Field
		MedConfFactor   respjson.Field
		Time            respjson.Field
		Type            respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoHealthState) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoHealthState) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoInjury struct {
	// Body part location of the injury. Intended as, but not constrained to, K07.1
	// Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT
	// BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW
	// FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's injury information.
	Comments string `json:"comments"`
	// The time of the injury, in ISO 8601 UTC format.
	Time time.Time `json:"time" format:"date-time"`
	// Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION,
	// BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN
	// INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS,
	// FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA,
	// IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY
	// SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER,
	// IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE
	// NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT,
	// PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BodyPart    respjson.Field
		Comments    respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoInjury) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoInjury) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoMedication struct {
	// Route of medication delivery (e.g. INJECTION, ORAL, etc.).
	AdminRoute string `json:"adminRoute"`
	// Body part location or body part referenced for medication. Intended as, but not
	// constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
	// LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
	// BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's medication information.
	Comments string `json:"comments"`
	// Quantity of medicine or drug administered or recommended to be taken at a
	// particular time.
	Dose string `json:"dose"`
	// The time that the medication was administered in ISO 8601 UTC format.
	Time time.Time `json:"time" format:"date-time"`
	// The type of medication administered. Intended as, but not constrained to, K07.1
	// Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC,
	// COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL,
	// HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA,
	// PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AdminRoute  respjson.Field
		BodyPart    respjson.Field
		Comments    respjson.Field
		Dose        respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoMedication) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoMedication) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoTreatment struct {
	// Body part location or body part treated or to be treated. Intended as, but not
	// constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
	// LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
	// BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
	BodyPart string `json:"bodyPart"`
	// Additional comments on the patient's treatment information.
	Comments string `json:"comments"`
	// Datetime of the treatment in ISO 8601 UTC format.
	Time time.Time `json:"time" format:"date-time"`
	// Type of treatment administered or to be administered. Intended as, but not
	// constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY
	// ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED,
	// AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC,
	// BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BodyPart    respjson.Field
		Comments    respjson.Field
		Time        respjson.Field
		Type        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoTreatment) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoTreatment) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullCasualtyInfoVitalSignData struct {
	// Medical confidence factor.
	MedConfFactor int64 `json:"medConfFactor"`
	// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
	Time time.Time `json:"time" format:"date-time"`
	// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE,
	// TEMPERATURE CORE, etc.).
	VitalSign string `json:"vitalSign"`
	// Vital sign value 1. The content of this field is dependent on the type of vital
	// sign being measured (see the vitalSign field).
	VitalSign1 float64 `json:"vitalSign1"`
	// Vital sign value 2. The content of this field is dependent on the type of vital
	// sign being measured (see the vitalSign field).
	VitalSign2 float64 `json:"vitalSign2"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		MedConfFactor respjson.Field
		Time          respjson.Field
		VitalSign     respjson.Field
		VitalSign1    respjson.Field
		VitalSign2    respjson.Field
		ExtraFields   map[string]respjson.Field
		raw           string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullCasualtyInfoVitalSignData) RawJSON() string { return r.JSON.raw }
func (r *EvacFullCasualtyInfoVitalSignData) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullEnemyData struct {
	// Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST,
	// SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
	DirToEnemy string `json:"dirToEnemy"`
	// Comments provided by friendlies about the evac zone.
	FriendliesRemarks string `json:"friendliesRemarks"`
	// Hot Landing Zone remarks.
	HlzRemarks string `json:"hlzRemarks"`
	// The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
	HostileFireType string `json:"hostileFireType"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DirToEnemy        respjson.Field
		FriendliesRemarks respjson.Field
		HlzRemarks        respjson.Field
		HostileFireType   respjson.Field
		ExtraFields       map[string]respjson.Field
		raw               string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullEnemyData) RawJSON() string { return r.JSON.raw }
func (r *EvacFullEnemyData) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullRelatedDoc struct {
	// List of data sources related to this document.
	DataSourceRefs []EvacFullRelatedDocDataSourceRef `json:"dataSourceRefs"`
	// The document id of the related document.
	DocumentID string `json:"documentId"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DataSourceRefs respjson.Field
		DocumentID     respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullRelatedDoc) RawJSON() string { return r.JSON.raw }
func (r *EvacFullRelatedDoc) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type EvacFullRelatedDocDataSourceRef struct {
	// Data source id.
	DataSourceID string `json:"dataSourceId"`
	// end position.
	EndPosition string `json:"endPosition"`
	// paragraph number.
	ParagraphNumber string `json:"paragraphNumber"`
	// sentence number.
	SentenceNumber string `json:"sentenceNumber"`
	// start position.
	StartPosition string `json:"startPosition"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DataSourceID    respjson.Field
		EndPosition     respjson.Field
		ParagraphNumber respjson.Field
		SentenceNumber  respjson.Field
		StartPosition   respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EvacFullRelatedDocDataSourceRef) RawJSON() string { return r.JSON.raw }
func (r *EvacFullRelatedDocDataSourceRef) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Event Evolution is a unique service supporting the association of UDL records of
// various data types to a common event or activity. The associations may be a one
// time summary, aggregating sources of a past event, or of an ongoing activity
// that evolves over a period of time.
type EventEvolutionFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode EventEvolutionFullDataMode `json:"dataMode,required"`
	// User-provided unique identifier of this activity or event. This ID should remain
	// the same on subsequent updates in order to associate all records pertaining to
	// the activity or event.
	EventID string `json:"eventId,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The actual or estimated start time of the activity or event, in ISO 8601 UTC
	// format.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// Summary or description of the activity or event.
	Summary string `json:"summary,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
	// representation of the geometry/geography, of the image as projected on the
	// ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
	// or PUT request that also specifies a valid 'area' or 'atext' field.
	Agjson string `json:"agjson"`
	// Number of dimensions of the geometry depicted by region.
	Andims int64 `json:"andims"`
	// Optional geographical region or polygon (lat/lon pairs) of the area surrounding
	// the point of interest as projected on the ground.
	Area string `json:"area"`
	// Geographical spatial_ref_sys for region.
	Asrid int64 `json:"asrid"`
	// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
	// Text representation of the geometry/geography, of the image as projected on the
	// ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
	// if included with a POST or PUT request that also specifies a valid 'area' field.
	Atext string `json:"atext"`
	// Type of region as projected on the ground.
	Atype string `json:"atype"`
	// The activity or event type associated with this record (e.g. BREAKUP, DIRECT
	// FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but
	// not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an
	// event may incorporate records of various types, for example, a LAUNCH event may
	// evolve into a BREAKUP event.
	Category string `json:"category"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Optional description of the relationship between the records provided in the
	// srcTyps/srcIds and the activity or event.
	DataDescription string `json:"dataDescription"`
	// The actual or estimated start time of the activity or event, in ISO 8601 UTC
	// format.
	EndTime time.Time `json:"endTime" format:"date-time"`
	// Administrative boundaries of the first sub-national level. Level 1 is simply the
	// largest demarcation under whatever demarcation criteria has been determined by
	// the governing body. For example this may be the state/province in which a
	// terrestrial event takes place, or with which the event is attributed for
	// non-localized or non-terrestrial activity.
	GeoAdminLevel1 string `json:"geoAdminLevel1"`
	// Administrative boundaries of the second sub-national level. Level 2 is simply
	// the second largest demarcation under whatever demarcation criteria has been
	// determined by the governing body. For example this may be the city/district in
	// which a terrestrial event takes place, or with which the event is attributed for
	// non-localized or non-terrestrial activity.
	GeoAdminLevel2 string `json:"geoAdminLevel2"`
	// Administrative boundaries of the third sub-national level. Level 3 is simply the
	// third largest demarcation under whatever demarcation criteria has been
	// determined by the governing body.
	GeoAdminLevel3 string `json:"geoAdminLevel3"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Flag indicating that this record is for the purpose of redacting one or more
	// previously specified records from association with this activity or event. If
	// this flag is set then all records indicated in srcTyps/srcIds should be removed
	// from event association.
	Redact bool `json:"redact"`
	// Array of UUIDs of the UDL data records that are related to the determination of
	// this activity or event. See the associated 'srcTyps' array for the specific
	// types of data, positionally corresponding to the UUIDs in this array. The
	// 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps
	// array element for the data type of the UUID and use the appropriate API
	// operation to retrieve that object.
	SrcIDs []string `json:"srcIds"`
	// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
	// POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
	// are related to this activity or event. See the associated 'srcIds' array for the
	// record UUIDs, positionally corresponding to the record types in this array. The
	// 'srcTyps' and 'srcIds' arrays must match in size.
	SrcTyps []string `json:"srcTyps"`
	// The status of this activity or event. (ACTIVE, CONCLUDED, UNKNOWN).
	Status string `json:"status"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags"`
	// List of URLs to before/after images of this point of interest entity.
	URL []string `json:"url"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		EventID               respjson.Field
		Source                respjson.Field
		StartTime             respjson.Field
		Summary               respjson.Field
		ID                    respjson.Field
		Agjson                respjson.Field
		Andims                respjson.Field
		Area                  respjson.Field
		Asrid                 respjson.Field
		Atext                 respjson.Field
		Atype                 respjson.Field
		Category              respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DataDescription       respjson.Field
		EndTime               respjson.Field
		GeoAdminLevel1        respjson.Field
		GeoAdminLevel2        respjson.Field
		GeoAdminLevel3        respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Redact                respjson.Field
		SrcIDs                respjson.Field
		SrcTyps               respjson.Field
		Status                respjson.Field
		Tags                  respjson.Field
		URL                   respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r EventEvolutionFull) RawJSON() string { return r.JSON.raw }
func (r *EventEvolutionFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type EventEvolutionFullDataMode string

const (
	EventEvolutionFullDataModeReal      EventEvolutionFullDataMode = "REAL"
	EventEvolutionFullDataModeTest      EventEvolutionFullDataMode = "TEST"
	EventEvolutionFullDataModeSimulated EventEvolutionFullDataMode = "SIMULATED"
	EventEvolutionFullDataModeExercise  EventEvolutionFullDataMode = "EXERCISE"
)

type FileData struct {
	ID         string             `json:"id"`
	Attributes FileDataAttributes `json:"attributes"`
	// Any of "UPDATE", "COPY", "MOVE".
	ContentAction FileDataContentAction `json:"contentAction"`
	TargetName    string                `json:"targetName"`
	TargetPath    string                `json:"targetPath"`
	// Any of "file", "folder", "summary".
	Type FileDataType `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID            respjson.Field
		Attributes    respjson.Field
		ContentAction respjson.Field
		TargetName    respjson.Field
		TargetPath    respjson.Field
		Type          respjson.Field
		ExtraFields   map[string]respjson.Field
		raw           string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FileData) RawJSON() string { return r.JSON.raw }
func (r *FileData) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// ToParam converts this FileData to a FileDataParam.
//
// Warning: the fields of the param type will not be present. ToParam should only
// be used at the last possible moment before sending a request. Test for this with
// FileDataParam.Overrides()
func (r FileData) ToParam() FileDataParam {
	return param.Override[FileDataParam](r.RawJSON())
}

type FileDataAttributes struct {
	ID                    string   `json:"id"`
	Classification        string   `json:"classification"`
	ClassificationMarking string   `json:"classificationMarking"`
	CreatedBy             string   `json:"createdBy"`
	CreatedDate           string   `json:"createdDate"`
	Description           string   `json:"description"`
	DocTitle              string   `json:"docTitle"`
	DocType               string   `json:"docType"`
	Doi                   []string `json:"doi"`
	EllipseLat            float64  `json:"ellipseLat"`
	EllipseLon            float64  `json:"ellipseLon"`
	FileName              string   `json:"fileName"`
	IntrinsicTitle        string   `json:"intrinsicTitle"`
	Keywords              string   `json:"keywords"`
	MediaTitle            string   `json:"mediaTitle"`
	MetaInfo              string   `json:"metaInfo"`
	Milgrid               string   `json:"milgrid"`
	MilgridLat            float64  `json:"milgridLat"`
	MilgridLon            float64  `json:"milgridLon"`
	ModifiedBy            string   `json:"modifiedBy"`
	ModifiedDate          string   `json:"modifiedDate"`
	Name                  string   `json:"name"`
	Path                  string   `json:"path"`
	Read                  string   `json:"read"`
	Searchable            bool     `json:"searchable"`
	SearchAfter           string   `json:"searchAfter"`
	SerialNumber          string   `json:"serialNumber"`
	Size                  int64    `json:"size"`
	Tags                  []string `json:"tags"`
	Write                 string   `json:"write"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID                    respjson.Field
		Classification        respjson.Field
		ClassificationMarking respjson.Field
		CreatedBy             respjson.Field
		CreatedDate           respjson.Field
		Description           respjson.Field
		DocTitle              respjson.Field
		DocType               respjson.Field
		Doi                   respjson.Field
		EllipseLat            respjson.Field
		EllipseLon            respjson.Field
		FileName              respjson.Field
		IntrinsicTitle        respjson.Field
		Keywords              respjson.Field
		MediaTitle            respjson.Field
		MetaInfo              respjson.Field
		Milgrid               respjson.Field
		MilgridLat            respjson.Field
		MilgridLon            respjson.Field
		ModifiedBy            respjson.Field
		ModifiedDate          respjson.Field
		Name                  respjson.Field
		Path                  respjson.Field
		Read                  respjson.Field
		Searchable            respjson.Field
		SearchAfter           respjson.Field
		SerialNumber          respjson.Field
		Size                  respjson.Field
		Tags                  respjson.Field
		Write                 respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FileDataAttributes) RawJSON() string { return r.JSON.raw }
func (r *FileDataAttributes) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type FileDataContentAction string

const (
	FileDataContentActionUpdate FileDataContentAction = "UPDATE"
	FileDataContentActionCopy   FileDataContentAction = "COPY"
	FileDataContentActionMove   FileDataContentAction = "MOVE"
)

type FileDataType string

const (
	FileDataTypeFile    FileDataType = "file"
	FileDataTypeFolder  FileDataType = "folder"
	FileDataTypeSummary FileDataType = "summary"
)

type FileDataParam struct {
	ID         param.Opt[string]       `json:"id,omitzero"`
	TargetName param.Opt[string]       `json:"targetName,omitzero"`
	TargetPath param.Opt[string]       `json:"targetPath,omitzero"`
	Attributes FileDataAttributesParam `json:"attributes,omitzero"`
	// Any of "UPDATE", "COPY", "MOVE".
	ContentAction FileDataContentAction `json:"contentAction,omitzero"`
	// Any of "file", "folder", "summary".
	Type FileDataType `json:"type,omitzero"`
	paramObj
}

func (r FileDataParam) MarshalJSON() (data []byte, err error) {
	type shadow FileDataParam
	return param.MarshalObject(r, (*shadow)(&r))
}

type FileDataAttributesParam struct {
	ID                    param.Opt[string]  `json:"id,omitzero"`
	Classification        param.Opt[string]  `json:"classification,omitzero"`
	ClassificationMarking param.Opt[string]  `json:"classificationMarking,omitzero"`
	CreatedBy             param.Opt[string]  `json:"createdBy,omitzero"`
	CreatedDate           param.Opt[string]  `json:"createdDate,omitzero"`
	Description           param.Opt[string]  `json:"description,omitzero"`
	DocTitle              param.Opt[string]  `json:"docTitle,omitzero"`
	DocType               param.Opt[string]  `json:"docType,omitzero"`
	EllipseLat            param.Opt[float64] `json:"ellipseLat,omitzero"`
	EllipseLon            param.Opt[float64] `json:"ellipseLon,omitzero"`
	FileName              param.Opt[string]  `json:"fileName,omitzero"`
	IntrinsicTitle        param.Opt[string]  `json:"intrinsicTitle,omitzero"`
	Keywords              param.Opt[string]  `json:"keywords,omitzero"`
	MediaTitle            param.Opt[string]  `json:"mediaTitle,omitzero"`
	MetaInfo              param.Opt[string]  `json:"metaInfo,omitzero"`
	Milgrid               param.Opt[string]  `json:"milgrid,omitzero"`
	MilgridLat            param.Opt[float64] `json:"milgridLat,omitzero"`
	MilgridLon            param.Opt[float64] `json:"milgridLon,omitzero"`
	ModifiedBy            param.Opt[string]  `json:"modifiedBy,omitzero"`
	ModifiedDate          param.Opt[string]  `json:"modifiedDate,omitzero"`
	Name                  param.Opt[string]  `json:"name,omitzero"`
	Path                  param.Opt[string]  `json:"path,omitzero"`
	Read                  param.Opt[string]  `json:"read,omitzero"`
	Searchable            param.Opt[bool]    `json:"searchable,omitzero"`
	SearchAfter           param.Opt[string]  `json:"searchAfter,omitzero"`
	SerialNumber          param.Opt[string]  `json:"serialNumber,omitzero"`
	Size                  param.Opt[int64]   `json:"size,omitzero"`
	Write                 param.Opt[string]  `json:"write,omitzero"`
	Doi                   []string           `json:"doi,omitzero"`
	Tags                  []string           `json:"tags,omitzero"`
	paramObj
}

func (r FileDataAttributesParam) MarshalJSON() (data []byte, err error) {
	type shadow FileDataAttributesParam
	return param.MarshalObject(r, (*shadow)(&r))
}

// Flight Plan contains data specifying the details of an intended flight including
// schedule and expected route.
type FlightPlanFull struct {
	// The airfield identifier of the arrival location, International Civil Aviation
	// Organization (ICAO) code preferred.
	ArrAirfield string `json:"arrAirfield,required"`
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode FlightPlanFullDataMode `json:"dataMode,required"`
	// The airfield identifier of the departure location, International Civil Aviation
	// Organization (ICAO) code preferred.
	DepAirfield string `json:"depAirfield,required"`
	// The generation time of this flight plan in ISO 8601 UTC format, with millisecond
	// precision.
	GenTs time.Time `json:"genTS,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system if not provided on
	// create operations.
	ID string `json:"id"`
	// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15
	// EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan.
	// Intended as, but not constrained to, MIL-STD-6016 environment dependent specific
	// type designations.
	AircraftMds string `json:"aircraftMDS"`
	// Collection of air refueling events occurring on this flight.
	AirRefuelEvents []FlightPlanFullAirRefuelEvent `json:"airRefuelEvents"`
	// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces
	// (MAF) encode/decode procedures.
	AmcMissionID string `json:"amcMissionId"`
	// Fuel burned from the initial approach point to landing in pounds.
	AppLandingFuel float64 `json:"appLandingFuel"`
	// The first designated alternate arrival airfield, International Civil Aviation
	// Organization (ICAO) code preferred.
	ArrAlternate1 string `json:"arrAlternate1"`
	// Fuel required to fly to alternate landing site 1 and land in pounds.
	ArrAlternate1Fuel float64 `json:"arrAlternate1Fuel"`
	// The second designated alternate arrival airfield, International Civil Aviation
	// Organization (ICAO) code preferred.
	ArrAlternate2 string `json:"arrAlternate2"`
	// Fuel required to fly to alternate landing site 2 and land in pounds.
	ArrAlternate2Fuel float64 `json:"arrAlternate2Fuel"`
	// Additional fuel burned at landing/missed approach for icing during arrival in
	// pounds.
	ArrIceFuel float64 `json:"arrIceFuel"`
	// The arrival runway for this flight.
	ArrRunway string `json:"arrRunway"`
	// Array of Air Traffic Control (ATC) addresses.
	AtcAddresses []string `json:"atcAddresses"`
	// Average temperature deviation of the primary, divert, and alternate path for the
	// route between first Top of Climb and last Top of Descent in degrees Celsius.
	AvgTempDev float64 `json:"avgTempDev"`
	// Fuel planned to be burned during the flight in pounds.
	BurnedFuel float64 `json:"burnedFuel"`
	// The call sign assigned to the aircraft for this flight plan.
	CallSign string `json:"callSign"`
	// Remarks about the planned cargo associated with this flight plan.
	CargoRemark string `json:"cargoRemark"`
	// Fuel required from brake release to Top of Climb in pounds.
	ClimbFuel float64 `json:"climbFuel"`
	// Time required from brake release to Top of Climb expressed as HH:MM.
	ClimbTime string `json:"climbTime"`
	// The amount of contingency fuel in pounds.
	ContingencyFuel float64 `json:"contingencyFuel"`
	// Array of country codes for the countries overflown during this flight in ISO
	// 3166-1 Alpha-2 format.
	CountryCodes []string `json:"countryCodes"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The designated alternate departure airfield, International Civil Aviation
	// Organization (ICAO) code preferred.
	DepAlternate string `json:"depAlternate"`
	// The depressurization fuel required to fly from the Equal Time Point to the Last
	// Suitable/First Suitable airfield at depressurization altitude in pounds.
	DepressFuel float64 `json:"depressFuel"`
	// The departure runway for this flight.
	DepRunway string `json:"depRunway"`
	// The percent degrade due to drag for this aircraft.
	DragIndex float64 `json:"dragIndex"`
	// Additional fuel burned at landing/missed approach for an early descent in
	// pounds.
	EarlyDescentFuel float64 `json:"earlyDescentFuel"`
	// Total endurance time based on the fuel on board expressed as HH:MM.
	EnduranceTime string `json:"enduranceTime"`
	// Fuel required to fly from Top of Climb to Top of Descent in pounds.
	EnrouteFuel float64 `json:"enrouteFuel"`
	// Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
	EnrouteTime string `json:"enrouteTime"`
	// The list of equipment on the aircraft as defined in the Flight Information
	// Publications (FLIP) General Planning (GP) manual.
	Equipment string `json:"equipment"`
	// The estimated time of departure for the aircraft, in ISO 8601 UTC format, with
	// millisecond precision.
	EstDepTime time.Time `json:"estDepTime" format:"date-time"`
	// Array of Extended Operations (ETOPS) adequate landing airfields that are within
	// the mission region.
	EtopsAirfields []string `json:"etopsAirfields"`
	// Array of Extended Operations (ETOPS) alternate suitable landing airfields that
	// are within the mission region.
	EtopsAltAirfields []string `json:"etopsAltAirfields"`
	// The Extended Operations (ETOPS) rating used to calculate this flight plan.
	EtopsRating string `json:"etopsRating"`
	// The Extended Operations (ETOPS) validity window for the alternate airfield.
	EtopsValWindow string `json:"etopsValWindow"`
	// The source ID of the flight plan from the generating system.
	ExternalID string `json:"externalId"`
	// Collection of messages associated with this flight plan indicating the severity,
	// the point where the message was generated, the path (Primary, Alternate, etc.),
	// and the text of the message.
	FlightPlanMessages []FlightPlanFullFlightPlanMessage `json:"flightPlanMessages"`
	// Collection of point groups generated for this flight plan. Groups include point
	// sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
	// (ETP).
	FlightPlanPointGroups []FlightPlanFullFlightPlanPointGroup `json:"flightPlanPointGroups"`
	// Collection of waypoints associated with this flight plan.
	FlightPlanWaypoints []FlightPlanFullFlightPlanWaypoint `json:"flightPlanWaypoints"`
	// The flight rules this flight plan is being filed under.
	FlightRules string `json:"flightRules"`
	// The type of flight (MILITARY, CIVILIAN, etc).
	FlightType string `json:"flightType"`
	// The fuel degrade percentage used for this mission.
	FuelDegrade float64 `json:"fuelDegrade"`
	// The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system
	// assesses the integrity of the GPS signals. This system predicts outages for a
	// specified geographical area. These predictions are based on the location, path,
	// and scheduled GPS satellite outages.
	GpsRaim string `json:"gpsRAIM"`
	// Additional fuel burned at Top of Climb in pounds.
	HoldDownFuel float64 `json:"holdDownFuel"`
	// Additional fuel burned at the destination for holding in pounds.
	HoldFuel float64 `json:"holdFuel"`
	// Additional time for holding at the destination expressed as HH:MM.
	HoldTime string `json:"holdTime"`
	// The UDL unique identifier of the aircraft associated with this flight plan.
	IDAircraft string `json:"idAircraft"`
	// The UDL unique identifier of the arrival airfield associated with this flight
	// plan.
	IDArrAirfield string `json:"idArrAirfield"`
	// The UDL unique identifier of the departure airfield associated with this flight
	// plan.
	IDDepAirfield string `json:"idDepAirfield"`
	// The amount of identified extra fuel carried and not available in the burn plan
	// in pounds.
	IdentExtraFuel float64 `json:"identExtraFuel"`
	// The UDL unique identifier of the aircraft sortie associated with this flight
	// plan.
	IDSortie string `json:"idSortie"`
	// A character string representation of the initial filed cruise speed for this
	// flight (prepended values of K, N, and M represent kilometers per hour, knots,
	// and Mach, respectively).
	InitialCruiseSpeed string `json:"initialCruiseSpeed"`
	// A character string representation of the initial filed altitude level for this
	// flight (prepended values of F, S, A, and M represent flight level in hundreds of
	// feet, standard metric level in tens of meters, altitude in hundreds of feet, and
	// altitude in tens of meters, respectively).
	InitialFlightLevel string `json:"initialFlightLevel"`
	// Fuel planned to be remaining on the airplane at landing in pounds.
	LandingFuel float64 `json:"landingFuel"`
	// The leg number of this flight plan.
	LegNum int64 `json:"legNum"`
	// The minimum fuel on board required to divert in pounds.
	MinDivertFuel float64 `json:"minDivertFuel"`
	// The mission index value for this mission. The mission index is the ratio of
	// time-related cost of aircraft operation to the cost of fuel.
	MsnIndex float64 `json:"msnIndex"`
	// Additional remarks for air traffic control for this flight.
	Notes string `json:"notes"`
	// The number of aircraft flying this flight plan.
	NumAircraft int64 `json:"numAircraft"`
	// Additional fuel burned at Top of Descent for the operational condition in
	// pounds.
	OpConditionFuel float64 `json:"opConditionFuel"`
	// Operating weight of the aircraft in pounds.
	OpWeight float64 `json:"opWeight"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// Air Traffic Control address filing the flight plan.
	Originator string `json:"originator"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Remarks from the planners concerning this flight plan.
	PlannerRemark string `json:"plannerRemark"`
	// Total of all fuel required to complete the flight in pounds, including fuel to
	// be dispensed on a refueling mission.
	RampFuel float64 `json:"rampFuel"`
	// Total fuel remaining at alternate landing site 1 in pounds.
	RemAlternate1Fuel float64 `json:"remAlternate1Fuel"`
	// Total fuel remaining at alternate landing site 2 in pounds.
	RemAlternate2Fuel float64 `json:"remAlternate2Fuel"`
	// The amount of reserve fuel in pounds.
	ReserveFuel float64 `json:"reserveFuel"`
	// The 1801 fileable route of flight string for this flight. The route of flight
	// string contains route designators, significant points, change of speed/altitude,
	// change of flight rules, and cruise climbs.
	RouteString string `json:"routeString"`
	// Name of the planned Standard Instrument Departure (SID) procedure.
	Sid string `json:"sid"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl string `json:"sourceDL"`
	// Name of the planned Standard Terminal Arrival (STAR) procedure.
	Star string `json:"star"`
	// Status of this flight plan (e.g., ACTIVE, APPROVED, PLANNED, etc.).
	Status string `json:"status"`
	// The tail number of the aircraft associated with this flight plan.
	TailNumber string `json:"tailNumber"`
	// Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in
	// pounds.
	TakeoffFuel float64 `json:"takeoffFuel"`
	// Fuel required to start engines and taxi to the end of the runway in pounds.
	TaxiFuel float64 `json:"taxiFuel"`
	// Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
	ThunderAvoidFuel float64 `json:"thunderAvoidFuel"`
	// Fuel remaining at Top of Climb in pounds.
	TocFuel float64 `json:"tocFuel"`
	// Additional fuel burned at Top of Climb for icing in pounds.
	TocIceFuel float64 `json:"tocIceFuel"`
	// Fuel remaining at Top of Descent in pounds.
	TodFuel float64 `json:"todFuel"`
	// Additional fuel burned at Top of Descent for icing in pounds.
	TodIceFuel float64 `json:"todIceFuel"`
	// The amount of unidentified extra fuel required to get to min landing in pounds.
	UnidentExtraFuel float64 `json:"unidentExtraFuel"`
	// The amount of unusable fuel in pounds.
	UnusableFuel float64 `json:"unusableFuel"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// The wake turbulence category for this flight. The categories are assigned by the
	// International Civil Aviation Organization (ICAO) and are based on maximum
	// certified takeoff mass for the purpose of separating aircraft in flight due to
	// wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
	WakeTurbCat string `json:"wakeTurbCat"`
	// Wind factor for the first half of the route. This is the average wind factor
	// from first Top of Climb to the mid-time of the entire route in knots. A positive
	// value indicates a headwind, while a negative value indicates a tailwind.
	WindFac1 float64 `json:"windFac1"`
	// Wind factor for the second half of the route. This is the average wind factor
	// from the mid-time of the entire route to last Top of Descent in knots. A
	// positive value indicates a headwind, while a negative value indicates a
	// tailwind.
	WindFac2 float64 `json:"windFac2"`
	// Average wind factor from Top of Climb to Top of Descent in knots. A positive
	// value indicates a headwind, while a negative value indicates a tailwind.
	WindFacAvg float64 `json:"windFacAvg"`
	// The date and time the weather valid period ends in ISO 8601 UTC format, with
	// millisecond precision.
	WxValidEnd time.Time `json:"wxValidEnd" format:"date-time"`
	// The date and time the weather valid period begins in ISO 8601 UTC format, with
	// millisecond precision.
	WxValidStart time.Time `json:"wxValidStart" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ArrAirfield           respjson.Field
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		DepAirfield           respjson.Field
		GenTs                 respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AircraftMds           respjson.Field
		AirRefuelEvents       respjson.Field
		AmcMissionID          respjson.Field
		AppLandingFuel        respjson.Field
		ArrAlternate1         respjson.Field
		ArrAlternate1Fuel     respjson.Field
		ArrAlternate2         respjson.Field
		ArrAlternate2Fuel     respjson.Field
		ArrIceFuel            respjson.Field
		ArrRunway             respjson.Field
		AtcAddresses          respjson.Field
		AvgTempDev            respjson.Field
		BurnedFuel            respjson.Field
		CallSign              respjson.Field
		CargoRemark           respjson.Field
		ClimbFuel             respjson.Field
		ClimbTime             respjson.Field
		ContingencyFuel       respjson.Field
		CountryCodes          respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DepAlternate          respjson.Field
		DepressFuel           respjson.Field
		DepRunway             respjson.Field
		DragIndex             respjson.Field
		EarlyDescentFuel      respjson.Field
		EnduranceTime         respjson.Field
		EnrouteFuel           respjson.Field
		EnrouteTime           respjson.Field
		Equipment             respjson.Field
		EstDepTime            respjson.Field
		EtopsAirfields        respjson.Field
		EtopsAltAirfields     respjson.Field
		EtopsRating           respjson.Field
		EtopsValWindow        respjson.Field
		ExternalID            respjson.Field
		FlightPlanMessages    respjson.Field
		FlightPlanPointGroups respjson.Field
		FlightPlanWaypoints   respjson.Field
		FlightRules           respjson.Field
		FlightType            respjson.Field
		FuelDegrade           respjson.Field
		GpsRaim               respjson.Field
		HoldDownFuel          respjson.Field
		HoldFuel              respjson.Field
		HoldTime              respjson.Field
		IDAircraft            respjson.Field
		IDArrAirfield         respjson.Field
		IDDepAirfield         respjson.Field
		IdentExtraFuel        respjson.Field
		IDSortie              respjson.Field
		InitialCruiseSpeed    respjson.Field
		InitialFlightLevel    respjson.Field
		LandingFuel           respjson.Field
		LegNum                respjson.Field
		MinDivertFuel         respjson.Field
		MsnIndex              respjson.Field
		Notes                 respjson.Field
		NumAircraft           respjson.Field
		OpConditionFuel       respjson.Field
		OpWeight              respjson.Field
		Origin                respjson.Field
		Originator            respjson.Field
		OrigNetwork           respjson.Field
		PlannerRemark         respjson.Field
		RampFuel              respjson.Field
		RemAlternate1Fuel     respjson.Field
		RemAlternate2Fuel     respjson.Field
		ReserveFuel           respjson.Field
		RouteString           respjson.Field
		Sid                   respjson.Field
		SourceDl              respjson.Field
		Star                  respjson.Field
		Status                respjson.Field
		TailNumber            respjson.Field
		TakeoffFuel           respjson.Field
		TaxiFuel              respjson.Field
		ThunderAvoidFuel      respjson.Field
		TocFuel               respjson.Field
		TocIceFuel            respjson.Field
		TodFuel               respjson.Field
		TodIceFuel            respjson.Field
		UnidentExtraFuel      respjson.Field
		UnusableFuel          respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		WakeTurbCat           respjson.Field
		WindFac1              respjson.Field
		WindFac2              respjson.Field
		WindFacAvg            respjson.Field
		WxValidEnd            respjson.Field
		WxValidStart          respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFull) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type FlightPlanFullDataMode string

const (
	FlightPlanFullDataModeReal      FlightPlanFullDataMode = "REAL"
	FlightPlanFullDataModeTest      FlightPlanFullDataMode = "TEST"
	FlightPlanFullDataModeSimulated FlightPlanFullDataMode = "SIMULATED"
	FlightPlanFullDataModeExercise  FlightPlanFullDataMode = "EXERCISE"
)

// Collection of air refueling events occurring on this flight.
type FlightPlanFullAirRefuelEvent struct {
	// Additional degrade for air refueling, cumulative with fuelDegrade field percent.
	ArDegrade float64 `json:"arDegrade"`
	// Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in
	// pounds.
	ArExchangedFuel float64 `json:"arExchangedFuel"`
	// The number of this air refueling event within the flight plan.
	ArNum int64 `json:"arNum"`
	// Fuel required to fly from air refueling exit point to air refueling divert
	// alternate airfield in pounds.
	DivertFuel float64 `json:"divertFuel"`
	// Fuel remaining at the air refueling exit in pounds.
	ExitFuel float64 `json:"exitFuel"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ArDegrade       respjson.Field
		ArExchangedFuel respjson.Field
		ArNum           respjson.Field
		DivertFuel      respjson.Field
		ExitFuel        respjson.Field
		ExtraFields     map[string]respjson.Field
		raw             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullAirRefuelEvent) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullAirRefuelEvent) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of messages associated with this flight plan indicating the severity,
// the point where the message was generated, the path (Primary, Alternate, etc.),
// and the text of the message.
type FlightPlanFullFlightPlanMessage struct {
	// The text of the message.
	MsgText string `json:"msgText"`
	// The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
	RoutePath string `json:"routePath"`
	// The severity of the message.
	Severity string `json:"severity"`
	// The waypoint number for which the message was generated, or enter "PLAN" for a
	// message impacting the entire route.
	WpNum string `json:"wpNum"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		MsgText     respjson.Field
		RoutePath   respjson.Field
		Severity    respjson.Field
		WpNum       respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullFlightPlanMessage) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullFlightPlanMessage) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of point groups generated for this flight plan. Groups include point
// sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
// (ETP).
type FlightPlanFullFlightPlanPointGroup struct {
	// Average fuel flow at which the fuel was calculated in pounds per hour.
	AvgFuelFlow float64 `json:"avgFuelFlow"`
	// Average wind factor from the Extended Operations (ETOPS) point to the recovery
	// airfield in knots.
	EtopsAvgWindFactor float64 `json:"etopsAvgWindFactor"`
	// Distance from the Extended Operations (ETOPS) point to the recovery airfield in
	// nautical miles.
	EtopsDistance float64 `json:"etopsDistance"`
	// Fuel required to fly from the Extended Operations (ETOPS) point to the recovery
	// airfield in pounds.
	EtopsReqFuel float64 `json:"etopsReqFuel"`
	// Temperature deviation from the Extended Operations (ETOPS) point to the recovery
	// airfield in degrees Celsius.
	EtopsTempDev float64 `json:"etopsTempDev"`
	// Time to fly from the Extended Operations (ETOPS) point to the recovery airfield
	// expressed in HH:MM format.
	EtopsTime string `json:"etopsTime"`
	// Array of point data for this Point Group.
	FlightPlanPoints []FlightPlanFullFlightPlanPointGroupFlightPlanPoint `json:"flightPlanPoints"`
	// Total time from takeoff when the point is reached expressed in HH:MM format.
	FromTakeoffTime string `json:"fromTakeoffTime"`
	// Average wind factor from the Equal Time Point (ETP) to the first suitable
	// airfield in knots.
	FsafAvgWindFactor float64 `json:"fsafAvgWindFactor"`
	// Distance from the Equal Time Point (ETP) to the first suitable airfield in
	// nautical miles.
	FsafDistance float64 `json:"fsafDistance"`
	// Fuel required to fly from the Equal Time Point (ETP) to the first suitable
	// airfield in pounds.
	FsafReqFuel float64 `json:"fsafReqFuel"`
	// Temperature deviation from the Equal Time Point (ETP) to the first suitable
	// airfield in degrees Celsius.
	FsafTempDev float64 `json:"fsafTempDev"`
	// Time to fly from the Equal Time Point (ETP) to the first suitable airfield
	// expressed in HH:MM format.
	FsafTime string `json:"fsafTime"`
	// Flight level of the point at which the fuel was calculated in feet.
	FuelCalcAlt float64 `json:"fuelCalcAlt"`
	// True airspeed at which the fuel was calculated in knots.
	FuelCalcSpd float64 `json:"fuelCalcSpd"`
	// Average wind factor from the Equal Time Point (ETP) to the last suitable
	// airfield in knots.
	LsafAvgWindFactor float64 `json:"lsafAvgWindFactor"`
	// Distance from the Equal Time Point (ETP) to the last suitable airfield in
	// nautical miles.
	LsafDistance float64 `json:"lsafDistance"`
	// Name of the last suitable airfield, International Civil Aviation Organization
	// (ICAO) code preferred.
	LsafName string `json:"lsafName"`
	// Fuel required to fly from the Equal Time Point (ETP) to the last suitable
	// airfield in pounds.
	LsafReqFuel float64 `json:"lsafReqFuel"`
	// Temperature deviation from the Equal Time Point (ETP) to the last suitable
	// airfield in degrees Celsius.
	LsafTempDev float64 `json:"lsafTempDev"`
	// Time to fly from the Equal Time Point (ETP) to the last suitable airfield
	// expressed in HH:MM format.
	LsafTime string `json:"lsafTime"`
	// Amount of planned fuel on board when the point is reached in pounds.
	PlannedFuel float64 `json:"plannedFuel"`
	// Name of the point group, usually Extended Operations (ETOPS), Critical Fuel
	// Point, and Equal Time Point (ETP) sections.
	PointGroupName string `json:"pointGroupName"`
	// Specifies which Point Group case requires the most fuel.
	WorstFuelCase string `json:"worstFuelCase"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		AvgFuelFlow        respjson.Field
		EtopsAvgWindFactor respjson.Field
		EtopsDistance      respjson.Field
		EtopsReqFuel       respjson.Field
		EtopsTempDev       respjson.Field
		EtopsTime          respjson.Field
		FlightPlanPoints   respjson.Field
		FromTakeoffTime    respjson.Field
		FsafAvgWindFactor  respjson.Field
		FsafDistance       respjson.Field
		FsafReqFuel        respjson.Field
		FsafTempDev        respjson.Field
		FsafTime           respjson.Field
		FuelCalcAlt        respjson.Field
		FuelCalcSpd        respjson.Field
		LsafAvgWindFactor  respjson.Field
		LsafDistance       respjson.Field
		LsafName           respjson.Field
		LsafReqFuel        respjson.Field
		LsafTempDev        respjson.Field
		LsafTime           respjson.Field
		PlannedFuel        respjson.Field
		PointGroupName     respjson.Field
		WorstFuelCase      respjson.Field
		ExtraFields        map[string]respjson.Field
		raw                string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullFlightPlanPointGroup) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullFlightPlanPointGroup) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Array of point data for this Point Group.
type FlightPlanFullFlightPlanPointGroupFlightPlanPoint struct {
	// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with
	// millisecond precision.
	FppEta time.Time `json:"fppEta" format:"date-time"`
	// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	FppLat float64 `json:"fppLat"`
	// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	FppLon float64 `json:"fppLon"`
	// Fuel required at this point to execute an Equal Time Point (ETP) or Extended
	// Operations (ETOPS) plan in pounds.
	FppReqFuel float64 `json:"fppReqFuel"`
	// Name of this point.
	PointName string `json:"pointName"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		FppEta      respjson.Field
		FppLat      respjson.Field
		FppLon      respjson.Field
		FppReqFuel  respjson.Field
		PointName   respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullFlightPlanPointGroupFlightPlanPoint) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullFlightPlanPointGroupFlightPlanPoint) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Collection of waypoints associated with this flight plan.
type FlightPlanFullFlightPlanWaypoint struct {
	// Points are designated by type as either a comment point or a waypoint. A comment
	// point conveys important information about the point for pilots but is not
	// entered into a flight management system. A waypoint is a point that is entered
	// into a flight management system and/or filed with Air Traffic Control.
	Type string `json:"type,required"`
	// Name of the point. The name of a comment point identifies important information
	// about that point, e.g. Top of Climb. The name of a waypoint identifies the
	// location of that point.
	WaypointName string `json:"waypointName,required"`
	// The air-to-air Tactical Air Navigation (TACAN) channels used by the
	// receiver/tanker during air refueling.
	AaTacanChannel string `json:"aaTacanChannel"`
	// The air distance of this leg in nautical miles.
	AirDistance float64 `json:"airDistance"`
	// The flight path flown for this leg.
	Airway string `json:"airway"`
	// Altitude of a level, point, or object measured in feet above mean sea level.
	Alt float64 `json:"alt"`
	// The ID of the air refueling track/anchor or fixed track.
	ArID string `json:"arId"`
	// Point identifying an air refueling track/anchor or fixed track.
	Arpt string `json:"arpt"`
	// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with
	// millisecond precision.
	Ata time.Time `json:"ata" format:"date-time"`
	// The average calibrated airspeed (CAS) for this leg in knots.
	AvgCalAirspeed float64 `json:"avgCalAirspeed"`
	// The average drift angle for this leg in degrees from true north.
	AvgDriftAng float64 `json:"avgDriftAng"`
	// The average ground speed for this leg in knots.
	AvgGroundSpeed float64 `json:"avgGroundSpeed"`
	// The average true airspeed (TAS) for this leg in knots.
	AvgTrueAirspeed float64 `json:"avgTrueAirspeed"`
	// The average wind direction for this leg in degrees from true north.
	AvgWindDir float64 `json:"avgWindDir"`
	// The average wind speed for this leg in knots.
	AvgWindSpeed float64 `json:"avgWindSpeed"`
	// The day low level altitude in feet above sea level for the leg ending at this
	// waypoint.
	DayLowAlt float64 `json:"dayLowAlt"`
	// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with
	// millisecond precision.
	Eta time.Time `json:"eta" format:"date-time"`
	// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative
	// value for offload).
	ExchangedFuel float64 `json:"exchangedFuel"`
	// The leg fuel flow in pounds per hour.
	FuelFlow float64 `json:"fuelFlow"`
	// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
	IceCat string `json:"iceCat"`
	// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	Lat float64 `json:"lat"`
	// The planned alternate leg based on user-defined constraints, International Civil
	// Aviation Organization (ICAO) code preferred.
	LegAlternate string `json:"legAlternate"`
	// The percent degrade due to drag for this aircraft for this leg.
	LegDragIndex float64 `json:"legDragIndex"`
	// The fuel degrade percentage used for this leg.
	LegFuelDegrade float64 `json:"legFuelDegrade"`
	// The average Mach speed for this leg.
	LegMach float64 `json:"legMach"`
	// The mission index value for this leg. The mission index is the ratio of
	// time-related cost of aircraft operation to the cost of fuel.
	LegMsnIndex float64 `json:"legMsnIndex"`
	// The wind factor for this leg in knots. A positive value indicates a headwind,
	// while a negative value indicates a tailwind.
	LegWindFac float64 `json:"legWindFac"`
	// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// The magnetic course at leg midpoint in degrees from true north.
	MagCourse float64 `json:"magCourse"`
	// The magnetic heading at leg midpoint in degrees from true north.
	MagHeading float64 `json:"magHeading"`
	// The magnetic variation for this leg in degrees.
	MagVar float64 `json:"magVar"`
	// Navigational Aid (NAVAID) identification code.
	Navaid string `json:"navaid"`
	// The night low level altitude in feet above sea level for the leg ending at this
	// waypoint.
	NightLowAlt float64 `json:"nightLowAlt"`
	// The night vision goggle low level altitude in feet above sea level for the leg
	// ending at this waypoint.
	NvgLowAlt float64 `json:"nvgLowAlt"`
	// The wind direction at this specific point in degrees from true north.
	PointWindDir float64 `json:"pointWindDir"`
	// The wind velocity at this specific point in knots.
	PointWindSpeed float64 `json:"pointWindSpeed"`
	// The primary UHF radio frequency used for the air refueling track or anchor in
	// megahertz.
	PriFreq float64 `json:"priFreq"`
	// The secondary UHF radio frequency used for the air refueling track or anchor in
	// megahertz.
	SecFreq float64 `json:"secFreq"`
	// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
	TacanChannel string `json:"tacanChannel"`
	// Average temperature deviation from standard day profile for this leg in degrees
	// Celsius.
	TempDev float64 `json:"tempDev"`
	// The thunderstorm intensity classification for this flight (LIGHT, MODERATE,
	// etc).
	ThunderCat string `json:"thunderCat"`
	// The total air distance to this waypoint in nautical miles.
	TotalAirDistance float64 `json:"totalAirDistance"`
	// The total distance flown to this waypoint calculated from point of departure in
	// nautical miles.
	TotalFlownDistance float64 `json:"totalFlownDistance"`
	// The total distance remaining from this waypoint to the point of arrival in
	// nautical miles.
	TotalRemDistance float64 `json:"totalRemDistance"`
	// The total fuel remaining at this waypoint in pounds.
	TotalRemFuel float64 `json:"totalRemFuel"`
	// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
	TotalTime string `json:"totalTime"`
	// The total time remaining from this waypoint to the point of arrival expressed as
	// HH:MM.
	TotalTimeRem string `json:"totalTimeRem"`
	// The total fuel used to this waypoint from point of departure in pounds.
	TotalUsedFuel float64 `json:"totalUsedFuel"`
	// The total weight of the aircraft at this waypoint in pounds.
	TotalWeight float64 `json:"totalWeight"`
	// The true course at leg midpoint in degrees from true north.
	TrueCourse float64 `json:"trueCourse"`
	// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
	TurbCat string `json:"turbCat"`
	// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in
	// megahertz.
	VorFreq float64 `json:"vorFreq"`
	// The waypoint number on the route. Comment points do not get a waypoint number.
	WaypointNum int64 `json:"waypointNum"`
	// The zone/leg distance flown in nautical miles.
	ZoneDistance float64 `json:"zoneDistance"`
	// The amount of fuel used on this zone/leg in pounds.
	ZoneFuel float64 `json:"zoneFuel"`
	// The time to fly this zone/leg in minutes.
	ZoneTime float64 `json:"zoneTime"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Type               respjson.Field
		WaypointName       respjson.Field
		AaTacanChannel     respjson.Field
		AirDistance        respjson.Field
		Airway             respjson.Field
		Alt                respjson.Field
		ArID               respjson.Field
		Arpt               respjson.Field
		Ata                respjson.Field
		AvgCalAirspeed     respjson.Field
		AvgDriftAng        respjson.Field
		AvgGroundSpeed     respjson.Field
		AvgTrueAirspeed    respjson.Field
		AvgWindDir         respjson.Field
		AvgWindSpeed       respjson.Field
		DayLowAlt          respjson.Field
		Eta                respjson.Field
		ExchangedFuel      respjson.Field
		FuelFlow           respjson.Field
		IceCat             respjson.Field
		Lat                respjson.Field
		LegAlternate       respjson.Field
		LegDragIndex       respjson.Field
		LegFuelDegrade     respjson.Field
		LegMach            respjson.Field
		LegMsnIndex        respjson.Field
		LegWindFac         respjson.Field
		Lon                respjson.Field
		MagCourse          respjson.Field
		MagHeading         respjson.Field
		MagVar             respjson.Field
		Navaid             respjson.Field
		NightLowAlt        respjson.Field
		NvgLowAlt          respjson.Field
		PointWindDir       respjson.Field
		PointWindSpeed     respjson.Field
		PriFreq            respjson.Field
		SecFreq            respjson.Field
		TacanChannel       respjson.Field
		TempDev            respjson.Field
		ThunderCat         respjson.Field
		TotalAirDistance   respjson.Field
		TotalFlownDistance respjson.Field
		TotalRemDistance   respjson.Field
		TotalRemFuel       respjson.Field
		TotalTime          respjson.Field
		TotalTimeRem       respjson.Field
		TotalUsedFuel      respjson.Field
		TotalWeight        respjson.Field
		TrueCourse         respjson.Field
		TurbCat            respjson.Field
		VorFreq            respjson.Field
		WaypointNum        respjson.Field
		ZoneDistance       respjson.Field
		ZoneFuel           respjson.Field
		ZoneTime           respjson.Field
		ExtraFields        map[string]respjson.Field
		raw                string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r FlightPlanFullFlightPlanWaypoint) RawJSON() string { return r.JSON.raw }
func (r *FlightPlanFullFlightPlanWaypoint) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Model object representing on-orbit objects or satellites in the system.
type OnorbitFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode OnorbitFullDataMode `json:"dataMode,required"`
	// Satellite/Catalog number of the target on-orbit object.
	SatNo int64 `json:"satNo,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Alternate name of the on-orbit object.
	AltName string `json:"altName"`
	// Read-only collection of antennas on this on-orbit object.
	Antennas []OnorbitFullAntenna `json:"antennas"`
	// Read-only collection of batteries on this on-orbit object.
	Batteries []OnorbitFullBattery `json:"batteries"`
	// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
	// State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
	// Heliocentric, Interplanetary, Lagrangian, Docked).
	//
	// Any of "Unknown", "On-Orbit", "Decayed", "Cataloged Without State", "Launch
	// Nominal", "Analyst Satellite", "Cislunar", "Lunar", "Hyperbolic",
	// "Heliocentric", "Interplanetary", "Lagrangian", "Docked".
	Category OnorbitFullCategory `json:"category"`
	// Common name of the on-orbit object.
	CommonName string `json:"commonName"`
	// Constellation to which this satellite belongs.
	Constellation string `json:"constellation"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Date of decay.
	DecayDate time.Time `json:"decayDate" format:"date-time"`
	// Read-only entity details (only returned/used on detail queries).
	EntityCollection []OnorbitFullEntityCollection `json:"entityCollection"`
	// For the public catalog, the idOnOrbit is typically the satellite number as a
	// string, but may be a UUID for analyst or other unknown or untracked satellites,
	// auto-generated by the system.
	IDOnOrbit string `json:"idOnOrbit"`
	// International Designator, typically of the format YYYYLLLAAA, where YYYY is the
	// launch year, LLL is the sequential launch number of that year, and AAA is an
	// optional launch piece designator for the launch.
	IntlDes string `json:"intlDes"`
	// Date of launch.
	LaunchDate time.Time `json:"launchDate" format:"date"`
	// Id of the associated launchSite entity.
	LaunchSiteID string `json:"launchSiteId"`
	// Estimated lifetime of the on-orbit payload, if known.
	LifetimeYears int64 `json:"lifetimeYears"`
	// Mission number of the on-orbit object.
	MissionNumber string `json:"missionNumber"`
	// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
	// UNKNOWN.
	//
	// Any of "ROCKET BODY", "DEBRIS", "PAYLOAD", "PLATFORM", "MANNED", "UNKNOWN".
	ObjectType OnorbitFullObjectType `json:"objectType"`
	// Read-only collection of details for this on-orbit object.
	OnorbitDetails []OnorbitFullOnorbitDetail `json:"onorbitDetails"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Read-only collection of solar arrays on this on-orbit object.
	SolarArrays []OnorbitFullSolarArray `json:"solarArrays"`
	// Read-only collection of thrusters (engines) on this on-orbit object.
	Thrusters []OnorbitFullThruster `json:"thrusters"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		SatNo                 respjson.Field
		Source                respjson.Field
		AltName               respjson.Field
		Antennas              respjson.Field
		Batteries             respjson.Field
		Category              respjson.Field
		CommonName            respjson.Field
		Constellation         respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DecayDate             respjson.Field
		EntityCollection      respjson.Field
		IDOnOrbit             respjson.Field
		IntlDes               respjson.Field
		LaunchDate            respjson.Field
		LaunchSiteID          respjson.Field
		LifetimeYears         respjson.Field
		MissionNumber         respjson.Field
		ObjectType            respjson.Field
		OnorbitDetails        respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		SolarArrays           respjson.Field
		Thrusters             respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFull) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type OnorbitFullDataMode string

const (
	OnorbitFullDataModeReal      OnorbitFullDataMode = "REAL"
	OnorbitFullDataModeTest      OnorbitFullDataMode = "TEST"
	OnorbitFullDataModeSimulated OnorbitFullDataMode = "SIMULATED"
	OnorbitFullDataModeExercise  OnorbitFullDataMode = "EXERCISE"
)

type OnorbitFullAntenna struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// ID of the antenna.
	IDAntenna string `json:"idAntenna,required"`
	// ID of the on-orbit object.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Model representation of information on on-orbit/spacecraft communication
	// antennas. A spacecraft may have multiple antennas and each antenna can have
	// multiple 'details' records compiled by different sources.
	Antenna unifieddatalibrary.AntennaFull `json:"antenna"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDAntenna             respjson.Field
		IDOnOrbit             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Antenna               respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullAntenna) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullAntenna) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type OnorbitFullBattery struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// ID of the battery.
	IDBattery string `json:"idBattery,required"`
	// ID of the on-orbit object.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Model representation of specific spacecraft battery types.
	Battery unifieddatalibrary.BatteryFull `json:"battery"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The number of batteries on the spacecraft of the type identified by idBattery.
	Quantity int64 `json:"quantity"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDBattery             respjson.Field
		IDOnOrbit             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Battery               respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Quantity              respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullBattery) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullBattery) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
// State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
// Heliocentric, Interplanetary, Lagrangian, Docked).
type OnorbitFullCategory string

const (
	OnorbitFullCategoryUnknown               OnorbitFullCategory = "Unknown"
	OnorbitFullCategoryOnOrbit               OnorbitFullCategory = "On-Orbit"
	OnorbitFullCategoryDecayed               OnorbitFullCategory = "Decayed"
	OnorbitFullCategoryCatalogedWithoutState OnorbitFullCategory = "Cataloged Without State"
	OnorbitFullCategoryLaunchNominal         OnorbitFullCategory = "Launch Nominal"
	OnorbitFullCategoryAnalystSatellite      OnorbitFullCategory = "Analyst Satellite"
	OnorbitFullCategoryCislunar              OnorbitFullCategory = "Cislunar"
	OnorbitFullCategoryLunar                 OnorbitFullCategory = "Lunar"
	OnorbitFullCategoryHyperbolic            OnorbitFullCategory = "Hyperbolic"
	OnorbitFullCategoryHeliocentric          OnorbitFullCategory = "Heliocentric"
	OnorbitFullCategoryInterplanetary        OnorbitFullCategory = "Interplanetary"
	OnorbitFullCategoryLagrangian            OnorbitFullCategory = "Lagrangian"
	OnorbitFullCategoryDocked                OnorbitFullCategory = "Docked"
)

// An entity is a generic representation of any object within a space/SSA system
// such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
// entity can have an operating unit, a location (if terrestrial), and statuses.
type OnorbitFullEntityCollection struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Unique entity name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
	// NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
	//
	// Any of "AIRCRAFT", "BUS", "COMM", "IR", "NAVIGATION", "ONORBIT", "RFEMITTER",
	// "SCIENTIFIC", "SENSOR", "SITE", "VESSEL".
	Type string `json:"type,required"`
	// The country code. This value is typically the ISO 3166 Alpha-2 two-character
	// country code, however it can also represent various consortiums that do not
	// appear in the ISO document. The code must correspond to an existing country in
	// the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
	// ISO Alpha-3 code, or alternate code values that exist for the specified country
	// code.
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Unique identifier of the record.
	IDEntity string `json:"idEntity"`
	// Unique identifier of the entity location, if terrestrial/fixed.
	IDLocation string `json:"idLocation"`
	// Onorbit identifier if this entity is part of an on-orbit object. For the public
	// catalog, the idOnOrbit is typically the satellite number as a string, but may be
	// a UUID for analyst or other unknown or untracked satellites.
	IDOnOrbit string `json:"idOnOrbit"`
	// Unique identifier of the associated operating unit object.
	IDOperatingUnit string `json:"idOperatingUnit"`
	// Model representation of a location, which is a specific fixed point on the earth
	// and is used to denote the locations of fixed sensors, operating units, etc.
	Location unifieddatalibrary.LocationFull `json:"location"`
	// Model representation of a unit or organization which operates or controls a
	// space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
	// belong to an organization.
	OperatingUnit OnorbitFullEntityCollectionOperatingUnit `json:"operatingUnit"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Type of organization which owns this entity (e.g. Commercial, Government,
	// Academic, Consortium, etc).
	//
	// Any of "Commercial", "Government", "Academic", "Consortium", "Other".
	OwnerType string `json:"ownerType"`
	// Read-only collection of RF bands utilized by this entity for communication
	// and/or operation.
	RfBands []OnorbitFullEntityCollectionRfBand `json:"rfBands"`
	// Read-only collection of statuses which can be collected by multiple sources.
	StatusCollection []OnorbitFullEntityCollectionStatusCollection `json:"statusCollection"`
	// Boolean indicating if this entity is taskable.
	Taskable bool `json:"taskable"`
	// Terrestrial identifier of this entity, if applicable.
	TerrestrialID string `json:"terrestrialId"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// List of URLs to additional details/documents for this entity.
	URLs []string `json:"urls"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		Type                  respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		IDEntity              respjson.Field
		IDLocation            respjson.Field
		IDOnOrbit             respjson.Field
		IDOperatingUnit       respjson.Field
		Location              respjson.Field
		OperatingUnit         respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		OwnerType             respjson.Field
		RfBands               respjson.Field
		StatusCollection      respjson.Field
		Taskable              respjson.Field
		TerrestrialID         respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		URLs                  respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullEntityCollection) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullEntityCollection) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Model representation of a unit or organization which operates or controls a
// space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
// belong to an organization.
type OnorbitFullEntityCollectionOperatingUnit struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Name of the operating unit.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic
	// coordinates reside.
	AirDefArea string `json:"airDefArea"`
	// The DoD Standard country code designator for the country or political entity to
	// which the operating unit owes its allegiance. This field will be set to "OTHR"
	// if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
	Allegiance string `json:"allegiance"`
	// Specifies an alternate allegiance code if the data provider code is not part of
	// an official Country Code standard such as ISO-3166 or FIPS. This field will be
	// set to the value provided by the source and should be used for all Queries
	// specifying allegiance.
	AltAllegiance string `json:"altAllegiance"`
	// Specifies an alternate country code if the data provider code is not part of an
	// official Country Code standard such as ISO-3166 or FIPS. This field will be set
	// to the value provided by the source and should be used for all Queries
	// specifying a Country Code.
	AltCountryCode string `json:"altCountryCode"`
	// Unique identifier of the operating unit record from the originating system.
	AltOperatingUnitID string `json:"altOperatingUnitId"`
	// Indicates the importance of the operating unit to the OES or MIR system. This
	// data element is restricted to update by DIA (DB-4). Valid values are: 0 - Does
	// not meet criteria above 1 - Primary importance to system 2 - Secondary
	// importance to system 3 - Tertiary importance to system O - Other. Explain in
	// Remarks.
	ClassRating string `json:"classRating"`
	// The physical manner of being or state of existence of the operating unit. A
	// physical condition that must be considered in the determining of a course of
	// action. The specific usage and enumerations contained in this field may be found
	// in the documentation provided in the referenceDoc field. If referenceDoc not
	// provided, users may consult the data provider.
	Condition string `json:"condition"`
	// Availability of the operating unit relative to its condition. Indicates the
	// reason the operating unit is not fully operational. The specific usage and
	// enumerations contained in this field may be found in the documentation provided
	// in the referenceDoc field. If referenceDoc not provided, users may consult the
	// data provider.
	ConditionAvail string `json:"conditionAvail"`
	// Indicates any of the magnitudes that serve to define the position of a point by
	// reference to a fixed figure, system of lines, etc.
	//
	// Pos. 1-2. Latitude Degrees [00-90]
	//
	// Pos. 3-4. Latitude Minutes [00-59]
	//
	// Pos. 5-6. Latitude Seconds [00-59]
	//
	// Pos. 7-9. Latitude Thousandths Of Seconds [000-999]
	//
	// Pos. 10. Latitude Hemisphere [NS]
	//
	// Pos. 11-13. Longitude Degrees [00-180]
	//
	// Pos. 14-15. Longitude Minutes [00-59]
	//
	// Pos. 16-17. Longitude Seconds [00-59]
	//
	// Pos. 18-20. Longitude Thousandths Of Seconds [000-999]
	//
	// Pos. 21. Longitude Hemisphere [EW]
	//
	// Pos. 1-21. Unknown Latitude and Unknown Longitude [000000000U000000000U]
	Coord string `json:"coord"`
	// A mathematical model of the earth used to calculate coordinates on a map. US
	// Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied
	// countries with local datums. The datum must be specified to ensure accuracy of
	// coordinates. The specific usage and enumerations contained in this field may be
	// found in the documentation provided in the referenceDoc field. If referenceDoc
	// not provided, users may consult the data provider.
	CoordDatum string `json:"coordDatum"`
	// Indicates the plus or minus error assessed against the method used to derive the
	// coordinate.
	CoordDerivAcc float64 `json:"coordDerivAcc"`
	// The DoD Standard country code designator for the country or political entity to
	// which the operating unit geographic coordinates reside . This field will be set
	// to "OTHR" if the source value does not match a UDL country code value
	// (ISO-3166-ALPHA-2).
	CountryCode string `json:"countryCode"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// A code describing the amount of operating unit participation in a deployment.
	// The specific usage and enumerations contained in this field may be found in the
	// documentation provided in the referenceDoc field. If referenceDoc not provided,
	// users may consult the data provider.
	DeployStatus string `json:"deployStatus"`
	// Description of the operating unit.
	Description string `json:"description"`
	// Combat status of a divisional or equivalent operating unit. Currently, this data
	// element applies only to operating units of the Former Soviet Union. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	DivCat string `json:"divCat"`
	// Organizational level of the operating unit. The specific usage and enumerations
	// contained in this field may be found in the documentation provided in the
	// referenceDoc field. If referenceDoc not provided, users may consult the data
	// provider.
	Echelon string `json:"echelon"`
	// Indicates the major group or level to which an echelon belongs. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	EchelonTier string `json:"echelonTier"`
	// Ground elevation of the geographic coordinates referenced to (above or below)
	// Mean Sea Level (MSL) vertical datum.
	ElevMsl float64 `json:"elevMsl"`
	// Indicates the confidence level expressed as a percent that a specific geometric
	// spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned
	// to within a specified vertical accuracy.
	ElevMslConfLvl int64 `json:"elevMslConfLvl"`
	// Indicates the plus or minus error assessed against the method used to derive the
	// elevation.
	ElevMslDerivAcc float64 `json:"elevMslDerivAcc"`
	// The Intelligence Confidence Level or the Reliability/degree of confidence that
	// the analyst has assigned to the data within this record. The numerical range is
	// from 1 to 9 with 1 representing the highest confidence level.
	Eval int64 `json:"eval"`
	// The country code of the observed flag flown.
	FlagFlown string `json:"flagFlown"`
	// Naval fleet to which an operating unit is assigned. The specific usage and
	// enumerations contained in this field may be found in the documentation provided
	// in the referenceDoc field. If referenceDoc not provided, users may consult the
	// data provider.
	FleetID string `json:"fleetId"`
	// An aggregation of military units within a single service (i.e., ARMY, AIR FORCE,
	// etc.) which operates under a single authority to accomplish a common mission.
	// The specific usage and enumerations contained in this field may be found in the
	// documentation provided in the referenceDoc field. If referenceDoc not provided,
	// users may consult the data provider.
	Force string `json:"force"`
	// The specific name for a given force. For example, Force = ADF (Air Defense
	// Force) and Force Name = Army Air Defense Force.
	ForceName string `json:"forceName"`
	// Functional Production Area (FPA) under the Shared Production Program (SPP).
	// Producers are defined per country per FPA. The specific usage and enumerations
	// contained in this field may be found in the documentation provided in the
	// referenceDoc field. If referenceDoc not provided, users may consult the data
	// provider.
	Fpa string `json:"fpa"`
	// Principal combat-related role that an operating unit is organized, structured
	// and equipped to perform. Or, the specialized military or paramilitary branch in
	// which an individual serves, their specialization. The specific usage and
	// enumerations contained in this field may be found in the documentation provided
	// in the referenceDoc field. If referenceDoc not provided, users may consult the
	// data provider.
	FunctRole string `json:"functRole"`
	// The distance between Mean Sea Level and a referenced ellipsoid.
	GeoidalMslSep float64 `json:"geoidalMslSep"`
	// Unique identifier of the contact for this operating unit.
	IDContact string `json:"idContact"`
	// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER,
	// NEUTRAL, PENDING, SUSPECT, UNKNOWN):
	//
	// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics,
	// behavior, and/or origin.
	//
	// FRIEND: Track object supporting friendly forces and belonging to a declared
	// friendly nation or entity.
	//
	// HOSTILE: Track object belonging to an opposing nation, party, group, or entity
	// deemed to contribute to a threat to friendly forces or their mission due to its
	// behavior, characteristics, nationality, or origin.
	//
	// FAKER: Friendly track, object, or entity acting as an exercise hostile.
	//
	// JOKER: Friendly track, object, or entity acting as an exercise suspect.
	//
	// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or
	// origin indicate that it is neither supporting nor opposing friendly forces or
	// their mission.
	//
	// PENDING: Track object which has not been evaluated.
	//
	// SUSPECT: Track object deemed potentially hostile due to the object
	// characteristics, behavior, nationality, and/or origin.
	//
	// UNKNOWN: Track object which has been evaluated and does not meet criteria for
	// any standard identity.
	Ident string `json:"ident"`
	// Unique identifier of the location record for this operating unit.
	IDLocation string `json:"idLocation"`
	// Unique identifier of the record, auto-generated by the system.
	IDOperatingUnit string `json:"idOperatingUnit"`
	// Unique identifier of the organization record for this operating unit.
	IDOrganization string `json:"idOrganization"`
	// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
	// south of equator).
	Lat float64 `json:"lat"`
	// Model representation of a location, which is a specific fixed point on the earth
	// and is used to denote the locations of fixed sensors, operating units, etc.
	Location unifieddatalibrary.LocationFull `json:"location"`
	// Location name for the coordinates.
	LocName string `json:"locName"`
	// Indicates the reason that the operating unit is at that location. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	LocReason string `json:"locReason"`
	// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
	// values west of Prime Meridian).
	Lon float64 `json:"lon"`
	// This field contains a value indicating whether the record is a master unit
	// record (True) or a detail record (False). Master records contain basic
	// information that does not change over time for each unit that has been selected
	// to be projected.
	MasterUnit bool `json:"masterUnit"`
	// The Military Grid Reference System is the geocoordinate standard used by NATO
	// militaries for locating points on Earth. The MGRS is derived from the Universal
	// Transverse Mercator (UTM) grid system and the Universal Polar Stereographic
	// (UPS) grid system, but uses a different labeling convention. The MGRS is used as
	// geocode for the entire Earth. Example of an milgrid coordinate, or grid
	// reference, would be 4QFJ12345678, which consists of three parts: 4Q (grid zone
	// designator, GZD) FJ (the 100,000-meter square identifier) 12345678 (numerical
	// location; easting is 1234 and northing is 5678, in this case specifying a
	// location with 10 m resolution).
	MilGrid string `json:"milGrid"`
	// Indicates the grid system used in the development of the milGrid coordinates.
	// Values are:
	//
	// # UPS - Universal Polar System
	//
	// UTM - Universal Transverse Mercator
	MilGridSys string `json:"milGridSys"`
	// Indicates the principal type of mission that an operating unit is organized and
	// equipped to perform. The specific usage and enumerations contained in this field
	// may be found in the documentation provided in the referenceDoc field. If
	// referenceDoc not provided, users may consult the data provider.
	MsnPrimary string `json:"msnPrimary"`
	// Indicates the principal specialty type of mission that an operating unit is
	// organized and equipped to perform. The specific usage and enumerations contained
	// in this field may be found in the documentation provided in the referenceDoc
	// field. If referenceDoc not provided, users may consult the data provider.
	MsnPrimarySpecialty string `json:"msnPrimarySpecialty"`
	// Remarks contain amplifying information for a specific service. The information
	// may contain context and interpretations for consumer use.
	OperatingUnitRemarks []OnorbitFullEntityCollectionOperatingUnitOperatingUnitRemark `json:"operatingUnitRemarks"`
	// The Degree to which an operating unit is ready to perform the overall
	// operational mission(s) for which it was organized and equipped. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	OperStatus string `json:"operStatus"`
	// An organization such as a corporation, manufacturer, consortium, government,
	// etc. An organization may have parent and child organizations as well as link to
	// a former organization if this org previously existed as another organization.
	Organization unifieddatalibrary.OrganizationFull `json:"organization"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// Political subdivision in which the geographic coordinates reside. The specific
	// usage and enumerations contained in this field may be found in the documentation
	// provided in the referenceDoc field. If referenceDoc not provided, users may
	// consult the data provider.
	PolSubdiv string `json:"polSubdiv"`
	// Validity and currency of the data in the record to be used in conjunction with
	// the other elements in the record as defined by SOPs. Values are: A - Active I -
	// Inactive K - Acknowledged L - Local Q - A nominated (NOM) or Data Change Request
	// (DCR) record R - Production reduced by CMD decision W - Working Record.
	RecStatus string `json:"recStatus"`
	// The reference documentiation that specifies the usage and enumerations contained
	// in this record. If referenceDoc not provided, users may consult the data
	// provider.
	ReferenceDoc string `json:"referenceDoc"`
	// Responsible Producer - Organization that is responsible for the maintenance of
	// the record.
	ResProd string `json:"resProd"`
	// Date on which the data in the record was last reviewed by the responsible
	// analyst for accuracy and currency. This date cannot be greater than the current
	// date.
	ReviewDate time.Time `json:"reviewDate" format:"date"`
	// This field contains a value indicating whether the record is a stylized
	// operating unit record (True) or a regular operating unit record (False). A
	// stylized operating unit is a type of operating unit with one set of equipment
	// that can be assigned to one or more superiors. A stylized operating unit is
	// generally useful for lower echelon operating units where the number of operating
	// units and types of equipment are equal for multiple organizations. In lieu of
	// creating unique operating unit records for each operating unit, a template is
	// created for the operating unit and its equipment. This template enables the user
	// to assign the operating unit to multiple organizations.
	StylizedUnit bool `json:"stylizedUnit"`
	// A standard scheme for symbol coding enabling the transfer, display and use of
	// symbols and graphics among information systems, as per MIL-STD 2525B, and
	// supported by the element AFFILIATION.
	SymCode string `json:"symCode"`
	// An optional identifier for this operating unit that may be composed from items
	// such as the originating organization, allegiance, one-up number, etc.
	UnitIdentifier string `json:"unitIdentifier"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Universal Transverse Mercator (UTM) grid coordinates. Pos. 1-2, UTM Zone Column
	// [01-60 Pos. 3, UTM Zone Row [C-HJ-NP-X] Pos. 4, UTM False Easting [0-9] Pos.
	// 5-9, UTM Meter Easting [0-9][0-9][0-9][0-9][0-9] Pos. 10-11, UTM False Northing
	// [0-9][0-9] Pos. 12-16, UTM Meter Northing [0-9][0-9][0-9][0-9][0-9].
	Utm string `json:"utm"`
	// World Aeronautical Chart identifier for the area in which a designated operating
	// unit is located.
	Wac string `json:"wac"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		AirDefArea            respjson.Field
		Allegiance            respjson.Field
		AltAllegiance         respjson.Field
		AltCountryCode        respjson.Field
		AltOperatingUnitID    respjson.Field
		ClassRating           respjson.Field
		Condition             respjson.Field
		ConditionAvail        respjson.Field
		Coord                 respjson.Field
		CoordDatum            respjson.Field
		CoordDerivAcc         respjson.Field
		CountryCode           respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		DeployStatus          respjson.Field
		Description           respjson.Field
		DivCat                respjson.Field
		Echelon               respjson.Field
		EchelonTier           respjson.Field
		ElevMsl               respjson.Field
		ElevMslConfLvl        respjson.Field
		ElevMslDerivAcc       respjson.Field
		Eval                  respjson.Field
		FlagFlown             respjson.Field
		FleetID               respjson.Field
		Force                 respjson.Field
		ForceName             respjson.Field
		Fpa                   respjson.Field
		FunctRole             respjson.Field
		GeoidalMslSep         respjson.Field
		IDContact             respjson.Field
		Ident                 respjson.Field
		IDLocation            respjson.Field
		IDOperatingUnit       respjson.Field
		IDOrganization        respjson.Field
		Lat                   respjson.Field
		Location              respjson.Field
		LocName               respjson.Field
		LocReason             respjson.Field
		Lon                   respjson.Field
		MasterUnit            respjson.Field
		MilGrid               respjson.Field
		MilGridSys            respjson.Field
		MsnPrimary            respjson.Field
		MsnPrimarySpecialty   respjson.Field
		OperatingUnitRemarks  respjson.Field
		OperStatus            respjson.Field
		Organization          respjson.Field
		Origin                respjson.Field
		PolSubdiv             respjson.Field
		RecStatus             respjson.Field
		ReferenceDoc          respjson.Field
		ResProd               respjson.Field
		ReviewDate            respjson.Field
		StylizedUnit          respjson.Field
		SymCode               respjson.Field
		UnitIdentifier        respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		Utm                   respjson.Field
		Wac                   respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullEntityCollectionOperatingUnit) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullEntityCollectionOperatingUnit) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Remarks contain amplifying information for a specific service. The information
// may contain context and interpretations for consumer use.
type OnorbitFullEntityCollectionOperatingUnitOperatingUnitRemark struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// The ID of the operating unit to which this remark applies.
	IDOperatingUnit string `json:"idOperatingUnit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The text of the remark.
	Text string `json:"text,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Unique identifier of the unit remark record from the originating system.
	AltRmkID string `json:"altRmkId"`
	// The remark type identifier. For example, the Mobility Air Forces (MAF) remark
	// code, defined in the Airfield Suitability and Restriction Report (ASRR).
	Code string `json:"code"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The name of the remark.
	Name string `json:"name"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
	Type string `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDOperatingUnit       respjson.Field
		Source                respjson.Field
		Text                  respjson.Field
		ID                    respjson.Field
		AltRmkID              respjson.Field
		Code                  respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Name                  respjson.Field
		Origin                respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullEntityCollectionOperatingUnitOperatingUnitRemark) RawJSON() string {
	return r.JSON.raw
}
func (r *OnorbitFullEntityCollectionOperatingUnitOperatingUnitRemark) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Details on a particular Radio Frequency (RF) band, also known as a carrier,
// which may be in use by any type of Entity for communications or operations.
type OnorbitFullEntityCollectionRfBand struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Unique identifier of the parent Entity which uses this band.
	IDEntity string `json:"idEntity,required"`
	// RF Band name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Name of the band of this RF range (e.g.
	// X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more
	// details and descriptions of each band name.
	Band string `json:"band"`
	// RF Band frequency range bandwidth in Mhz.
	Bandwidth float64 `json:"bandwidth"`
	// Angle between the half-power (-3 dB) points of the main lobe of the antenna, in
	// degrees.
	Beamwidth float64 `json:"beamwidth"`
	// Center frequency of RF frequency range, if applicable, in Mhz.
	CenterFreq float64 `json:"centerFreq"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// RF Range edge gain, in dBi.
	EdgeGain float64 `json:"edgeGain"`
	// EIRP is defined as the RMS power input in decibel watts required to a lossless
	// half-wave dipole antenna to give the same maximum power density far from the
	// antenna as the actual transmitter. It is equal to the power input to the
	// transmitter's antenna multiplied by the antenna gain relative to a half-wave
	// dipole. Effective radiated power and effective isotropic radiated power both
	// measure the amount of power a radio transmitter and antenna (or other source of
	// electromagnetic waves) radiates in a specific direction: in the direction of
	// maximum signal strength (the "main lobe") of its radiation pattern.
	Eirp float64 `json:"eirp"`
	// Effective Radiated Power (ERP) is the total power in decibel watts radiated by
	// an actual antenna relative to a half-wave dipole rather than a theoretical
	// isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an
	// isotropic antenna. EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64\*ERP(W).
	// Effective radiated power and effective isotropic radiated power both measure the
	// amount of power a radio transmitter and antenna (or other source of
	// electromagnetic waves) radiates in a specific direction: in the direction of
	// maximum signal strength (the "main lobe") of its radiation pattern.
	Erp float64 `json:"erp"`
	// End/maximum of transmit RF frequency range, if applicable, in Mhz.
	FreqMax float64 `json:"freqMax"`
	// Start/minimum of transmit RF frequency range, if applicable, in Mhz.
	FreqMin float64 `json:"freqMin"`
	// RF Band mode (e.g. TX, RX).
	//
	// Any of "TX", "RX".
	Mode string `json:"mode"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// RF Range maximum gain, in dBi.
	PeakGain float64 `json:"peakGain"`
	// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to
	// Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L -
	// (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface,
	// R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's
	// surface.
	//
	// Any of "H", "V", "R", "L".
	Polarization string `json:"polarization"`
	// Purpose or use of the RF Band -- COMM = communications, TTC =
	// Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
	//
	// Any of "COMM", "TTC", "OPS", "OTHER".
	Purpose string `json:"purpose"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDEntity              respjson.Field
		Name                  respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		Band                  respjson.Field
		Bandwidth             respjson.Field
		Beamwidth             respjson.Field
		CenterFreq            respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		EdgeGain              respjson.Field
		Eirp                  respjson.Field
		Erp                   respjson.Field
		FreqMax               respjson.Field
		FreqMin               respjson.Field
		Mode                  respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		PeakGain              respjson.Field
		Polarization          respjson.Field
		Purpose               respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullEntityCollectionRfBand) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullEntityCollectionRfBand) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Status for a particular Entity. An entity may have multiple status records
// collected by various sources.
type OnorbitFullEntityCollectionStatusCollection struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Unique identifier of the parent entity.
	IDEntity string `json:"idEntity,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The declassification date of this data, in ISO 8601 UTC format.
	DeclassificationDate time.Time `json:"declassificationDate" format:"date-time"`
	// Declassification string of this data.
	DeclassificationString string `json:"declassificationString"`
	// The sources or SCG references from which the classification of this data is
	// derived.
	DerivedFrom string `json:"derivedFrom"`
	// Comments describing the status creation and or updates to an entity.
	Notes string `json:"notes"`
	// Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
	//
	// Any of "FMC", "NMC", "PMC", "UNK".
	OpsCap string `json:"opsCap"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF
	// ACTIVE, STANDBY).
	//
	// Any of "UNKNOWN", "DEAD", "ACTIVE", "RF ACTIVE", "STANDBY".
	State               string                                                           `json:"state"`
	SubStatusCollection []OnorbitFullEntityCollectionStatusCollectionSubStatusCollection `json:"subStatusCollection"`
	// System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
	//
	// Any of "FMC", "NMC", "PMC", "UNK".
	SysCap string `json:"sysCap"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking  respjson.Field
		DataMode               respjson.Field
		IDEntity               respjson.Field
		Source                 respjson.Field
		ID                     respjson.Field
		CreatedAt              respjson.Field
		CreatedBy              respjson.Field
		DeclassificationDate   respjson.Field
		DeclassificationString respjson.Field
		DerivedFrom            respjson.Field
		Notes                  respjson.Field
		OpsCap                 respjson.Field
		Origin                 respjson.Field
		OrigNetwork            respjson.Field
		State                  respjson.Field
		SubStatusCollection    respjson.Field
		SysCap                 respjson.Field
		UpdatedAt              respjson.Field
		UpdatedBy              respjson.Field
		ExtraFields            map[string]respjson.Field
		raw                    string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullEntityCollectionStatusCollection) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullEntityCollectionStatusCollection) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Additional sub-system or capability status for the parent entity.
type OnorbitFullEntityCollectionStatusCollectionSubStatusCollection struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Descriptions and/or comments associated with the sub-status.
	Notes string `json:"notes,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
	//
	// Any of "FMC", "NMC", "PMC", "UNK".
	Status string `json:"status,required"`
	// Id of the parent status.
	StatusID string `json:"statusId,required"`
	// Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
	//
	// Any of "mwCap", "ssCap", "mdCap".
	Type string `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		Notes                 respjson.Field
		Source                respjson.Field
		Status                respjson.Field
		StatusID              respjson.Field
		Type                  respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullEntityCollectionStatusCollectionSubStatusCollection) RawJSON() string {
	return r.JSON.raw
}
func (r *OnorbitFullEntityCollectionStatusCollectionSubStatusCollection) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
// UNKNOWN.
type OnorbitFullObjectType string

const (
	OnorbitFullObjectTypeRocketBody OnorbitFullObjectType = "ROCKET BODY"
	OnorbitFullObjectTypeDebris     OnorbitFullObjectType = "DEBRIS"
	OnorbitFullObjectTypePayload    OnorbitFullObjectType = "PAYLOAD"
	OnorbitFullObjectTypePlatform   OnorbitFullObjectType = "PLATFORM"
	OnorbitFullObjectTypeManned     OnorbitFullObjectType = "MANNED"
	OnorbitFullObjectTypeUnknown    OnorbitFullObjectType = "UNKNOWN"
)

// Contains details of the OnOrbit object.
type OnorbitFullOnorbitDetail struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// UUID of the parent Onorbit record.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Mass of fuel and disposables at launch time in kilograms.
	AdditionalMass float64 `json:"additionalMass"`
	// The radius used for long-term debris environment projection analyses that is not
	// as conservative as COLA Radius, in meters.
	AdeptRadius float64 `json:"adeptRadius"`
	// The total beginning of life delta V of the spacecraft, in meters per second.
	BolDeltaV float64 `json:"bolDeltaV"`
	// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
	BolFuelMass float64 `json:"bolFuelMass"`
	// Average cross sectional area of the bus in meters squared.
	BusCrossSection float64 `json:"busCrossSection"`
	// Type of the bus on the spacecraft.
	BusType string `json:"busType"`
	// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b +
	// c\*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.)
	// in meters.
	ColaRadius float64 `json:"colaRadius"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Average cross sectional area in meters squared.
	CrossSection float64 `json:"crossSection"`
	// The estimated total current mass of the spacecraft, in kilograms.
	CurrentMass float64 `json:"currentMass"`
	// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
	DeltaVUnc float64 `json:"deltaVUnc"`
	// Array of the estimated mass of each deployable object, in kilograms. Must
	// contain the same number of elements as the value of numDeployable.
	DepEstMasses []float64 `json:"depEstMasses"`
	// Array of the 1-sigma uncertainty of the mass for each deployable object, in
	// kilograms. Must contain the same number of elements as the value of
	// numDeployable.
	DepMassUncs []float64 `json:"depMassUncs"`
	// Array of satellite deployable objects. Must contain the same number of elements
	// as the value of numDeployable.
	DepNames []string `json:"depNames"`
	// GEO drift rate, if applicable in degrees per day.
	DriftRate float64 `json:"driftRate"`
	// Spacecraft dry mass (without fuel or disposables) in kilograms.
	DryMass float64 `json:"dryMass"`
	// Estimated maximum burn duration for the object, in seconds.
	EstDeltaVDuration float64 `json:"estDeltaVDuration"`
	// Estimated remaining fuel for the object in kilograms.
	FuelRemaining float64 `json:"fuelRemaining"`
	// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees
	// (East of Prime Meridian). Prime Meridian is 0.
	GeoSlot float64 `json:"geoSlot"`
	// The name of the source who last provided an observation for this idOnOrbit.
	LastObSource string `json:"lastObSource"`
	// Time of last reported observation for this object in ISO 8601 UTC with
	// microsecond precision.
	LastObTime time.Time `json:"lastObTime" format:"date-time"`
	// Nominal mass of spacecraft and fuel at launch time, in kilograms.
	LaunchMass float64 `json:"launchMass"`
	// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
	LaunchMassMax float64 `json:"launchMassMax"`
	// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
	LaunchMassMin float64 `json:"launchMassMin"`
	// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft
	// may have propulsion capability but may not be maneuverable due to lack of fuel,
	// anomalous condition, or other operational constraints.
	Maneuverable bool `json:"maneuverable"`
	// Maximum delta V available for this on-orbit spacecraft, in meters per second.
	MaxDeltaV float64 `json:"maxDeltaV"`
	// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel
	// arrays) in meters.
	MaxRadius float64 `json:"maxRadius"`
	// Array of the type of missions the spacecraft performs. Must contain the same
	// number of elements as the value of numMission.
	MissionTypes []string `json:"missionTypes"`
	// The number of sub-satellites or deployable objects on the spacecraft.
	NumDeployable int64 `json:"numDeployable"`
	// The number of distinct missions the spacecraft performs.
	NumMission int64 `json:"numMission"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Current/latest radar cross section in meters squared.
	Rcs float64 `json:"rcs"`
	// Maximum radar cross section in meters squared.
	RcsMax float64 `json:"rcsMax"`
	// Mean radar cross section in meters squared.
	RcsMean float64 `json:"rcsMean"`
	// Minimum radar cross section in meters squared.
	RcsMin float64 `json:"rcsMin"`
	// The reference source, sources, or URL from which the data in this record was
	// obtained.
	RefSource string `json:"refSource"`
	// Spacecraft deployed area of solar array in meters squared.
	SolarArrayArea float64 `json:"solarArrayArea"`
	// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
	TotalMassUnc float64 `json:"totalMassUnc"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// Current/latest visual magnitude in M.
	Vismag float64 `json:"vismag"`
	// Maximum visual magnitude in M.
	VismagMax float64 `json:"vismagMax"`
	// Mean visual magnitude in M.
	VismagMean float64 `json:"vismagMean"`
	// Minimum visual magnitude in M.
	VismagMin float64 `json:"vismagMin"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDOnOrbit             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		AdditionalMass        respjson.Field
		AdeptRadius           respjson.Field
		BolDeltaV             respjson.Field
		BolFuelMass           respjson.Field
		BusCrossSection       respjson.Field
		BusType               respjson.Field
		ColaRadius            respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		CrossSection          respjson.Field
		CurrentMass           respjson.Field
		DeltaVUnc             respjson.Field
		DepEstMasses          respjson.Field
		DepMassUncs           respjson.Field
		DepNames              respjson.Field
		DriftRate             respjson.Field
		DryMass               respjson.Field
		EstDeltaVDuration     respjson.Field
		FuelRemaining         respjson.Field
		GeoSlot               respjson.Field
		LastObSource          respjson.Field
		LastObTime            respjson.Field
		LaunchMass            respjson.Field
		LaunchMassMax         respjson.Field
		LaunchMassMin         respjson.Field
		Maneuverable          respjson.Field
		MaxDeltaV             respjson.Field
		MaxRadius             respjson.Field
		MissionTypes          respjson.Field
		NumDeployable         respjson.Field
		NumMission            respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Rcs                   respjson.Field
		RcsMax                respjson.Field
		RcsMean               respjson.Field
		RcsMin                respjson.Field
		RefSource             respjson.Field
		SolarArrayArea        respjson.Field
		TotalMassUnc          respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		Vismag                respjson.Field
		VismagMax             respjson.Field
		VismagMean            respjson.Field
		VismagMin             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullOnorbitDetail) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullOnorbitDetail) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type OnorbitFullSolarArray struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// ID of the on-orbit object.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// ID of the SolarArray.
	IDSolarArray string `json:"idSolarArray,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The number of solar arrays on the spacecraft of the type identified by
	// idSolarArray.
	Quantity int64 `json:"quantity"`
	// Model representation of information on on-orbit/spacecraft solar arrays. A
	// spacecraft may have multiple solar arrays and each solar array can have multiple
	// 'details' records compiled by different sources.
	SolarArray OnorbitFullSolarArraySolarArray `json:"solarArray"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDOnOrbit             respjson.Field
		IDSolarArray          respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Quantity              respjson.Field
		SolarArray            respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullSolarArray) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullSolarArray) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Model representation of information on on-orbit/spacecraft solar arrays. A
// spacecraft may have multiple solar arrays and each solar array can have multiple
// 'details' records compiled by different sources.
type OnorbitFullSolarArraySolarArray struct {
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// Solar Array name.
	Name string `json:"name,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Read-only collection of additional SolarArrayDetails by various sources for this
	// organization, ignored on create/update. These details must be created separately
	// via the /udl/solararraydetails operations.
	SolarArrayDetails []unifieddatalibrary.SolarArrayDetailsFull `json:"solarArrayDetails"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		DataMode          respjson.Field
		Name              respjson.Field
		Source            respjson.Field
		ID                respjson.Field
		CreatedAt         respjson.Field
		CreatedBy         respjson.Field
		Origin            respjson.Field
		OrigNetwork       respjson.Field
		SolarArrayDetails respjson.Field
		UpdatedAt         respjson.Field
		UpdatedBy         respjson.Field
		ExtraFields       map[string]respjson.Field
		raw               string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullSolarArraySolarArray) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullSolarArraySolarArray) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type OnorbitFullThruster struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,required"`
	// ID of the Engine.
	IDEngine string `json:"idEngine,required"`
	// ID of the on-orbit object.
	IDOnOrbit string `json:"idOnOrbit,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Known launch vehicle engines and their performance characteristics and limits. A
	// launch vehicle has 1 to many engines per stage.
	Engine unifieddatalibrary.Engine `json:"engine"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// The number of engines/thrusters on the spacecraft of the type identified by
	// idEngine.
	Quantity int64 `json:"quantity"`
	// The type of thruster associated with this record (e.g. LAE, Hydrazine REA,
	// etc.).
	Type string `json:"type"`
	// Time the row was last updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking respjson.Field
		DataMode              respjson.Field
		IDEngine              respjson.Field
		IDOnOrbit             respjson.Field
		Source                respjson.Field
		ID                    respjson.Field
		CreatedAt             respjson.Field
		CreatedBy             respjson.Field
		Engine                respjson.Field
		Origin                respjson.Field
		OrigNetwork           respjson.Field
		Quantity              respjson.Field
		Type                  respjson.Field
		UpdatedAt             respjson.Field
		UpdatedBy             respjson.Field
		ExtraFields           map[string]respjson.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r OnorbitFullThruster) RawJSON() string { return r.JSON.raw }
func (r *OnorbitFullThruster) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

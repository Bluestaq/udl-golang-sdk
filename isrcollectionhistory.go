// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"slices"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	"github.com/Bluestaq/udl-golang-sdk/internal/apiquery"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/pagination"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/packages/respjson"
)

// IsrCollectionHistoryService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewIsrCollectionHistoryService] method instead.
type IsrCollectionHistoryService struct {
	Options []option.RequestOption
}

// NewIsrCollectionHistoryService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewIsrCollectionHistoryService(opts ...option.RequestOption) (r IsrCollectionHistoryService) {
	r = IsrCollectionHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *IsrCollectionHistoryService) List(ctx context.Context, query IsrCollectionHistoryListParams, opts ...option.RequestOption) (res *pagination.OffsetPage[IsrCollectionHistoryListResponse], err error) {
	var raw *http.Response
	opts = slices.Concat(r.Options, opts)
	opts = append([]option.RequestOption{option.WithResponseInto(&raw)}, opts...)
	path := "udl/isrcollection/history"
	cfg, err := requestconfig.NewRequestConfig(ctx, http.MethodGet, path, query, &res, opts...)
	if err != nil {
		return nil, err
	}
	err = cfg.Execute()
	if err != nil {
		return nil, err
	}
	res.SetPageConfig(cfg, raw)
	return res, nil
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *IsrCollectionHistoryService) ListAutoPaging(ctx context.Context, query IsrCollectionHistoryListParams, opts ...option.RequestOption) *pagination.OffsetPageAutoPager[IsrCollectionHistoryListResponse] {
	return pagination.NewOffsetPageAutoPager(r.List(ctx, query, opts...))
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation, then write that data to the
// Secure Content Store. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *IsrCollectionHistoryService) Aodr(ctx context.Context, query IsrCollectionHistoryAodrParams, opts ...option.RequestOption) (err error) {
	opts = slices.Concat(r.Options, opts)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "udl/isrcollection/history/aodr"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, nil, opts...)
	return
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *IsrCollectionHistoryService) Count(ctx context.Context, query IsrCollectionHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = slices.Concat(r.Options, opts)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/isrcollection/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// ISR Collection data.
type IsrCollectionHistoryListResponse struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode IsrCollectionHistoryListResponseDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Mission desired collection requirements.
	CollectionRequirements []IsrCollectionRequirementsFull `json:"collectionRequirements"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Version of the IDEX software the request came from for compatibility.
	IdexVersion int64 `json:"idexVersion"`
	// Designation of mission Area Of Responsibility.
	MissionAor string `json:"missionAOR"`
	// Mission geographical collection area.
	MissionCollectionArea string `json:"missionCollectionArea"`
	// Country code of the mission. A Country may represent countries, multi-national
	// consortiums, and international organizations.
	MissionCountry string `json:"missionCountry"`
	// Text version of what we are emphasizing in this mission.
	MissionEmphasis string `json:"missionEmphasis"`
	// Mission Identifier.
	MissionID string `json:"missionId"`
	// Joint Operations Area.
	MissionJoa string `json:"missionJoa"`
	// Mission operation name.
	MissionOperation string `json:"missionOperation"`
	// Primary type of intelligence to be collected during the mission.
	MissionPrimaryIntelDiscipline string `json:"missionPrimaryIntelDiscipline"`
	// Sub category of primary intelligence to be collected.
	MissionPrimarySubCategory string `json:"missionPrimarySubCategory"`
	// Mission Priority (1-n).
	MissionPriority int64 `json:"missionPriority"`
	// Region of the mission.
	MissionRegion string `json:"missionRegion"`
	// What is the primary objective(Role) of this mission.
	MissionRole string `json:"missionRole"`
	// Type of intelligence to be collected second.
	MissionSecondaryIntelDiscipline string `json:"missionSecondaryIntelDiscipline"`
	// Mission sub category for secondary intelligence discipline to be collected.
	MissionSecondarySubCategory string `json:"missionSecondarySubCategory"`
	// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	MissionStartPointLat float64 `json:"missionStartPointLat"`
	// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	MissionStartPointLong float64 `json:"missionStartPointLong"`
	// Subregion of the mission.
	MissionSubRegion string `json:"missionSubRegion"`
	// Name of the Supporting unit/Location that is performing this mission.
	MissionSupportedUnit string `json:"missionSupportedUnit"`
	// A synchronization matrix is used to organize the logistics synchronization
	// process during a mission.
	MissionSyncMatrixBin string `json:"missionSyncMatrixBin"`
	// Human readable Mission Name.
	Name string `json:"name"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Individual taskings to complete the mission.
	Taskings []IsrCollectionHistoryListResponseTasking `json:"taskings"`
	// Object for data dissemination.
	Transit []IsrCollectionHistoryListResponseTransit `json:"transit"`
	// Time the row was updated in the database, auto-populated by the system, example
	// = 2018-01-01T16:00:00.123Z.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking           respjson.Field
		DataMode                        respjson.Field
		Source                          respjson.Field
		ID                              respjson.Field
		CollectionRequirements          respjson.Field
		CreatedAt                       respjson.Field
		CreatedBy                       respjson.Field
		IdexVersion                     respjson.Field
		MissionAor                      respjson.Field
		MissionCollectionArea           respjson.Field
		MissionCountry                  respjson.Field
		MissionEmphasis                 respjson.Field
		MissionID                       respjson.Field
		MissionJoa                      respjson.Field
		MissionOperation                respjson.Field
		MissionPrimaryIntelDiscipline   respjson.Field
		MissionPrimarySubCategory       respjson.Field
		MissionPriority                 respjson.Field
		MissionRegion                   respjson.Field
		MissionRole                     respjson.Field
		MissionSecondaryIntelDiscipline respjson.Field
		MissionSecondarySubCategory     respjson.Field
		MissionStartPointLat            respjson.Field
		MissionStartPointLong           respjson.Field
		MissionSubRegion                respjson.Field
		MissionSupportedUnit            respjson.Field
		MissionSyncMatrixBin            respjson.Field
		Name                            respjson.Field
		Origin                          respjson.Field
		OrigNetwork                     respjson.Field
		Taskings                        respjson.Field
		Transit                         respjson.Field
		UpdatedAt                       respjson.Field
		UpdatedBy                       respjson.Field
		ExtraFields                     map[string]respjson.Field
		raw                             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r IsrCollectionHistoryListResponse) RawJSON() string { return r.JSON.raw }
func (r *IsrCollectionHistoryListResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type IsrCollectionHistoryListResponseDataMode string

const (
	IsrCollectionHistoryListResponseDataModeReal      IsrCollectionHistoryListResponseDataMode = "REAL"
	IsrCollectionHistoryListResponseDataModeTest      IsrCollectionHistoryListResponseDataMode = "TEST"
	IsrCollectionHistoryListResponseDataModeSimulated IsrCollectionHistoryListResponseDataMode = "SIMULATED"
	IsrCollectionHistoryListResponseDataModeExercise  IsrCollectionHistoryListResponseDataMode = "EXERCISE"
)

type IsrCollectionHistoryListResponseTasking struct {
	// Tasking Unique Identifier.
	ID                string                                                   `json:"id"`
	CollectionPeriods IsrCollectionHistoryListResponseTaskingCollectionPeriods `json:"collectionPeriods"`
	// Type of collection tasked.
	//
	// Any of "Simultaneous", "Sequential", "Operationally", "Driven", "Priority",
	// "Order".
	CollectionType string `json:"collectionType"`
	// Eight line.
	EightLine string `json:"eightLine"`
	// Free text field for the user to specify special instructions needed for this
	// collection.
	SpecialComGuidance string `json:"specialComGuidance"`
	// Value of the Sensitive Reconnaissance Operations Track.
	SroTrack string `json:"sroTrack"`
	// Human readable definition of this taskings Area Of Responsibility.
	TaskingAor string `json:"taskingAOR"`
	// Tasking geographical collection area.
	TaskingCollectionArea string `json:"taskingCollectionArea"`
	// Tasking desired collection requirements.
	TaskingCollectionRequirements []IsrCollectionRequirementsFull `json:"taskingCollectionRequirements"`
	// Country code of the tasking. A Country may represent countries, multi-national
	// consortiums, and international organizations.
	TaskingCountry string `json:"taskingCountry"`
	// Tasking emphasis.
	TaskingEmphasis string `json:"taskingEmphasis"`
	// Joint Operations Area.
	TaskingJoa string `json:"taskingJoa"`
	// Tasking operation name.
	TaskingOperation string `json:"taskingOperation"`
	// Primary type of intelligence to be collected during the mission.
	TaskingPrimaryIntelDiscipline string `json:"taskingPrimaryIntelDiscipline"`
	// Sub category of primary intelligence to be collected.
	TaskingPrimarySubCategory string `json:"taskingPrimarySubCategory"`
	// Tasking Priority (1-n).
	TaskingPriority float64 `json:"taskingPriority"`
	// Region of the tasking.
	TaskingRegion string `json:"taskingRegion"`
	// Time of retasking, in ISO 8601 UTC format.
	TaskingRetaskTime time.Time `json:"taskingRetaskTime" format:"date-time"`
	// What is the primary objective (role) of this task.
	TaskingRole string `json:"taskingRole"`
	// Type of tasking intelligence to be collected second.
	TaskingSecondaryIntelDiscipline string `json:"taskingSecondaryIntelDiscipline"`
	// Mission sub category for secondary intelligence discipline to be collected.
	TaskingSecondarySubCategory string `json:"taskingSecondarySubCategory"`
	// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative
	// values south of equator).
	TaskingStartPointLat float64 `json:"taskingStartPointLat"`
	// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	TaskingStartPointLong float64 `json:"taskingStartPointLong"`
	// Subregion of the tasking.
	TaskingSubRegion string `json:"taskingSubRegion"`
	// Military Base to transmit the dissemination of this data.
	TaskingSupportedUnit string `json:"taskingSupportedUnit"`
	// A synchronization matrix is used to organize the logistics synchronization
	// process during a mission.
	TaskingSyncMatrixBin string `json:"taskingSyncMatrixBin"`
	// Type of tasking.
	//
	// Any of "Deliberate", "Dynamic", "Training", "Transit".
	Type string `json:"type"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID                              respjson.Field
		CollectionPeriods               respjson.Field
		CollectionType                  respjson.Field
		EightLine                       respjson.Field
		SpecialComGuidance              respjson.Field
		SroTrack                        respjson.Field
		TaskingAor                      respjson.Field
		TaskingCollectionArea           respjson.Field
		TaskingCollectionRequirements   respjson.Field
		TaskingCountry                  respjson.Field
		TaskingEmphasis                 respjson.Field
		TaskingJoa                      respjson.Field
		TaskingOperation                respjson.Field
		TaskingPrimaryIntelDiscipline   respjson.Field
		TaskingPrimarySubCategory       respjson.Field
		TaskingPriority                 respjson.Field
		TaskingRegion                   respjson.Field
		TaskingRetaskTime               respjson.Field
		TaskingRole                     respjson.Field
		TaskingSecondaryIntelDiscipline respjson.Field
		TaskingSecondarySubCategory     respjson.Field
		TaskingStartPointLat            respjson.Field
		TaskingStartPointLong           respjson.Field
		TaskingSubRegion                respjson.Field
		TaskingSupportedUnit            respjson.Field
		TaskingSyncMatrixBin            respjson.Field
		Type                            respjson.Field
		ExtraFields                     map[string]respjson.Field
		raw                             string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r IsrCollectionHistoryListResponseTasking) RawJSON() string { return r.JSON.raw }
func (r *IsrCollectionHistoryListResponseTasking) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type IsrCollectionHistoryListResponseTaskingCollectionPeriods struct {
	// Actual start and stop for the collection.
	Actual  []IsrCollectionHistoryListResponseTaskingCollectionPeriodsActual `json:"actual"`
	Planned IsrCollectionHistoryListResponseTaskingCollectionPeriodsPlanned  `json:"planned"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Actual      respjson.Field
		Planned     respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r IsrCollectionHistoryListResponseTaskingCollectionPeriods) RawJSON() string { return r.JSON.raw }
func (r *IsrCollectionHistoryListResponseTaskingCollectionPeriods) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type IsrCollectionHistoryListResponseTaskingCollectionPeriodsActual struct {
	// Unique Identifier of actual collection period for historical archive.
	ID string `json:"id"`
	// Start time the collection actually occurred, in ISO 8601 UTC format.
	Start time.Time `json:"start" format:"date-time"`
	// Stop time the collection actually occurred, in ISO 8601 UTC format.
	Stop time.Time `json:"stop" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		Start       respjson.Field
		Stop        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r IsrCollectionHistoryListResponseTaskingCollectionPeriodsActual) RawJSON() string {
	return r.JSON.raw
}
func (r *IsrCollectionHistoryListResponseTaskingCollectionPeriodsActual) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type IsrCollectionHistoryListResponseTaskingCollectionPeriodsPlanned struct {
	// Additional start and stop for the collection.
	Additional []IsrCollectionHistoryListResponseTaskingCollectionPeriodsPlannedAdditional `json:"additional"`
	// Start time of collection, in ISO 8601 UTC format.
	Start time.Time `json:"start" format:"date-time"`
	// Stop time of collection, in ISO 8601 UTC format.
	Stop time.Time `json:"stop" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Additional  respjson.Field
		Start       respjson.Field
		Stop        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r IsrCollectionHistoryListResponseTaskingCollectionPeriodsPlanned) RawJSON() string {
	return r.JSON.raw
}
func (r *IsrCollectionHistoryListResponseTaskingCollectionPeriodsPlanned) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type IsrCollectionHistoryListResponseTaskingCollectionPeriodsPlannedAdditional struct {
	// Unique Identifier of additional collection period.
	ID string `json:"id"`
	// Start time of collection, in ISO 8601 UTC format.
	Start time.Time `json:"start" format:"date-time"`
	// Stop time of collection, in ISO 8601 UTC format.
	Stop time.Time `json:"stop" format:"date-time"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		Start       respjson.Field
		Stop        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r IsrCollectionHistoryListResponseTaskingCollectionPeriodsPlannedAdditional) RawJSON() string {
	return r.JSON.raw
}
func (r *IsrCollectionHistoryListResponseTaskingCollectionPeriodsPlannedAdditional) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type IsrCollectionHistoryListResponseTransit struct {
	// Transit Unique Identifier.
	ID string `json:"id"`
	// Military Base to transmit the dissemination of this data.
	Base string `json:"base"`
	// Length of mission in milliseconds.
	Duration float64 `json:"duration"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		Base        respjson.Field
		Duration    respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r IsrCollectionHistoryListResponseTransit) RawJSON() string { return r.JSON.raw }
func (r *IsrCollectionHistoryListResponseTransit) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type IsrCollectionHistoryListParams struct {
	// Time the row was created in the database, auto-populated by the system.
	// (YYYY-MM-DDTHH:MM:SS.sssZ)
	CreatedAt time.Time `query:"createdAt,required" format:"date" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [IsrCollectionHistoryListParams]'s query parameters as
// `url.Values`.
func (r IsrCollectionHistoryListParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type IsrCollectionHistoryAodrParams struct {
	// Time the row was created in the database, auto-populated by the system.
	// (YYYY-MM-DDTHH:MM:SS.sssZ)
	CreatedAt time.Time `query:"createdAt,required" format:"date" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	// optional, notification method for the created file link. When omitted, EMAIL is
	// assumed. Current valid values are: EMAIL, SMS.
	Notification param.Opt[string] `query:"notification,omitzero" json:"-"`
	// optional, field delimiter when the created file is not JSON. Must be a single
	// character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
	// It is strongly encouraged that your field delimiter be a character unlikely to
	// occur within the data.
	OutputDelimiter param.Opt[string] `query:"outputDelimiter,omitzero" json:"-"`
	// optional, output format for the file. When omitted, JSON is assumed. Current
	// valid values are: JSON and CSV.
	OutputFormat param.Opt[string] `query:"outputFormat,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [IsrCollectionHistoryAodrParams]'s query parameters as
// `url.Values`.
func (r IsrCollectionHistoryAodrParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type IsrCollectionHistoryCountParams struct {
	// Time the row was created in the database, auto-populated by the system.
	// (YYYY-MM-DDTHH:MM:SS.sssZ)
	CreatedAt   time.Time        `query:"createdAt,required" format:"date" json:"-"`
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [IsrCollectionHistoryCountParams]'s query parameters as
// `url.Values`.
func (r IsrCollectionHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

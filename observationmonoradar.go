// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
)

// ObservationMonoradarService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewObservationMonoradarService] method instead.
type ObservationMonoradarService struct {
	Options []option.RequestOption
	History ObservationMonoradarHistoryService
}

// NewObservationMonoradarService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewObservationMonoradarService(opts ...option.RequestOption) (r ObservationMonoradarService) {
	r = ObservationMonoradarService{}
	r.Options = opts
	r.History = NewObservationMonoradarHistoryService(opts...)
	return
}

// Service operation to take a list of MonoRadar records as a POST body and ingest
// into the database. This operation is intended to be used for automated feeds
// into UDL. A specific role is required to perform this service operation. Please
// contact the UDL team for assistance.
func (r *ObservationMonoradarService) UnvalidatedPublish(ctx context.Context, body ObservationMonoradarUnvalidatedPublishParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "filedrop/monoradar"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

type ObservationMonoradarUnvalidatedPublishParams struct {
	Body []ObservationMonoradarUnvalidatedPublishParamsBody
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f ObservationMonoradarUnvalidatedPublishParams) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}

func (r ObservationMonoradarUnvalidatedPublishParams) MarshalJSON() (data []byte, err error) {
	return json.Marshal(r.Body)
}

// A monoradar record contains the raw, and in some cases, processed target reports
// from primary and secondary air surveillance radars. All target positions for
// monoradar reports are recorded as range and azimuth from geographical North
// relative to the detecting radar site. In the case of secondary surveillance
// radars, interrogation response codes are provided as well as quality and
// validation characteristics, when available in the particular record type used to
// generate the record.
//
// The properties ClassificationMarking, DataMode, Msgfmt, Msgts, Msgtyp, Source,
// Ts are required.
type ObservationMonoradarUnvalidatedPublishParamsBody struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,omitzero,required"`
	// Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
	Msgfmt string `json:"msgfmt,required"`
	// Message time, in ISO 8601 UTC format with microsecond precision. This is the
	// time that the data message was released from the site.
	Msgts time.Time `json:"msgts,required" format:"date-time"`
	// Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR',
	// etc..).
	Msgtyp string `json:"msgtyp,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Target detection time, in ISO 8601 UTC format with microsecond precision.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// Azimuth Change Pulse count at target detection.
	Acp param.Opt[int64] `json:"acp,omitzero"`
	// Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
	Addr param.Opt[string] `json:"addr,omitzero"`
	// Flag indicating military message.
	Af param.Opt[bool] `json:"af,omitzero"`
	// Flag indicating whether AIMS present.
	Aims param.Opt[bool] `json:"aims,omitzero"`
	// Measured height of the target, in km. (for 3D radars).
	Alt3d param.Opt[float64] `json:"alt3d,omitzero"`
	// ARTS quality.
	Artsqual param.Opt[string] `json:"artsqual,omitzero"`
	// Target azimuth, measured from the observing site, in degrees from true North. If
	// Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
	Az param.Opt[float64] `json:"az,omitzero"`
	// Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
	Azdelt param.Opt[float64] `json:"azdelt,omitzero"`
	// Number of beacon hits received on the target.
	Bcnhits param.Opt[int64] `json:"bcnhits,omitzero"`
	// Climbing/Descending mode indicator.
	Cdm param.Opt[string] `json:"cdm,omitzero"`
	// 7500 squawk present (hijack).
	Code7500 param.Opt[bool] `json:"code7500,omitzero"`
	// 7600 squawk present (loss of comm).
	Code7600 param.Opt[bool] `json:"code7600,omitzero"`
	// 7700 squawk present (general emergency).
	Code7700 param.Opt[bool] `json:"code7700,omitzero"`
	// Time the row was created in the database.
	CreatedAt param.Opt[time.Time] `json:"createdAt,omitzero" format:"date-time"`
	// Application user who created the row in the database.
	CreatedBy param.Opt[string] `json:"createdBy,omitzero"`
	// Flag indicating FAA/Civ message.
	Faa param.Opt[bool] `json:"faa,omitzero"`
	// Target ground speed, in meters/second.
	Grndspd param.Opt[float64] `json:"grndspd,omitzero"`
	// Target heading, in degrees from true North at the target position.
	Hdng param.Opt[float64] `json:"hdng,omitzero"`
	// ID of the radar site or station providing the data.
	IDSensor param.Opt[string] `json:"idSensor,omitzero"`
	// Mode-1 interrogation response (mission code).
	M1 param.Opt[string] `json:"m1,omitzero"`
	// Indicator that the mode-1 response was garbled.
	M1g param.Opt[bool] `json:"m1g,omitzero"`
	// Status of the mode-1 validity bit.
	M1v param.Opt[string] `json:"m1v,omitzero"`
	// Mode-2 interrogation response (military identification code).
	M2 param.Opt[string] `json:"m2,omitzero"`
	// Indicator that the mode-2 response was garbled.
	M2g param.Opt[bool] `json:"m2g,omitzero"`
	// Status of the mode-2 validity bit.
	M2v param.Opt[string] `json:"m2v,omitzero"`
	// Status of the mode-2 X-Pulse response validation.
	M2xv param.Opt[string] `json:"m2xv,omitzero"`
	// Mode-3/A interrogation response (aircraft identification).
	M3a param.Opt[string] `json:"m3a,omitzero"`
	// Indicator that the mode-3/A response was garbled.
	M3ag param.Opt[bool] `json:"m3ag,omitzero"`
	// Status of the mode-3/A validity bit.
	M3av param.Opt[string] `json:"m3av,omitzero"`
	// Status of the mode-3 X-Pulse response validation.
	M3axv param.Opt[string] `json:"m3axv,omitzero"`
	// Mode-4 interrogation response (Identification Friend/Foe).
	M4 param.Opt[string] `json:"m4,omitzero"`
	// Mode-4 D1 & D2 response status.
	M4d1d2 param.Opt[string] `json:"m4d1d2,omitzero"`
	// Status of the mode-4 validity bit.
	M4v param.Opt[string] `json:"m4v,omitzero"`
	// Indication of Horizontal Maneuver detection.
	Mah param.Opt[string] `json:"mah,omitzero"`
	// Mode-C altitude (uncorrected pressure altitude), in km.
	Mc param.Opt[float64] `json:"mc,omitzero"`
	// Indicator that the mode-C response was garbled.
	Mcg param.Opt[bool] `json:"mcg,omitzero"`
	// Status of the mode-C validity bit.
	Mcv param.Opt[string] `json:"mcv,omitzero"`
	// Flag indicating military emergency.
	Milemrgcy param.Opt[bool] `json:"milemrgcy,omitzero"`
	// Flag indicating report separated from different responses at same range. Azimuth
	// may have larger than normal error when present.
	Mrgrpt param.Opt[bool] `json:"mrgrpt,omitzero"`
	// Mode-S Comm B message data.
	Mscommb param.Opt[string] `json:"mscommb,omitzero"`
	// Flag indicating that target was detected using data from an MTI receiver.
	Mti param.Opt[bool] `json:"mti,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork param.Opt[string] `json:"origNetwork,omitzero"`
	// Optional identifier provided by observation source to indicate the sensor
	// identifier which produced this observation.This may be an internal identifier
	// and not necessarily a valid sensor ID.
	OrigSensorID param.Opt[string] `json:"origSensorId,omitzero"`
	// Runlength of the primary surveillance radar track, in degrees.
	Psrrl param.Opt[float64] `json:"psrrl,omitzero"`
	// Type of sensor(s) maintaining track.
	Rad param.Opt[string] `json:"rad,omitzero"`
	// Measured slant range to target from the observing site, in km.
	Rng param.Opt[float64] `json:"rng,omitzero"`
	// Target range delta between PSR and SSR (reference PSR-SSR), in km.
	Rngdelt param.Opt[float64] `json:"rngdelt,omitzero"`
	// System Area Code.
	Sac param.Opt[int64] `json:"sac,omitzero"`
	// Sensor altitude, in kilometers, at time of observation (ts).
	Senalt param.Opt[float64] `json:"senalt,omitzero"`
	// Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90
	// degrees (negative values south of equator).
	Senlat param.Opt[float64] `json:"senlat,omitzero"`
	// Sensor WGS84 longitude, in degrees, at time of observation (ts). -180 to 180
	// degrees (negative values west of Prime Meridian).
	Senlon param.Opt[float64] `json:"senlon,omitzero"`
	// System Identification Code.
	Sic param.Opt[int64] `json:"sic,omitzero"`
	// Flag indicating whether Special Position Indicator (SPI) present in
	// interrogation response.
	Spi param.Opt[bool] `json:"spi,omitzero"`
	// Runlength of the secondary surveillance radar track, in degrees.
	Ssrl param.Opt[float64] `json:"ssrl,omitzero"`
	// Target confidence.
	Tgtconf param.Opt[string] `json:"tgtconf,omitzero"`
	// Target correlation flag.
	Tgtcorr param.Opt[string] `json:"tgtcorr,omitzero"`
	// Aircraft identification from an aircraft equipped with a Mode S transponder.
	Tgtid param.Opt[string] `json:"tgtid,omitzero"`
	// Data time-in-storage, in seconds. This is the amount of time elapsed between
	// target detection and message transmission.
	Tis param.Opt[float64] `json:"tis,omitzero"`
	// Track eligibility flag.
	Trkelig param.Opt[string] `json:"trkelig,omitzero"`
	// Value representing a unique reference to a track record within a particular
	// track file. Included when the radar station outputs tracks.
	Trknum param.Opt[int64] `json:"trknum,omitzero"`
	// Test target indicator.
	Tti param.Opt[string] `json:"tti,omitzero"`
	// Array of local 2d-cartesian [x, y] coordinates of target, in km.
	Cartpos []float64 `json:"cartpos,omitzero"`
	// Optional array of provider/source specific tags for this data, where each
	// element is no longer than 32 characters, used for implementing data owner
	// conditional access controls to restrict access to the data. Should be left null
	// by data providers unless conditional access controls are coordinated with the
	// UDL team.
	Tags []string `json:"tags,omitzero"`
	// Warning/Error Conditions and Target Classification.
	Wectc []string `json:"wectc,omitzero"`
	paramObj
}

// IsPresent returns true if the field's value is not omitted and not the JSON
// "null". To check if this field is omitted, use [param.IsOmitted].
func (f ObservationMonoradarUnvalidatedPublishParamsBody) IsPresent() bool {
	return !param.IsOmitted(f) && !f.IsNull()
}
func (r ObservationMonoradarUnvalidatedPublishParamsBody) MarshalJSON() (data []byte, err error) {
	type shadow ObservationMonoradarUnvalidatedPublishParamsBody
	return param.MarshalObject(r, (*shadow)(&r))
}

func init() {
	apijson.RegisterFieldValidator[ObservationMonoradarUnvalidatedPublishParamsBody](
		"DataMode", false, "REAL", "TEST", "SIMULATED", "EXERCISE",
	)
}

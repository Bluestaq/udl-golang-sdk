// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	shimjson "github.com/Bluestaq/udl-golang-sdk/internal/encoding/json"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
)

// EcpSdrService contains methods and other services that help with interacting
// with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewEcpSdrService] method instead.
type EcpSdrService struct {
	Options []option.RequestOption
}

// NewEcpSdrService generates a new service that applies the given options to each
// request. These options are applied after the parent client's options (if there
// is one), and before any request-specific options.
func NewEcpSdrService(opts ...option.RequestOption) (r EcpSdrService) {
	r = EcpSdrService{}
	r.Options = opts
	return
}

// Service operation to take multiple ECPSDR as a POST body and ingest into the
// database. This operation is intended to be used for automated feeds into UDL. A
// specific role is required to perform this service operation. Please contact the
// UDL team for assistance.
func (r *EcpSdrService) UnvalidatedPublish(ctx context.Context, body EcpSdrUnvalidatedPublishParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "filedrop/udl-ecpsdr"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

type EcpSdrUnvalidatedPublishParams struct {
	Body []EcpSdrUnvalidatedPublishParamsBody
	paramObj
}

func (r EcpSdrUnvalidatedPublishParams) MarshalJSON() (data []byte, err error) {
	return shimjson.Marshal(r.Body)
}
func (r *EcpSdrUnvalidatedPublishParams) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &r.Body)
}

// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle
// (ECP) Sensors. SDR contains sensor status telemetry and raw dosimeter
// measurements of the space environment.
//
// The properties ClassificationMarking, DataMode, MsgTime, Source, Type are
// required.
type EcpSdrUnvalidatedPublishParamsBody struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,omitzero,required"`
	// Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
	// millisecond precision.
	MsgTime time.Time `json:"msgTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// The type of data associated with this record (STANDARD, TRANSIENT).
	Type string `json:"type,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// Internal 5V current monitor for analog supply line. This is sensor status
	// telemetry. See vRef for conversion factor to Volts.
	Asl5VCurrMon param.Opt[int64] `json:"asl5VCurrMon,omitzero"`
	// CDS Charge Plate voltage monitor. See vRef for conversion factor to Volts.
	CdsPlateVMon param.Opt[int64] `json:"cdsPlateVMon,omitzero"`
	// CDS reference voltage monitor. See vRef for conversion factor to Volts.
	CdsRefVMon param.Opt[int64] `json:"cdsRefVMon,omitzero"`
	// CDS Threshold setting for ESD detection threshold. The CDS Threshold is the
	// adjustable sensitivity of recording/digitizing an ESD as a transient packet.
	CdsThreshold param.Opt[int64] `json:"cdsThreshold,omitzero"`
	// CDS throttle number of seconds between CDS transient capture readouts.
	CdsThrottle param.Opt[int64] `json:"cdsThrottle,omitzero"`
	// Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
	Checksum param.Opt[int64] `json:"checksum,omitzero"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt param.Opt[time.Time] `json:"createdAt,omitzero" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy param.Opt[string] `json:"createdBy,omitzero"`
	// Unitless dosimeter detector bias for MedLET and HiLET. MedLET (Linear Energy
	// Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and
	// 1MeV, respectively.
	DosBias param.Opt[int64] `json:"dosBias,omitzero"`
	// Internal 5V current monitor for digital supply line. This is sensor status
	// telemetry. See vRef for conversion factor to Volts.
	Dsl5VCurrMon param.Opt[int64] `json:"dsl5VCurrMon,omitzero"`
	// Number of ESD triggers, high byte of 2-byte counter.
	EsdTrigCountH param.Opt[int64] `json:"esdTrigCountH,omitzero"`
	// Number of ESD triggers, low byte of 2-byte counter.
	EsdTrigCountL param.Opt[int64] `json:"esdTrigCountL,omitzero"`
	// HiLET dosimeter low range output. Low byte of scaler (HiLET) dosimeter output.
	HiLetL param.Opt[int64] `json:"hiLetL,omitzero"`
	// Unitless HiLET dosimeter medium range output. Medium byte of (HiLET) dosimeter
	// output.
	HiLetM param.Opt[int64] `json:"hiLetM,omitzero"`
	// Unique identifier of the on-orbit satellite hosting the sensor.
	IDOnOrbit param.Opt[string] `json:"idOnOrbit,omitzero"`
	// Unique identifier of the reporting sensor.
	IDSensor param.Opt[string] `json:"idSensor,omitzero"`
	// LowLET dosimeter low range output. Low byte of (LowLET) dosimeter output.
	LowLetL param.Opt[int64] `json:"lowLetL,omitzero"`
	// LowLET dosimeter medium range output. Medium byte of (LowLET) dosimeter output.
	LowLetM param.Opt[int64] `json:"lowLetM,omitzero"`
	// MedLET1 dosimeter low range output. Low byte of the 1st (MedLET) dosimeter
	// output.
	MedLet1L param.Opt[int64] `json:"medLet1L,omitzero"`
	// MedLET1 dosimeter medium range output. Medium byte of the 1st (MedLET) dosimeter
	// output.
	MedLet1M param.Opt[int64] `json:"medLet1M,omitzero"`
	// MedLET2 dosimeter low range output. Low byte of the 2nd (MedLET) dosimeter
	// output.
	MedLet2L param.Opt[int64] `json:"medLet2L,omitzero"`
	// MedLET2 dosimeter medium range output. Medium byte of the 2nd (MedLET) dosimeter
	// output.
	MedLet2M param.Opt[int64] `json:"medLet2M,omitzero"`
	// MedLET3 dosimeter low range output. Low byte of the 3rd (MedLET) dosimeter
	// output.
	MedLet3L param.Opt[int64] `json:"medLet3L,omitzero"`
	// MedLET3 dosimeter medium range output. Medium byte of the 3rd (MedLET) dosimeter
	// output.
	MedLet3M param.Opt[int64] `json:"medLet3M,omitzero"`
	// MedLET4 dosimeter low range output. Low byte of the 4th (MedLET) dosimeter
	// output.
	MedLet4L param.Opt[int64] `json:"medLet4L,omitzero"`
	// MedLET4 dosimeter medium range output. Medium byte of the 4th (MedLET) dosimeter
	// output.
	MedLet4M param.Opt[int64] `json:"medLet4M,omitzero"`
	// Unitless sensor mounting plate temperature.
	MpTemp param.Opt[int64] `json:"mpTemp,omitzero"`
	// Time of the observation, in ISO 8601 UTC format with millisecond precision.
	ObTime param.Opt[time.Time] `json:"obTime,omitzero" format:"date-time"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork param.Opt[string] `json:"origNetwork,omitzero"`
	// Optional identifier provided by the record source to indicate the satellite
	// hosting the sensor. This may be an internal identifier and not necessarily map
	// to a valid satellite number.
	OrigObjectID param.Opt[string] `json:"origObjectId,omitzero"`
	// Optional identifier provided by the record source to indicate the sensor
	// identifier which produced this data. This may be an internal identifier and not
	// necessarily a valid sensor ID.
	OrigSensorID param.Opt[string] `json:"origSensorId,omitzero"`
	// Photodiode 1 signal level.
	Pd1SigLev param.Opt[int64] `json:"pd1SigLev,omitzero"`
	// Photodiode 2 signal level.
	Pd2SigLev param.Opt[int64] `json:"pd2SigLev,omitzero"`
	// Power supply temperature monitor. This is sensor status telemetry.
	PsTempMon param.Opt[int64] `json:"psTempMon,omitzero"`
	// Flag indicating whether this record is an original or re-transmitted dataset
	// (TRUE indicates a retransmit from the host).
	Retransmit param.Opt[bool] `json:"retransmit,omitzero"`
	// Satellite/catalog number of the on-orbit satellite hosting the sensor.
	SatNo param.Opt[int64] `json:"satNo,omitzero"`
	// The sensor mode associated with this measurements (NORMAL, TEST).
	SenMode param.Opt[string] `json:"senMode,omitzero"`
	// Surface dosimeter charge rate high output (converts to pico-amps/bit). High byte
	// of 2 bytes.
	SurfDosChargeH param.Opt[int64] `json:"surfDosChargeH,omitzero"`
	// Surface dosimeter charge rate low output (converts to pico-amps/bit). Low byte
	// of 2 bytes.
	SurfDosChargeL param.Opt[int64] `json:"surfDosChargeL,omitzero"`
	// Surface dosimeter high range output (converts to pico-coulombs/bit). High byte
	// of 3 bytes.
	SurfDosH param.Opt[int64] `json:"surfDosH,omitzero"`
	// Surface dosimeter low range output (converts to pico-coulombs/bit). Low byte of
	// 3 bytes.
	SurfDosL param.Opt[int64] `json:"surfDosL,omitzero"`
	// Surface dosimeter medium range output (converts to pico-coulombs/bit). Middle
	// byte of 3 bytes.
	SurfDosM param.Opt[int64] `json:"surfDosM,omitzero"`
	// Surface dosimeter status byte.
	SurfDosStat param.Opt[int64] `json:"surfDosStat,omitzero"`
	// Reference voltage (volts/bit). Conversion factor used to convert analog V
	// monitor data from bytes to volts.
	VRef param.Opt[int64] `json:"vRef,omitzero"`
	// Array of 144 digitized samples of ESD waveform for transient packets.
	TransientData []int64 `json:"transientData,omitzero"`
	paramObj
}

func (r EcpSdrUnvalidatedPublishParamsBody) MarshalJSON() (data []byte, err error) {
	type shadow EcpSdrUnvalidatedPublishParamsBody
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *EcpSdrUnvalidatedPublishParamsBody) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func init() {
	apijson.RegisterFieldValidator[EcpSdrUnvalidatedPublishParamsBody](
		"dataMode", "REAL", "TEST", "SIMULATED", "EXERCISE",
	)
}

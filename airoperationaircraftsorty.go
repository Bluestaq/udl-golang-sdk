// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
)

// AirOperationAircraftSortyService contains methods and other services that help
// with interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAirOperationAircraftSortyService] method instead.
type AirOperationAircraftSortyService struct {
	Options []option.RequestOption
}

// NewAirOperationAircraftSortyService generates a new service that applies the
// given options to each request. These options are applied after the parent
// client's options (if there is one), and before any request-specific options.
func NewAirOperationAircraftSortyService(opts ...option.RequestOption) (r AirOperationAircraftSortyService) {
	r = AirOperationAircraftSortyService{}
	r.Options = opts
	return
}

// Service operation to take one or many aircraft sortie records as a POST body and
// ingest into the database. This operation is intended to be used for automated
// feeds into UDL. A specific role is required to perform this service operation.
// Please contact the UDL team for assistance.
func (r *AirOperationAircraftSortyService) UnvalidatedPublish(ctx context.Context, body AirOperationAircraftSortyUnvalidatedPublishParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "filedrop/udl-aircraftsortie"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

type AirOperationAircraftSortyUnvalidatedPublishParams struct {
	Body []AirOperationAircraftSortyUnvalidatedPublishParamsBody
	paramObj
}

func (r AirOperationAircraftSortyUnvalidatedPublishParams) MarshalJSON() (data []byte, err error) {
	return json.Marshal(r.Body)
}
func (r *AirOperationAircraftSortyUnvalidatedPublishParams) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &r.Body)
}

// Information related to the planning, load, status, and deployment or dispatch of
// one aircraft to carry out a mission.
//
// The properties ClassificationMarking, DataMode, PlannedDepTime, Source are
// required.
type AirOperationAircraftSortyUnvalidatedPublishParamsBody struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,omitzero,required"`
	// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601
	// UTC format with millisecond precision.
	PlannedDepTime time.Time `json:"plannedDepTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
	ActualArrTime param.Opt[time.Time] `json:"actualArrTime,omitzero" format:"date-time"`
	// The actual time the Aircraft comes to a complete stop in its parking position,
	// in ISO 8601 UTC format with millisecond precision.
	ActualBlockInTime param.Opt[time.Time] `json:"actualBlockInTime,omitzero" format:"date-time"`
	// The actual time the Aircraft begins to taxi from its parking position, in ISO
	// 8601 UTC format with millisecond precision.
	ActualBlockOutTime param.Opt[time.Time] `json:"actualBlockOutTime,omitzero" format:"date-time"`
	// The actual departure time, in ISO 8601 UTC format.
	ActualDepTime param.Opt[time.Time] `json:"actualDepTime,omitzero" format:"date-time"`
	// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
	AircraftAdsb param.Opt[string] `json:"aircraftADSB,omitzero"`
	// Alternate Aircraft Identifier provided by source.
	AircraftAltID param.Opt[string] `json:"aircraftAltId,omitzero"`
	// Aircraft event text.
	AircraftEvent param.Opt[string] `json:"aircraftEvent,omitzero"`
	// The aircraft Model Design Series designation assigned to this sortie.
	AircraftMds param.Opt[string] `json:"aircraftMDS,omitzero"`
	// Remarks concerning the aircraft.
	AircraftRemarks param.Opt[string] `json:"aircraftRemarks,omitzero"`
	// The amount of time allowed between launch order and takeoff, in seconds.
	AlertStatus param.Opt[int64] `json:"alertStatus,omitzero"`
	// The Alert Status code.
	AlertStatusCode param.Opt[string] `json:"alertStatusCode,omitzero"`
	// The Air Mobility Command (AMC) mission number of the sortie.
	AmcMsnNum param.Opt[string] `json:"amcMsnNum,omitzero"`
	// The type of mission (e.g. SAAM, CHNL, etc.).
	AmcMsnType param.Opt[string] `json:"amcMsnType,omitzero"`
	// The arrival Federal Aviation Administration (FAA) code of this sortie.
	ArrFaa param.Opt[string] `json:"arrFAA,omitzero"`
	// The arrival International Aviation Transport Association (IATA) code of this
	// sortie.
	ArrIata param.Opt[string] `json:"arrIATA,omitzero"`
	// The arrival International Civil Aviation Organization (ICAO) of this sortie.
	ArrIcao param.Opt[string] `json:"arrICAO,omitzero"`
	// The itinerary identifier of the arrival location.
	ArrItinerary param.Opt[int64] `json:"arrItinerary,omitzero"`
	// Purpose code at the arrival location of this sortie.
	ArrPurposeCode param.Opt[string] `json:"arrPurposeCode,omitzero"`
	// The call sign assigned to the aircraft on this sortie.
	CallSign param.Opt[string] `json:"callSign,omitzero"`
	// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1,
	// etc.) currently on board the aircraft. Configuration meanings are determined by
	// the data source.
	CargoConfig param.Opt[string] `json:"cargoConfig,omitzero"`
	// The last name of the aircraft commander.
	CommanderName param.Opt[string] `json:"commanderName,omitzero"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt param.Opt[time.Time] `json:"createdAt,omitzero" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy param.Opt[string] `json:"createdBy,omitzero"`
	// The current state of this sortie.
	CurrentState param.Opt[string] `json:"currentState,omitzero"`
	// The primary delay code.
	DelayCode param.Opt[string] `json:"delayCode,omitzero"`
	// The departure Federal Aviation Administration (FAA) code of this sortie.
	DepFaa param.Opt[string] `json:"depFAA,omitzero"`
	// The departure International Aviation Transport Association (IATA) code of this
	// sortie.
	DepIata param.Opt[string] `json:"depIATA,omitzero"`
	// The departure International Civil Aviation Organization (ICAO) of this sortie.
	DepIcao param.Opt[string] `json:"depICAO,omitzero"`
	// The itinerary identifier of the departure location.
	DepItinerary param.Opt[int64] `json:"depItinerary,omitzero"`
	// Purpose code at the departure location of this sortie.
	DepPurposeCode param.Opt[string] `json:"depPurposeCode,omitzero"`
	// Due home date by which the aircraft must return to its home station, in ISO 8601
	// UTC format with millisecond precision.
	Dhd param.Opt[time.Time] `json:"dhd,omitzero" format:"date-time"`
	// Reason the aircraft must return to home station by its due home date.
	DhdReason param.Opt[string] `json:"dhdReason,omitzero"`
	// The current estimated time that the Aircraft is planned to arrive, in ISO 8601
	// UTC format with millisecond precision.
	EstArrTime param.Opt[time.Time] `json:"estArrTime,omitzero" format:"date-time"`
	// The estimated time the Aircraft will come to a complete stop in its parking
	// position, in ISO 8601 UTC format with millisecond precision.
	EstBlockInTime param.Opt[time.Time] `json:"estBlockInTime,omitzero" format:"date-time"`
	// The estimated time the Aircraft will begin to taxi from its parking position, in
	// ISO 8601 UTC format with millisecond precision.
	EstBlockOutTime param.Opt[time.Time] `json:"estBlockOutTime,omitzero" format:"date-time"`
	// The current estimated time that the Aircraft is planned to depart, in ISO 8601
	// UTC format with millisecond precision.
	EstDepTime param.Opt[time.Time] `json:"estDepTime,omitzero" format:"date-time"`
	// Name of the uploaded PDF.
	Filename param.Opt[string] `json:"filename,omitzero"`
	// Size of the supporting PDF, in bytes.
	Filesize param.Opt[int64] `json:"filesize,omitzero"`
	// The planned flight time for this sortie, in minutes.
	FlightTime param.Opt[float64] `json:"flightTime,omitzero"`
	// Desk phone number of the flight manager assigned to the sortie. Null when no
	// flight manager is assigned.
	FmDeskNum param.Opt[string] `json:"fmDeskNum,omitzero"`
	// Last name of the flight manager assigned to the sortie. Null when no flight
	// manager is assigned.
	FmName param.Opt[string] `json:"fmName,omitzero"`
	// Mass of fuel required for this leg of the sortie, in kilograms.
	FuelReq param.Opt[float64] `json:"fuelReq,omitzero"`
	// Scheduled ground time, in minutes.
	GndTime param.Opt[float64] `json:"gndTime,omitzero"`
	// Unique identifier of the aircraft.
	IDAircraft param.Opt[string] `json:"idAircraft,omitzero"`
	// The unique identifier of the mission to which this sortie is assigned.
	IDMission param.Opt[string] `json:"idMission,omitzero"`
	// Joint Chiefs of Staff priority of this sortie.
	JcsPriority param.Opt[string] `json:"jcsPriority,omitzero"`
	// The leg number of this sortie.
	LegNum param.Opt[int64] `json:"legNum,omitzero"`
	// The external system line number of this sortie.
	LineNumber param.Opt[int64] `json:"lineNumber,omitzero"`
	// The mission ID according to the source system.
	MissionID param.Opt[string] `json:"missionId,omitzero"`
	// Time the associated mission data was last updated in relation to the aircraft
	// assignment, in ISO 8601 UTC format with millisecond precision. If this time is
	// coming from an external system, it may not sync with the latest mission time
	// associated to this record.
	MissionUpdate param.Opt[time.Time] `json:"missionUpdate,omitzero" format:"date-time"`
	// Remarks concerning the sortie objective.
	ObjectiveRemarks param.Opt[string] `json:"objectiveRemarks,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork param.Opt[string] `json:"origNetwork,omitzero"`
	// The sortie identifier provided by the originating source.
	OrigSortieID param.Opt[string] `json:"origSortieId,omitzero"`
	// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
	OxyOnCrew param.Opt[float64] `json:"oxyOnCrew,omitzero"`
	// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
	OxyOnPax param.Opt[float64] `json:"oxyOnPax,omitzero"`
	// Liquid oxygen required on the aircraft for the crew compartment, in liters.
	OxyReqCrew param.Opt[float64] `json:"oxyReqCrew,omitzero"`
	// Liquid oxygen required on the aircraft for the troop compartment, in liters.
	OxyReqPax param.Opt[float64] `json:"oxyReqPax,omitzero"`
	// The version number of the crew paper.
	PapersVersion param.Opt[string] `json:"papersVersion,omitzero"`
	// The POI parking location.
	ParkingLoc param.Opt[string] `json:"parkingLoc,omitzero"`
	// The number of passengers tasked for this sortie.
	Passengers param.Opt[int64] `json:"passengers,omitzero"`
	// The scheduled time that the Aircraft sortie is planned to arrive, in ISO 8601
	// UTC format with millisecond precision.
	PlannedArrTime param.Opt[time.Time] `json:"plannedArrTime,omitzero" format:"date-time"`
	// The planned primary Standard Conventional Load of the aircraft for this sortie.
	PrimaryScl param.Opt[string] `json:"primarySCL,omitzero"`
	// When crew papers are associated to this sortie, the system updates this value.
	// This field is the URI location in the document repository of that raw file. To
	// download the raw file, prepend https://udl-hostname/scs/download?id= to this
	// field's value.
	RawFileUri param.Opt[string] `json:"rawFileURI,omitzero"`
	// Aircraft configuration required for the mission.
	ReqConfig param.Opt[string] `json:"reqConfig,omitzero"`
	// Remarks concerning the results of this sortie.
	ResultRemarks param.Opt[string] `json:"resultRemarks,omitzero"`
	// Remarks concerning the schedule.
	ScheduleRemarks param.Opt[string] `json:"scheduleRemarks,omitzero"`
	// The planned secondary Standard Conventional Load of the aircraft for this
	// sortie.
	SecondaryScl param.Opt[string] `json:"secondarySCL,omitzero"`
	// Indicates the group responsible for recording the completion time of the next
	// event in the sequence of events assigned to this sortie (e.g. OPS - Operations,
	// MX - Maintenance, TR - Transportation, etc.).
	Soe param.Opt[string] `json:"soe,omitzero"`
	// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex.
	// YYYY-MM-DD).
	SortieDate param.Opt[time.Time] `json:"sortieDate,omitzero" format:"date"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl param.Opt[string] `json:"sourceDL,omitzero"`
	// The tail number of the aircraft assigned to this sortie.
	TailNumber param.Opt[string] `json:"tailNumber,omitzero"`
	// The status of the supporting document.
	//
	// Any of "PUBLISHED", "DELETED", "UPDATED", "READ".
	PaperStatus string `json:"paperStatus,omitzero"`
	// The prior permission required (PPR) status.
	//
	// Any of "NOT REQUIRED", "REQUIRED NOT REQUESTED", "GRANTED", "PENDING".
	PprStatus string `json:"pprStatus,omitzero"`
	// Type of Ravens required for this sortie (N - None, R - Raven (Security Team)
	// required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required
	// (Ground time over 6 hours)).
	//
	// Any of "N", "R", "C6", "R6".
	RvnReq string `json:"rvnReq,omitzero"`
	paramObj
}

func (r AirOperationAircraftSortyUnvalidatedPublishParamsBody) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAircraftSortyUnvalidatedPublishParamsBody
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *AirOperationAircraftSortyUnvalidatedPublishParamsBody) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func init() {
	apijson.RegisterFieldValidator[AirOperationAircraftSortyUnvalidatedPublishParamsBody](
		"dataMode", "REAL", "TEST", "SIMULATED", "EXERCISE",
	)
	apijson.RegisterFieldValidator[AirOperationAircraftSortyUnvalidatedPublishParamsBody](
		"paperStatus", "PUBLISHED", "DELETED", "UPDATED", "READ",
	)
	apijson.RegisterFieldValidator[AirOperationAircraftSortyUnvalidatedPublishParamsBody](
		"pprStatus", "NOT REQUIRED", "REQUIRED NOT REQUESTED", "GRANTED", "PENDING",
	)
	apijson.RegisterFieldValidator[AirOperationAircraftSortyUnvalidatedPublishParamsBody](
		"rvnReq", "N", "R", "C6", "R6",
	)
}

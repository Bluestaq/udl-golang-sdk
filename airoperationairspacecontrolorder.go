// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
)

// AirOperationAirspaceControlOrderService contains methods and other services that
// help with interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAirOperationAirspaceControlOrderService] method instead.
type AirOperationAirspaceControlOrderService struct {
	Options []option.RequestOption
}

// NewAirOperationAirspaceControlOrderService generates a new service that applies
// the given options to each request. These options are applied after the parent
// client's options (if there is one), and before any request-specific options.
func NewAirOperationAirspaceControlOrderService(opts ...option.RequestOption) (r AirOperationAirspaceControlOrderService) {
	r = AirOperationAirspaceControlOrderService{}
	r.Options = opts
	return
}

// Service operation to take multiple AirspaceControlOrder records as a POST body
// and ingest into the database. This operation is intended to be used for
// automated feeds into UDL. A specific role is required to perform this service
// operation. Please contact the UDL team for assistance.
func (r *AirOperationAirspaceControlOrderService) UnvalidatedPublish(ctx context.Context, body AirOperationAirspaceControlOrderUnvalidatedPublishParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "filedrop/udl-airspacecontrolorder"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

type AirOperationAirspaceControlOrderUnvalidatedPublishParams struct {
	Body []AirOperationAirspaceControlOrderUnvalidatedPublishParamsBody
	paramObj
}

func (r AirOperationAirspaceControlOrderUnvalidatedPublishParams) MarshalJSON() (data []byte, err error) {
	return json.Marshal(r.Body)
}

// Beta Version Airspace Control Order: Contains airspace coordination information
// and instructions that have been issued by an airspace control authority.
//
// The properties ClassificationMarking, DataMode, OpExName, Originator, Source,
// StartTime are required.
type AirOperationAirspaceControlOrderUnvalidatedPublishParamsBody struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode string `json:"dataMode,omitzero,required"`
	// Specifies the unique operation or exercise name, nickname, or codeword assigned
	// to a joint exercise or operation plan.
	OpExName string `json:"opExName,required"`
	// The identifier of the originator of this message.
	Originator string `json:"originator,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The start of the effective time period of this airspace control order, in ISO
	// 8601 UTC format with millisecond precision.
	StartTime time.Time `json:"startTime,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// Free text information expressed in natural language.
	AcoComments param.Opt[string] `json:"acoComments,omitzero"`
	// The serial number of this airspace control order.
	AcoSerialNum param.Opt[string] `json:"acoSerialNum,omitzero"`
	// Name of the area of the command for which the ACO is valid.
	AreaOfValidity param.Opt[string] `json:"areaOfValidity,omitzero"`
	// Markings defining the source material or the original classification authority
	// for the ACO message.
	ClassSource param.Opt[string] `json:"classSource,omitzero"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt param.Opt[time.Time] `json:"createdAt,omitzero" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy param.Opt[string] `json:"createdBy,omitzero"`
	// Specifies the geodetic datum by which the spatial coordinates of the controlled
	// airspace are calculated.
	GeoDatum param.Opt[string] `json:"geoDatum,omitzero"`
	// The month in which the message originated.
	Month param.Opt[string] `json:"month,omitzero"`
	// Supplementary name that can be used to further identify exercise nicknames, or
	// to provide the primary nickname of the option or the alternative of an
	// operational plan.
	OpExInfo param.Opt[string] `json:"opExInfo,omitzero"`
	// The secondary supplementary nickname of the option or the alternative of the
	// operational plan or order.
	OpExInfoAlt param.Opt[string] `json:"opExInfoAlt,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork param.Opt[string] `json:"origNetwork,omitzero"`
	// The official identifier of the military establishment responsible for the
	// operation plan and the identification number assigned to this plan.
	PlanOrigNum param.Opt[string] `json:"planOrigNum,omitzero"`
	// The qualifier which caveats the message status.
	Qualifier param.Opt[string] `json:"qualifier,omitzero"`
	// The serial number associated with the message qualifier.
	QualSn param.Opt[int64] `json:"qualSN,omitzero"`
	// Optional URI location in the document repository of the raw file parsed by the
	// system to produce this record. To download the raw file, prepend
	// https://udl-hostname/scs/download?id= to this value.
	RawFileUri param.Opt[string] `json:"rawFileURI,omitzero"`
	// The unique message identifier sequentially assigned by the originator.
	SerialNum param.Opt[string] `json:"serialNum,omitzero"`
	// The source data library from which this record was received. This could be a
	// remote or tactical UDL or another data library. If null, the record should be
	// assumed to have originated from the primary Enterprise UDL.
	SourceDl param.Opt[string] `json:"sourceDL,omitzero"`
	// A qualifier for the end of the effective time period of this airspace control
	// order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a
	// relative time.
	StopQualifier param.Opt[string] `json:"stopQualifier,omitzero"`
	// The end of the effective time period of this airspace control order, in ISO 8601
	// UTC format with millisecond precision.
	StopTime param.Opt[time.Time] `json:"stopTime,omitzero" format:"date-time"`
	// Mandatory nested segment to report multiple airspace control means statuses
	// within an ACOID.
	AirspaceControlMeansStatus []AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatus `json:"airspaceControlMeansStatus,omitzero"`
	// The airspaceControlReferences set provides both USMTF and non-USMTF references
	// for this airspace control order.
	AirspaceControlOrderReferences []AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlOrderReference `json:"airspaceControlOrderReferences,omitzero"`
	// Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR
	// CLASSIFICATION code.
	ClassReasons []string `json:"classReasons,omitzero"`
	// Coded entries that provide justification for exemption from automatic
	// downgrading or declassification of the airspace control order.
	DeclassExemptionCodes []string `json:"declassExemptionCodes,omitzero"`
	// Markings providing the literal guidance or date for downgrading or declassifying
	// the airspace control order.
	DowngradeInsDates []string `json:"downgradeInsDates,omitzero"`
	// Array of unique link 16 identifiers that will be assigned to a future airspace
	// control means.
	UndLnkTrks []string `json:"undLnkTrks,omitzero"`
	paramObj
}

func (r AirOperationAirspaceControlOrderUnvalidatedPublishParamsBody) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirspaceControlOrderUnvalidatedPublishParamsBody
	return param.MarshalObject(r, (*shadow)(&r))
}

func init() {
	apijson.RegisterFieldValidator[AirOperationAirspaceControlOrderUnvalidatedPublishParamsBody](
		"DataMode", false, "REAL", "TEST", "SIMULATED", "EXERCISE",
	)
}

// Mandatory nested segment to report multiple airspace control means statuses
// within an ACOID.
type AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatus struct {
	// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
	CmStat param.Opt[string] `json:"cmStat,omitzero"`
	// A conditional nested segment to report multiple airspace control means within a
	// particular airspace control means status.
	AirspaceControlMeans []AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMean `json:"airspaceControlMeans,omitzero"`
	// Airspace control means name or designator. Mandatory if acmStat equals "DELETE,"
	// otherwise this field is prohibited.
	CmStatID []string `json:"cmStatId,omitzero"`
	paramObj
}

func (r AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatus) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatus
	return param.MarshalObject(r, (*shadow)(&r))
}

// A conditional nested segment to report multiple airspace control means within a
// particular airspace control means status.
type AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMean struct {
	// A bearing measured from true North, in angular degrees. If cmShape is set to
	// "POLYARC" or "RADARC", this field is required and is mapped to the "beginning"
	// radial bearing parameter.
	Bearing0 param.Opt[float64] `json:"bearing0,omitzero"`
	// A bearing measured from true North, in angular degrees. If cmShape is set to
	// "POLYARC" or "RADARC", this field is required and is mapped to the "ending"
	// radial bearing parameter.
	Bearing1 param.Opt[float64] `json:"bearing1,omitzero"`
	// Airspace control means name or designator.
	CmID param.Opt[string] `json:"cmId,omitzero"`
	// The code for the type of airspace control means.
	CmType param.Opt[string] `json:"cmType,omitzero"`
	// The commander responsible within a specified geographical area for the airspace
	// control operation assigned to him.
	CntrlAuth param.Opt[string] `json:"cntrlAuth,omitzero"`
	// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
	// format. The fields coord0 and coord1 should be used in the specification of any
	// airspace control shape that requires exactly one (1) or two (2) reference points
	// for construction. For shapes requiring one reference point, for instance, when
	// cmShape is set to "APOINT", this field is required and singularly defines the
	// shape. Similarly, this field is required to define the center point of a
	// "CIRCLE" shape, or the "origin of bearing" for arcs.
	Coord0 param.Opt[string] `json:"coord0,omitzero"`
	// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
	// format. The fields coord0 and coord1 should be used in the specification of any
	// airspace control shape that requires exactly one (1) or two (2) reference points
	// for construction. For shapes requiring one reference point, for instance, when
	// cmShape is set to "APOINT", this field is required and singularly defines the
	// shape. Similarly, this field is required to define the center point of a
	// "CIRCLE" shape, or the "origin of bearing" for arcs.
	Coord1 param.Opt[string] `json:"coord1,omitzero"`
	// Description of the airspace vertical dimension.
	EffVDim param.Opt[string] `json:"effVDim,omitzero"`
	// General informat detailing the transit instruction for the airspace control
	// means.
	FreeText param.Opt[string] `json:"freeText,omitzero"`
	// Used to provide transit instructions for the airspace control means.
	GenTextInd param.Opt[string] `json:"genTextInd,omitzero"`
	// Specifies the geodetic datum by which the spatial coordinates of the controlled
	// airspace are calculated, if different from the top level ACO datum.
	GeoDatumAlt param.Opt[string] `json:"geoDatumAlt,omitzero"`
	// Unique Link 16 identifier assigned to the airspace control means.
	Link16ID param.Opt[string] `json:"link16Id,omitzero"`
	// Orbit alignment look-up code. Can be C=Center, L=Left, R=Right.
	OrbitAlignment param.Opt[string] `json:"orbitAlignment,omitzero"`
	// A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or
	// "POLYARC", one of either fields radMag0 or radMag1 is required. If cmShape is
	// set to "RADARC", this field is required and maps to the "inner" radial magnitude
	// arc limit. If provided, the field radMagUnit is required.
	RadMag0 param.Opt[float64] `json:"radMag0,omitzero"`
	// A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or
	// "POLYARC", one of either fields radMag0 or radMag1 is required. If cmShape is
	// set to "RADARC", this field is required and maps to the "outer" radial magnitude
	// arc limit. If provided, the field radMagUnit is required.
	RadMag1 param.Opt[float64] `json:"radMag1,omitzero"`
	// Specifies the unit of length in which radial magnitudes are given. Use M for
	// meters, KM for kilometers, or NM for nautical miles.
	RadMagUnit param.Opt[string] `json:"radMagUnit,omitzero"`
	// Index of a segment in an airtrack, which is defined by an ordered set of points.
	TrackLeg param.Opt[int64] `json:"trackLeg,omitzero"`
	// The altitude at or below which the vertical position of an aircraft is
	// controlled by reference to true altitude.
	TransAltitude param.Opt[string] `json:"transAltitude,omitzero"`
	// Designates the means by which a defined airspace control means is to be used.
	Usage param.Opt[string] `json:"usage,omitzero"`
	// Used to describe the "side to side" distance of a target, object or area. If
	// cmShape is set to "CORRIDOR" or "AORBIT", this field is required and is mapped
	// to the width parameter. If provided, the field widthUnit is required.
	Width param.Opt[float64] `json:"width,omitzero"`
	// Given an ordered pair of spatial coordinates (p0, p1), defines a distance
	// extending into the LEFT half-plane relative to the direction of the vector that
	// maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define
	// the width of the airspace track as measured from the left of the track segment
	// line. If provided, the field widthUnit is required.
	WidthLeft param.Opt[float64] `json:"widthLeft,omitzero"`
	// Given an ordered pair of spatial coordinates (p0, p1), defines a distance
	// extending into the RIGHT half-plane relative to the direction of the vector that
	// maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define
	// the width of the airspace track as measured from the right of the track segment
	// line. If provided, the field widthUnit is required.
	WidthRight param.Opt[float64] `json:"widthRight,omitzero"`
	// Specifies the unit of length for which widths are given. Use M for meters, KM
	// for kilometers, or NM for nautical miles.
	WidthUnit param.Opt[string] `json:"widthUnit,omitzero"`
	// The controlPoint set describes any reference/controlling/rendezvous point for a
	// given airspace control means.
	AirspaceControlPoint []AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint `json:"airspaceControlPoint,omitzero"`
	// The timePeriods set describes the effective datetime for a given airspace
	// control means.
	AirspaceTimePeriod []AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod `json:"airspaceTimePeriod,omitzero"`
	// Designates the geometric type that defines the airspace shape. One of CIRCLE,
	// CORRIDOR, LINE, ORBIT, etc.
	//
	// Any of "POLYARC", "1TRACK", "POLYGON", "CIRCLE", "CORRIDOR", "APOINT", "AORBIT",
	// "GEOLINE".
	CmShape string `json:"cmShape,omitzero"`
	// The frequency for the airspace control authority. Can specify HZ, KHZ, MHZ, GHZ
	// or a DESIG frequency designator code.
	CntrlAuthFreqs []string `json:"cntrlAuthFreqs,omitzero"`
	// An array of at least two alphanumeric symbols used to serially identify the
	// corridor waypoints. If cmShape is set to "CORRIDOR", one of either corrWayPoints
	// or polyCoord is required to specify the centerline of the corridor path.
	CorrWayPoints []string `json:"corrWayPoints,omitzero"`
	// A set of geospatial coordinates specified in DMS (Degrees, Minutes, Seconds)
	// format which determine the vertices of a one or two dimensional geospatial
	// shape. When cmShape is set to "POLYARC" or "POLYGON", this field is required as
	// applied in the construction of the area boundary. If cmShape is set to
	// "CORRIDOR" or "GEOLINE", this field is required and can be interpreted as an
	// ordered set of points along a path in space.
	PolyCoord []string `json:"polyCoord,omitzero"`
	paramObj
}

func (r AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMean) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMean
	return param.MarshalObject(r, (*shadow)(&r))
}

func init() {
	apijson.RegisterFieldValidator[AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMean](
		"CmShape", false, "POLYARC", "1TRACK", "POLYGON", "CIRCLE", "CORRIDOR", "APOINT", "AORBIT", "GEOLINE",
	)
}

// The controlPoint set describes any reference/controlling/rendezvous point for a
// given airspace control means.
type AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint struct {
	// The altitude of the control point.
	CtrlPtAltitude param.Opt[string] `json:"ctrlPtAltitude,omitzero"`
	// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
	// format that represents the location of the control point.
	CtrlPtLocation param.Opt[string] `json:"ctrlPtLocation,omitzero"`
	// The name applied to the control point, used as a reference.
	CtrlPtName param.Opt[string] `json:"ctrlPtName,omitzero"`
	// One of possible control point type codes, such as CP, ER, OT, etc.
	CtrlPtType param.Opt[string] `json:"ctrlPtType,omitzero"`
	paramObj
}

func (r AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMeanAirspaceControlPoint
	return param.MarshalObject(r, (*shadow)(&r))
}

// The timePeriods set describes the effective datetime for a given airspace
// control means.
type AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod struct {
	// The end time designating that the airspace control order is no longer active.
	// Can contain datetime information or a stop time qualifier code, such as AFTER,
	// NET, UFN, etc.
	TimeEnd param.Opt[string] `json:"timeEnd,omitzero"`
	// The airspace time code associated with the ACO. Can be DISCRETE, a fixed time
	// block, or INTERVAL, a repeating time block.
	TimeMode param.Opt[string] `json:"timeMode,omitzero"`
	// The start time designating that the airspace control order is active.
	TimeStart param.Opt[string] `json:"timeStart,omitzero"`
	// Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval
	// frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a
	// datetime like string.
	IntDur []string `json:"intDur,omitzero"`
	// Mandatory if timeMode is INTERVAL. Can be one of the interval frequency codes,
	// such as BIWEEKLY, DAILY, YEARLY, etc.
	IntFreq []string `json:"intFreq,omitzero"`
	paramObj
}

func (r AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlMeansStatusAirspaceControlMeanAirspaceTimePeriod
	return param.MarshalObject(r, (*shadow)(&r))
}

// The airspaceControlReferences set provides both USMTF and non-USMTF references
// for this airspace control order.
type AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlOrderReference struct {
	// The originator of this reference.
	RefOriginator param.Opt[string] `json:"refOriginator,omitzero"`
	// The reference serial number.
	RefSerialNum param.Opt[string] `json:"refSerialNum,omitzero"`
	// Specifies an alphabetic serial number identifying a reference pertaining to this
	// message.
	RefSID param.Opt[string] `json:"refSId,omitzero"`
	// Indicates any special actions, restrictions, guidance, or information relating
	// to this reference.
	RefSpecialNotation param.Opt[string] `json:"refSpecialNotation,omitzero"`
	// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond
	// precision.
	RefTs param.Opt[time.Time] `json:"refTs,omitzero" format:"date-time"`
	// Specifies the type for this reference.
	RefType param.Opt[string] `json:"refType,omitzero"`
	// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document
	// being referenced.
	RefSiCs []string `json:"refSICs,omitzero"`
	paramObj
}

func (r AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlOrderReference) MarshalJSON() (data []byte, err error) {
	type shadow AirOperationAirspaceControlOrderUnvalidatedPublishParamsBodyAirspaceControlOrderReference
	return param.MarshalObject(r, (*shadow)(&r))
}

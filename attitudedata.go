// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apiquery"
	"github.com/stainless-sdks/unifieddatalibrary-go/internal/requestconfig"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/param"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/resp"
)

// AttitudeDataService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAttitudeDataService] method instead.
type AttitudeDataService struct {
	Options []option.RequestOption
}

// NewAttitudeDataService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewAttitudeDataService(opts ...option.RequestOption) (r AttitudeDataService) {
	r = AttitudeDataService{}
	r.Options = opts
	return
}

// Service operation to provide detailed information on available dynamic query
// parameters for a particular data type.
func (r *AttitudeDataService) QueryHelp(ctx context.Context, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "udl/attitudedata/queryhelp"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, nil, nil, opts...)
	return
}

// Service operation to dynamically query data and only return specified
// columns/fields. Requested columns are specified by the 'columns' query parameter
// and should be a comma separated list of valid fields for the specified data
// type. classificationMarking is always returned. See the queryhelp operation
// (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
// information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
// hours would return the satNo and period of elsets with an epoch greater than 5
// hours ago.
func (r *AttitudeDataService) Tuple(ctx context.Context, query AttitudeDataTupleParams, opts ...option.RequestOption) (res *[]AttitudedataFull, err error) {
	opts = append(r.Options[:], opts...)
	path := "udl/attitudedata/tuple"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// These services provide operations for posting and querying attitude of on-orbit
// objects. Attitude describes the orientation of an object, which can be
// represented by quaternions or euler angles. The AttitudeSet ID (asId) identifies
// the 'AttitudeSet' record which contains details of the underlying data as well
// as a collection of attitude points. Points must be retrieved by first
// identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID
// 'asId'.
type AttitudedataFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode AttitudedataFullDataMode `json:"dataMode,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// Time associated with this attitude record, in ISO 8601 UTC format, with
	// microsecond precision.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// Unique identifier of the parent AttitudeSet associated with this record.
	AsID string `json:"asId"`
	// Coning angle in degrees.
	ConingAngle float64 `json:"coningAngle"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Precession axis declination (ECI J2000 frame) in degrees.
	Declination float64 `json:"declination"`
	// Unique identifier of the on-orbit satellite to which this attitude record
	// applies.
	IDOnOrbit string `json:"idOnOrbit"`
	// Label specifying type of rotational motion of target.
	MotionType string `json:"motionType"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Optional identifier provided by the record source to indicate the target object
	// of this attitude record. This may be an internal identifier and not necessarily
	// map to a valid satellite number.
	OrigObjectID string `json:"origObjectId"`
	// Precession period in seconds.
	PrecPeriod float64 `json:"precPeriod"`
	// Quaternion vector component 1.
	Q1 float64 `json:"q1"`
	// Derivative of quaternion vector component 1.
	Q1Dot float64 `json:"q1Dot"`
	// Quaternion vector component 2.
	Q2 float64 `json:"q2"`
	// Derivative of quaternion vector component 2.
	Q2Dot float64 `json:"q2Dot"`
	// Quaternion vector component 3.
	Q3 float64 `json:"q3"`
	// Derivative of quaternion vector component 3.
	Q3Dot float64 `json:"q3Dot"`
	// Quaternion scalar component.
	Qc float64 `json:"qc"`
	// Derivative of quaternion scalar component.
	QcDot float64 `json:"qcDot"`
	// Precession axis right ascension (ECI J2000 frame) in degrees.
	Ra float64 `json:"ra"`
	// Satellite/catalog number of the on-orbit object to which this attitude record
	// applies.
	SatNo int64 `json:"satNo"`
	// Spin period in seconds.
	SpinPeriod float64 `json:"spinPeriod"`
	// Array of X body rotation Euler angle(s), in degrees (-180 to 180). For repeated
	// axis rotations, the array elements should be placed in the order that the angles
	// apply in the sequence.
	XAngle []float64 `json:"xAngle"`
	// Array of X body rotation rate(s), in degrees per second. For repeated axis
	// rotations, the array elements should be placed in the order that the rates apply
	// in the sequence. Attitude rates are expressed in frame1 with respect to frame2.
	XRate []float64 `json:"xRate"`
	// Array of Y body rotation Euler angle(s), in degrees (-180 to 180). For repeated
	// axis rotations, the array elements should be placed in the order that the angles
	// apply in the sequence.
	YAngle []float64 `json:"yAngle"`
	// Array of Y body rotation rate(s), in degrees per second. For repeated axis
	// rotations, the array elements should be placed in the order that the rates apply
	// in the sequence. Attitude rates are expressed in frame1 with respect to frame2.
	YRate []float64 `json:"yRate"`
	// Array of Z body rotation Euler angle(s), in degrees (-180 to 180). For repeated
	// axis rotations, the array elements should be placed in the order that the angles
	// apply in the sequence.
	ZAngle []float64 `json:"zAngle"`
	// Array of Z body rotation rate(s), in degrees per second. For repeated axis
	// rotations, the array elements should be placed in the order that the rates apply
	// in the sequence Attitude rates are expressed in frame1 with respect to frame2.
	ZRate []float64 `json:"zRate"`
	// JSON contains metadata for fields, check presence with [resp.Field.Valid].
	JSON struct {
		ClassificationMarking resp.Field
		DataMode              resp.Field
		Source                resp.Field
		Ts                    resp.Field
		ID                    resp.Field
		AsID                  resp.Field
		ConingAngle           resp.Field
		CreatedAt             resp.Field
		CreatedBy             resp.Field
		Declination           resp.Field
		IDOnOrbit             resp.Field
		MotionType            resp.Field
		Origin                resp.Field
		OrigNetwork           resp.Field
		OrigObjectID          resp.Field
		PrecPeriod            resp.Field
		Q1                    resp.Field
		Q1Dot                 resp.Field
		Q2                    resp.Field
		Q2Dot                 resp.Field
		Q3                    resp.Field
		Q3Dot                 resp.Field
		Qc                    resp.Field
		QcDot                 resp.Field
		Ra                    resp.Field
		SatNo                 resp.Field
		SpinPeriod            resp.Field
		XAngle                resp.Field
		XRate                 resp.Field
		YAngle                resp.Field
		YRate                 resp.Field
		ZAngle                resp.Field
		ZRate                 resp.Field
		ExtraFields           map[string]resp.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AttitudedataFull) RawJSON() string { return r.JSON.raw }
func (r *AttitudedataFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type AttitudedataFullDataMode string

const (
	AttitudedataFullDataModeReal      AttitudedataFullDataMode = "REAL"
	AttitudedataFullDataModeTest      AttitudedataFullDataMode = "TEST"
	AttitudedataFullDataModeSimulated AttitudedataFullDataMode = "SIMULATED"
	AttitudedataFullDataModeExercise  AttitudedataFullDataMode = "EXERCISE"
)

type AttitudeDataTupleParams struct {
	// Unique identifier of the parent AttitudeSet associated with this record. (uuid)
	AsID string `query:"asId,required" json:"-"`
	// Comma-separated list of valid field names for this data type to be returned in
	// the response. Only the fields specified will be returned as well as the
	// classification marking of the data, if applicable. See the ‘queryhelp’ operation
	// for a complete list of possible fields.
	Columns     string           `query:"columns,required" json:"-"`
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [AttitudeDataTupleParams]'s query parameters as
// `url.Values`.
func (r AttitudeDataTupleParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
)

// LinkstatusService contains methods and other services that help with interacting
// with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewLinkstatusService] method instead.
type LinkstatusService struct {
	Options []option.RequestOption
}

// NewLinkstatusService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewLinkstatusService(opts ...option.RequestOption) (r LinkstatusService) {
	r = LinkstatusService{}
	r.Options = opts
	return
}

// Service operation to update a single LinkStatus. A specific role is required to
// perform this service operation. Please contact the UDL team for assistance.
func (r *LinkstatusService) Update(ctx context.Context, id string, body LinkstatusUpdateParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("udl/linkstatus/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPut, path, body, nil, opts...)
	return
}

// Service operation to delete a LinkStatus object specified by the passed ID path
// parameter. A specific role is required to perform this service operation. Please
// contact the UDL team for assistance.
func (r *LinkstatusService) Delete(ctx context.Context, id string, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	if id == "" {
		err = errors.New("missing required id parameter")
		return
	}
	path := fmt.Sprintf("udl/linkstatus/%s", id)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodDelete, path, nil, nil, opts...)
	return
}

type LinkstatusUpdateParams struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode LinkstatusUpdateParamsDataMode `json:"dataMode,omitzero,required"`
	// Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative
	// values south of equator).
	EndPoint1Lat float64 `json:"endPoint1Lat,required"`
	// Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	EndPoint1Lon float64 `json:"endPoint1Lon,required"`
	// The name or description of link endpoint-1, corresponding to beam-1.
	EndPoint1Name string `json:"endPoint1Name,required"`
	// Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative
	// values south of equator).
	EndPoint2Lat float64 `json:"endPoint2Lat,required"`
	// Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	EndPoint2Lon float64 `json:"endPoint2Lon,required"`
	// The name or description of link endpoint-2, corresponding to beam-2.
	EndPoint2Name string `json:"endPoint2Name,required"`
	// The name or description of the link.
	LinkName string `json:"linkName,required"`
	// The link establishment time, or the time that the link becomes available for
	// use, in ISO8601 UTC format.
	LinkStartTime time.Time `json:"linkStartTime,required" format:"date-time"`
	// The link termination time, or the time that the link becomes unavailable for
	// use, in ISO8601 UTC format.
	LinkStopTime time.Time `json:"linkStopTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID param.Opt[string] `json:"id,omitzero"`
	// The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
	Band param.Opt[string] `json:"band,omitzero"`
	// The constellation name if the link is established over a LEO/MEO constellation.
	// In this case, idOnOrbit1 and idOnOrbit2 will be null.
	Constellation param.Opt[string] `json:"constellation,omitzero"`
	// The endpoint-1 to endpoint-2 data rate, in kbps.
	DataRate1To2 param.Opt[float64] `json:"dataRate1To2,omitzero"`
	// The endpoint-2 to endpoint-1 data rate, in kbps.
	DataRate2To1 param.Opt[float64] `json:"dataRate2To1,omitzero"`
	// The ID of beam-1 forming the link. In the case of two sat link, beam-1
	// corresponds to Sat-1.
	IDBeam1 param.Opt[string] `json:"idBeam1,omitzero"`
	// The ID of beam-2 forming the link. In the case of two sat link, beam-2
	// corresponds to Sat-2.
	IDBeam2 param.Opt[string] `json:"idBeam2,omitzero"`
	// The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
	LinkState param.Opt[string] `json:"linkState,omitzero"`
	// The type of the link.
	LinkType param.Opt[string] `json:"linkType,omitzero"`
	// The OPSCAP mission status of the system(s) forming the link.
	OpsCap param.Opt[string] `json:"opsCap,omitzero"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin param.Opt[string] `json:"origin,omitzero"`
	// Satellite/catalog number of the target on-orbit primary object.
	SatNo1 param.Opt[int64] `json:"satNo1,omitzero"`
	// Satellite/catalog number of the target on-orbit secondary object.
	SatNo2 param.Opt[int64] `json:"satNo2,omitzero"`
	// The SYSCAP mission status of the system(s) forming the link.
	SysCap param.Opt[string] `json:"sysCap,omitzero"`
	paramObj
}

func (r LinkstatusUpdateParams) MarshalJSON() (data []byte, err error) {
	type shadow LinkstatusUpdateParams
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *LinkstatusUpdateParams) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type LinkstatusUpdateParamsDataMode string

const (
	LinkstatusUpdateParamsDataModeReal      LinkstatusUpdateParamsDataMode = "REAL"
	LinkstatusUpdateParamsDataModeTest      LinkstatusUpdateParamsDataMode = "TEST"
	LinkstatusUpdateParamsDataModeSimulated LinkstatusUpdateParamsDataMode = "SIMULATED"
	LinkstatusUpdateParamsDataModeExercise  LinkstatusUpdateParamsDataMode = "EXERCISE"
)

// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/Bluestaq/udl-golang-sdk/internal/apijson"
	"github.com/Bluestaq/udl-golang-sdk/internal/apiquery"
	"github.com/Bluestaq/udl-golang-sdk/internal/requestconfig"
	"github.com/Bluestaq/udl-golang-sdk/option"
	"github.com/Bluestaq/udl-golang-sdk/packages/param"
	"github.com/Bluestaq/udl-golang-sdk/packages/respjson"
)

// MissionAssignmentHistoryService contains methods and other services that help
// with interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewMissionAssignmentHistoryService] method instead.
type MissionAssignmentHistoryService struct {
	Options []option.RequestOption
}

// NewMissionAssignmentHistoryService generates a new service that applies the
// given options to each request. These options are applied after the parent
// client's options (if there is one), and before any request-specific options.
func NewMissionAssignmentHistoryService(opts ...option.RequestOption) (r MissionAssignmentHistoryService) {
	r = MissionAssignmentHistoryService{}
	r.Options = opts
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation, then write that data to the
// Secure Content Store. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *MissionAssignmentHistoryService) Aodr(ctx context.Context, query MissionAssignmentHistoryAodrParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "udl/missionassignment/history/aodr"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, nil, opts...)
	return
}

// Service operation to return the count of records satisfying the specified query
// parameters. This operation is useful to determine how many records pass a
// particular query criteria without retrieving large amounts of data. See the
// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
// valid/required query parameter information.
func (r *MissionAssignmentHistoryService) Count(ctx context.Context, query MissionAssignmentHistoryCountParams, opts ...option.RequestOption) (res *string, err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "text/plain")}, opts...)
	path := "udl/missionassignment/history/count"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Service operation to dynamically query historical data by a variety of query
// parameters not specified in this API documentation. See the queryhelp operation
// (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
// parameter information.
func (r *MissionAssignmentHistoryService) Query(ctx context.Context, query MissionAssignmentHistoryQueryParams, opts ...option.RequestOption) (res *[]MissionAssignmentHistoryQueryResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "udl/missionassignment/history"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &res, opts...)
	return
}

// Platform mission assignment data.
type MissionAssignmentHistoryQueryResponse struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode MissionAssignmentHistoryQueryResponseDataMode `json:"dataMode,required"`
	// The mission assignment discrete value.
	Mad string `json:"mad,required"`
	// Source of the data.
	Source string `json:"source,required"`
	// The timestamp of the mission data, in ISO 8601 UTC format.
	Ts time.Time `json:"ts,required" format:"date-time"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// TARGET POSITION CONTINUATION WORD - number of associated dmpis.
	C1associateddmpis int64 `json:"c1associateddmpis"`
	// TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
	C2air string `json:"c2air"`
	// TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
	C2alt int64 `json:"c2alt"`
	// TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
	C2crs int64 `json:"c2crs"`
	// TARGET DATA CONTINUATION WORD - exercise indicator.
	C2exerciseindicator string `json:"c2exerciseindicator"`
	// TARGET DATA CONTINUATION WORD - method of fire.
	C2exercisemof string `json:"c2exercisemof"`
	// TARGET DATA CONTINUATION WORD - identity.
	C2id string `json:"c2id"`
	// TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
	C2idamplifyingdescriptor string `json:"c2idamplifyingdescriptor"`
	// TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
	C2lnd string `json:"c2lnd"`
	// TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
	C2spc string `json:"c2spc"`
	// TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
	C2spd int64 `json:"c2spd"`
	// TARGET DATA CONTINUATION WORD - special interest indicator.
	C2specialinterestindicator string `json:"c2specialinterestindicator"`
	// TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
	C2sur string `json:"c2sur"`
	// POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
	C3elv float64 `json:"c3elv"`
	// POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
	C3lat float64 `json:"c3lat"`
	// POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
	C3lon float64 `json:"c3lon"`
	// TARGET DATA CONTINUATION WORD - point type 1.
	C3ptl string `json:"c3ptl"`
	// TARGET DATA CONTINUATION WORD - point number.
	C3ptnum string `json:"c3ptnum"`
	// SURFACE ATTACK CONTINUATION WORD - minute.
	C4colon int64 `json:"c4colon"`
	// SURFACE ATTACK CONTINUATION WORD - target defenses.
	C4def string `json:"c4def"`
	// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
	C4egress int64 `json:"c4egress"`
	// SURFACE ATTACK CONTINUATION WORD - mode of delivery.
	C4mod int64 `json:"c4mod"`
	// SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
	C4numberofstores int64 `json:"c4numberofstores"`
	// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
	C4runin int64 `json:"c4runin"`
	// SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
	C4tgt string `json:"c4tgt"`
	// SURFACE ATTACK CONTINUATION WORD - time discrete.
	C4timediscrete string `json:"c4timediscrete"`
	// SURFACE ATTACK CONTINUATION WORD - hour.
	C4tm int64 `json:"c4tm"`
	// SURFACE ATTACK CONTINUATION WORD - type of stores.
	C4typeofstores int64 `json:"c4typeofstores"`
	// SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
	C5colon int64 `json:"c5colon"`
	// CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
	C5elevationlsbs int64 `json:"c5elevationlsbs"`
	// CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
	C5haeadj int64 `json:"c5haeadj"`
	// CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
	C5latlsb int64 `json:"c5latlsb"`
	// CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
	C5lonlsb int64 `json:"c5lonlsb"`
	// CONTINUATION WORD - target bearing.
	C5tgtbrng int64 `json:"c5tgtbrng"`
	// CONTINUATION WORD - time window.
	C5tw int64 `json:"c5tw"`
	// TARGETING CONTINUATION WORD - designator/seeker pulse code.
	C6dspc string `json:"c6dspc"`
	// TARGETING CONTINUATION WORD - designator/seeker pulse code type.
	C6dspct string `json:"c6dspct"`
	// TARGETING CONTINUATION WORD - first pulse/last pulse mode.
	C6fplpm string `json:"c6fplpm"`
	// TARGETING CONTINUATION WORD - index number, related, 0=NS.
	C6intel int64 `json:"c6intel"`
	// TARGETING CONTINUATION WORD - laser illuminator code.
	C6laser int64 `json:"c6laser"`
	// TARGETING CONTINUATION WORD - long pulse mode.
	C6longpm string `json:"c6longpm"`
	// TARGETING CONTINUATION WORD - track number, related to 3.
	C6tnr3 int64 `json:"c6tnr3"`
	// THIRD PARTY CONTINUATION WORD - elevation angle, 2.
	C7elang2 float64 `json:"c7elang2"`
	// THIRD PARTY CONTINUATION WORD - index number, third party.
	C7in3p int64 `json:"c7in3p"`
	// THIRD PARTY CONTINUATION WORD - track number, index originator.
	C7tnor string `json:"c7tnor"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// Environment.
	Env string `json:"env"`
	// Index number.
	Index int64 `json:"index"`
	// WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of
	// equator).
	Lat float64 `json:"lat"`
	// WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime
	// Meridian).
	Lon float64 `json:"lon"`
	// Origin of index number.
	Orginx string `json:"orginx"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Receipt/Compliance, values from TABLE B-9.
	Rc string `json:"rc"`
	// Recurrence rate, receipt/compliance.
	Rr int64 `json:"rr"`
	// Strength.
	Sz string `json:"sz"`
	// Track number objective.
	Tno string `json:"tno"`
	// The track ID that the status is referencing, addressee.
	TrkID string `json:"trkId"`
	// Threat warning environment.
	Twenv string `json:"twenv"`
	// Time the row was updated in the database, auto-populated by the system.
	UpdatedAt time.Time `json:"updatedAt" format:"date-time"`
	// Application user who updated the row in the database, auto-populated by the
	// system.
	UpdatedBy string `json:"updatedBy"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ClassificationMarking      respjson.Field
		DataMode                   respjson.Field
		Mad                        respjson.Field
		Source                     respjson.Field
		Ts                         respjson.Field
		ID                         respjson.Field
		C1associateddmpis          respjson.Field
		C2air                      respjson.Field
		C2alt                      respjson.Field
		C2crs                      respjson.Field
		C2exerciseindicator        respjson.Field
		C2exercisemof              respjson.Field
		C2id                       respjson.Field
		C2idamplifyingdescriptor   respjson.Field
		C2lnd                      respjson.Field
		C2spc                      respjson.Field
		C2spd                      respjson.Field
		C2specialinterestindicator respjson.Field
		C2sur                      respjson.Field
		C3elv                      respjson.Field
		C3lat                      respjson.Field
		C3lon                      respjson.Field
		C3ptl                      respjson.Field
		C3ptnum                    respjson.Field
		C4colon                    respjson.Field
		C4def                      respjson.Field
		C4egress                   respjson.Field
		C4mod                      respjson.Field
		C4numberofstores           respjson.Field
		C4runin                    respjson.Field
		C4tgt                      respjson.Field
		C4timediscrete             respjson.Field
		C4tm                       respjson.Field
		C4typeofstores             respjson.Field
		C5colon                    respjson.Field
		C5elevationlsbs            respjson.Field
		C5haeadj                   respjson.Field
		C5latlsb                   respjson.Field
		C5lonlsb                   respjson.Field
		C5tgtbrng                  respjson.Field
		C5tw                       respjson.Field
		C6dspc                     respjson.Field
		C6dspct                    respjson.Field
		C6fplpm                    respjson.Field
		C6intel                    respjson.Field
		C6laser                    respjson.Field
		C6longpm                   respjson.Field
		C6tnr3                     respjson.Field
		C7elang2                   respjson.Field
		C7in3p                     respjson.Field
		C7tnor                     respjson.Field
		CreatedAt                  respjson.Field
		CreatedBy                  respjson.Field
		Env                        respjson.Field
		Index                      respjson.Field
		Lat                        respjson.Field
		Lon                        respjson.Field
		Orginx                     respjson.Field
		Origin                     respjson.Field
		OrigNetwork                respjson.Field
		Rc                         respjson.Field
		Rr                         respjson.Field
		Sz                         respjson.Field
		Tno                        respjson.Field
		TrkID                      respjson.Field
		Twenv                      respjson.Field
		UpdatedAt                  respjson.Field
		UpdatedBy                  respjson.Field
		ExtraFields                map[string]respjson.Field
		raw                        string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r MissionAssignmentHistoryQueryResponse) RawJSON() string { return r.JSON.raw }
func (r *MissionAssignmentHistoryQueryResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type MissionAssignmentHistoryQueryResponseDataMode string

const (
	MissionAssignmentHistoryQueryResponseDataModeReal      MissionAssignmentHistoryQueryResponseDataMode = "REAL"
	MissionAssignmentHistoryQueryResponseDataModeTest      MissionAssignmentHistoryQueryResponseDataMode = "TEST"
	MissionAssignmentHistoryQueryResponseDataModeSimulated MissionAssignmentHistoryQueryResponseDataMode = "SIMULATED"
	MissionAssignmentHistoryQueryResponseDataModeExercise  MissionAssignmentHistoryQueryResponseDataMode = "EXERCISE"
)

type MissionAssignmentHistoryAodrParams struct {
	// the timestamp of the mission data, in ISO 8601 UTC format.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	Ts time.Time `query:"ts,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	// optional, notification method for the created file link. When omitted, EMAIL is
	// assumed. Current valid values are: EMAIL, SMS.
	Notification param.Opt[string] `query:"notification,omitzero" json:"-"`
	// optional, field delimiter when the created file is not JSON. Must be a single
	// character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
	// It is strongly encouraged that your field delimiter be a character unlikely to
	// occur within the data.
	OutputDelimiter param.Opt[string] `query:"outputDelimiter,omitzero" json:"-"`
	// optional, output format for the file. When omitted, JSON is assumed. Current
	// valid values are: JSON and CSV.
	OutputFormat param.Opt[string] `query:"outputFormat,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [MissionAssignmentHistoryAodrParams]'s query parameters as
// `url.Values`.
func (r MissionAssignmentHistoryAodrParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type MissionAssignmentHistoryCountParams struct {
	// the timestamp of the mission data, in ISO 8601 UTC format.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	Ts          time.Time        `query:"ts,required" format:"date-time" json:"-"`
	FirstResult param.Opt[int64] `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64] `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [MissionAssignmentHistoryCountParams]'s query parameters as
// `url.Values`.
func (r MissionAssignmentHistoryCountParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type MissionAssignmentHistoryQueryParams struct {
	// the timestamp of the mission data, in ISO 8601 UTC format.
	// (YYYY-MM-DDTHH:MM:SS.ssssssZ)
	Ts time.Time `query:"ts,required" format:"date-time" json:"-"`
	// optional, fields for retrieval. When omitted, ALL fields are assumed. See the
	// queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
	// query fields that can be selected.
	Columns     param.Opt[string] `query:"columns,omitzero" json:"-"`
	FirstResult param.Opt[int64]  `query:"firstResult,omitzero" json:"-"`
	MaxResults  param.Opt[int64]  `query:"maxResults,omitzero" json:"-"`
	paramObj
}

// URLQuery serializes [MissionAssignmentHistoryQueryParams]'s query parameters as
// `url.Values`.
func (r MissionAssignmentHistoryQueryParams) URLQuery() (v url.Values, err error) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package unifieddatalibrary

import (
	"time"

	"github.com/stainless-sdks/unifieddatalibrary-go/internal/apijson"
	"github.com/stainless-sdks/unifieddatalibrary-go/option"
	"github.com/stainless-sdks/unifieddatalibrary-go/packages/resp"
)

// UdlLinkstatusHistoryService contains methods and other services that help with
// interacting with the unifieddatalibrary API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewUdlLinkstatusHistoryService] method instead.
type UdlLinkstatusHistoryService struct {
	Options []option.RequestOption
}

// NewUdlLinkstatusHistoryService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewUdlLinkstatusHistoryService(opts ...option.RequestOption) (r UdlLinkstatusHistoryService) {
	r = UdlLinkstatusHistoryService{}
	r.Options = opts
	return
}

// Captures link status.
type LinkStatusFull struct {
	// Classification marking of the data in IC/CAPCO Portion-marked format.
	ClassificationMarking string `json:"classificationMarking,required"`
	// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
	//
	// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
	// may include both real and simulated data.
	//
	// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
	// events, and analysis.
	//
	// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
	// datasets.
	//
	// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
	// requirements, and for validating technical, functional, and performance
	// characteristics.
	//
	// Any of "REAL", "TEST", "SIMULATED", "EXERCISE".
	DataMode LinkStatusFullDataMode `json:"dataMode,required"`
	// Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative
	// values south of equator).
	EndPoint1Lat float64 `json:"endPoint1Lat,required"`
	// Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	EndPoint1Lon float64 `json:"endPoint1Lon,required"`
	// The name or description of link endpoint-1, corresponding to beam-1.
	EndPoint1Name string `json:"endPoint1Name,required"`
	// Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative
	// values south of equator).
	EndPoint2Lat float64 `json:"endPoint2Lat,required"`
	// Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees
	// (negative values west of Prime Meridian).
	EndPoint2Lon float64 `json:"endPoint2Lon,required"`
	// The name or description of link endpoint-2, corresponding to beam-2.
	EndPoint2Name string `json:"endPoint2Name,required"`
	// The name or description of the link.
	LinkName string `json:"linkName,required"`
	// The link establishment time, or the time that the link becomes available for
	// use, in ISO8601 UTC format.
	LinkStartTime time.Time `json:"linkStartTime,required" format:"date-time"`
	// The link termination time, or the time that the link becomes unavailable for
	// use, in ISO8601 UTC format.
	LinkStopTime time.Time `json:"linkStopTime,required" format:"date-time"`
	// Source of the data.
	Source string `json:"source,required"`
	// Unique identifier of the record, auto-generated by the system.
	ID string `json:"id"`
	// The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
	Band string `json:"band"`
	// The constellation name if the link is established over a LEO/MEO constellation.
	// In this case, idOnOrbit1 and idOnOrbit2 will be null.
	Constellation string `json:"constellation"`
	// Time the row was created in the database, auto-populated by the system.
	CreatedAt time.Time `json:"createdAt" format:"date-time"`
	// Application user who created the row in the database, auto-populated by the
	// system.
	CreatedBy string `json:"createdBy"`
	// The endpoint-1 to endpoint-2 data rate, in kbps.
	DataRate1To2 float64 `json:"dataRate1To2"`
	// The endpoint-2 to endpoint-1 data rate, in kbps.
	DataRate2To1 float64 `json:"dataRate2To1"`
	// The ID of beam-1 forming the link. In the case of two sat link, beam-1
	// corresponds to Sat-1.
	IDBeam1 string `json:"idBeam1"`
	// The ID of beam-2 forming the link. In the case of two sat link, beam-2
	// corresponds to Sat-2.
	IDBeam2 string `json:"idBeam2"`
	// Unique ID of the on-orbit satellite (Sat-1) forming the link. A null value for
	// idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
	IDOnOrbit1 string `json:"idOnOrbit1"`
	// Unique ID of the on-orbit satellite (Sat-2) forming the link. A null value for
	// idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a
	// LEO/MEO constellation.
	IDOnOrbit2 string `json:"idOnOrbit2"`
	// The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
	LinkState string `json:"linkState"`
	// The type of the link.
	LinkType string `json:"linkType"`
	// The OPSCAP mission status of the system(s) forming the link.
	OpsCap string `json:"opsCap"`
	// Originating system or organization which produced the data, if different from
	// the source. The origin may be different than the source if the source was a
	// mediating system which forwarded the data on behalf of the origin system. If
	// null, the source may be assumed to be the origin.
	Origin string `json:"origin"`
	// The originating source network on which this record was created, auto-populated
	// by the system.
	OrigNetwork string `json:"origNetwork"`
	// Satellite/catalog number of the target on-orbit primary object.
	SatNo1 int64 `json:"satNo1"`
	// Satellite/catalog number of the target on-orbit secondary object.
	SatNo2 int64 `json:"satNo2"`
	// The SYSCAP mission status of the system(s) forming the link.
	SysCap string `json:"sysCap"`
	// Metadata for the response, check the presence of optional fields with the
	// [resp.Field.IsPresent] method.
	JSON struct {
		ClassificationMarking resp.Field
		DataMode              resp.Field
		EndPoint1Lat          resp.Field
		EndPoint1Lon          resp.Field
		EndPoint1Name         resp.Field
		EndPoint2Lat          resp.Field
		EndPoint2Lon          resp.Field
		EndPoint2Name         resp.Field
		LinkName              resp.Field
		LinkStartTime         resp.Field
		LinkStopTime          resp.Field
		Source                resp.Field
		ID                    resp.Field
		Band                  resp.Field
		Constellation         resp.Field
		CreatedAt             resp.Field
		CreatedBy             resp.Field
		DataRate1To2          resp.Field
		DataRate2To1          resp.Field
		IDBeam1               resp.Field
		IDBeam2               resp.Field
		IDOnOrbit1            resp.Field
		IDOnOrbit2            resp.Field
		LinkState             resp.Field
		LinkType              resp.Field
		OpsCap                resp.Field
		Origin                resp.Field
		OrigNetwork           resp.Field
		SatNo1                resp.Field
		SatNo2                resp.Field
		SysCap                resp.Field
		ExtraFields           map[string]resp.Field
		raw                   string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r LinkStatusFull) RawJSON() string { return r.JSON.raw }
func (r *LinkStatusFull) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
//
// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
// may include both real and simulated data.
//
// REAL:&nbsp;Data collected or produced that pertains to real-world objects,
// events, and analysis.
//
// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
// datasets.
//
// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
// requirements, and for validating technical, functional, and performance
// characteristics.
type LinkStatusFullDataMode string

const (
	LinkStatusFullDataModeReal      LinkStatusFullDataMode = "REAL"
	LinkStatusFullDataModeTest      LinkStatusFullDataMode = "TEST"
	LinkStatusFullDataModeSimulated LinkStatusFullDataMode = "SIMULATED"
	LinkStatusFullDataModeExercise  LinkStatusFullDataMode = "EXERCISE"
)
